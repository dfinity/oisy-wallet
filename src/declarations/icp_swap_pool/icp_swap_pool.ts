/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import type { Principal } from '@icp-sdk/core/principal';
import { idlFactory, type _SERVICE } from './declarations/icp_swap_pool.did';
import type {
	Account as _Account,
	Action as _Action,
	AddLimitOrderInfo as _AddLimitOrderInfo,
	AddLimitOrderStatus as _AddLimitOrderStatus,
	AddLiquidityInfo as _AddLiquidityInfo,
	AddLiquidityStatus as _AddLiquidityStatus,
	Amount as _Amount,
	ClaimInfo as _ClaimInfo,
	ClaimStatus as _ClaimStatus,
	CycleInfo as _CycleInfo,
	DecreaseLiquidityInfo as _DecreaseLiquidityInfo,
	DecreaseLiquidityStatus as _DecreaseLiquidityStatus,
	DepositInfo as _DepositInfo,
	DepositStatus as _DepositStatus,
	Error as _Error,
	Error__1 as _Error__1,
	ExecuteLimitOrderInfo as _ExecuteLimitOrderInfo,
	ExecuteLimitOrderStatus as _ExecuteLimitOrderStatus,
	Icrc21ConsentInfo as _Icrc21ConsentInfo,
	Icrc21ConsentMessage as _Icrc21ConsentMessage,
	Icrc21ConsentMessageMetadata as _Icrc21ConsentMessageMetadata,
	Icrc21ConsentMessageRequest as _Icrc21ConsentMessageRequest,
	Icrc21ConsentMessageResponse as _Icrc21ConsentMessageResponse,
	Icrc21ConsentMessageSpec as _Icrc21ConsentMessageSpec,
	Icrc21Error as _Icrc21Error,
	Icrc21ErrorInfo as _Icrc21ErrorInfo,
	JobInfo as _JobInfo,
	Level as _Level,
	LimitOrderKey as _LimitOrderKey,
	LimitOrderType as _LimitOrderType,
	LimitOrderValue as _LimitOrderValue,
	OneStepSwapInfo as _OneStepSwapInfo,
	OneStepSwapStatus as _OneStepSwapStatus,
	Page as _Page,
	Page_1 as _Page_1,
	Page_2 as _Page_2,
	Page_3 as _Page_3,
	Page_4 as _Page_4,
	Page_5 as _Page_5,
	PoolInitArgs as _PoolInitArgs,
	PoolMetadata as _PoolMetadata,
	PositionInfo as _PositionInfo,
	PushError as _PushError,
	RefundInfo as _RefundInfo,
	RefundStatus as _RefundStatus,
	RemoveLimitOrderInfo as _RemoveLimitOrderInfo,
	RemoveLimitOrderStatus as _RemoveLimitOrderStatus,
	Result as _Result,
	Result_1 as _Result_1,
	Result_10 as _Result_10,
	Result_11 as _Result_11,
	Result_12 as _Result_12,
	Result_13 as _Result_13,
	Result_14 as _Result_14,
	Result_15 as _Result_15,
	Result_16 as _Result_16,
	Result_17 as _Result_17,
	Result_18 as _Result_18,
	Result_19 as _Result_19,
	Result_2 as _Result_2,
	Result_20 as _Result_20,
	Result_21 as _Result_21,
	Result_22 as _Result_22,
	Result_23 as _Result_23,
	Result_24 as _Result_24,
	Result_25 as _Result_25,
	Result_26 as _Result_26,
	Result_27 as _Result_27,
	Result_28 as _Result_28,
	Result_29 as _Result_29,
	Result_3 as _Result_3,
	Result_30 as _Result_30,
	Result_31 as _Result_31,
	Result_32 as _Result_32,
	Result_4 as _Result_4,
	Result_5 as _Result_5,
	Result_6 as _Result_6,
	Result_7 as _Result_7,
	Result_8 as _Result_8,
	Result_9 as _Result_9,
	SwapInfo as _SwapInfo,
	SwapRecordInfo as _SwapRecordInfo,
	SwapStatus as _SwapStatus,
	Time as _Time,
	Token__1 as _Token__1,
	Transaction as _Transaction,
	Transaction__1 as _Transaction__1,
	Transfer as _Transfer,
	TransferPositionInfo as _TransferPositionInfo,
	TransferPositionStatus as _TransferPositionStatus,
	UserPositionInfo as _UserPositionInfo,
	UserPositionInfoWithId as _UserPositionInfoWithId,
	WithdrawInfo as _WithdrawInfo,
	WithdrawStatus as _WithdrawStatus
} from './declarations/icp_swap_pool.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export type Result_32 =
	| {
			__kind__: 'ok';
			ok: Page_5;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_20 =
	| {
			__kind__: 'ok';
			ok: Array<[bigint, bigint]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_2 =
	| {
			__kind__: 'ok';
			ok: boolean;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface UserPositionInfoWithTokenAmount {
	id: bigint;
	tickUpper: bigint;
	tokensOwed0: bigint;
	tokensOwed1: bigint;
	feeGrowthInside1LastX128: bigint;
	liquidity: bigint;
	feeGrowthInside0LastX128: bigint;
	token0Amount: bigint;
	token1Amount: bigint;
	tickLower: bigint;
}
export type Result_4 =
	| {
			__kind__: 'ok';
			ok: null;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface Token {
	address: string;
	standard: string;
}
export interface SwapArgs {
	amountIn: string;
	zeroForOne: boolean;
	amountOutMinimum: string;
}
export interface UserPositionInfoWithId {
	id: bigint;
	tickUpper: bigint;
	tokensOwed0: bigint;
	tokensOwed1: bigint;
	feeGrowthInside1LastX128: bigint;
	liquidity: bigint;
	feeGrowthInside0LastX128: bigint;
	tickLower: bigint;
}
export type Result_6 =
	| {
			__kind__: 'ok';
			ok: {
				tokensOwed0: bigint;
				tokensOwed1: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface UserPositionInfo {
	tickUpper: bigint;
	tokensOwed0: bigint;
	tokensOwed1: bigint;
	feeGrowthInside1LastX128: bigint;
	liquidity: bigint;
	feeGrowthInside0LastX128: bigint;
	tickLower: bigint;
}
export interface PositionInfoWithId {
	id: string;
	tokensOwed0: bigint;
	tokensOwed1: bigint;
	feeGrowthInside1LastX128: bigint;
	liquidity: bigint;
	feeGrowthInside0LastX128: bigint;
}
export interface LimitOrderKey {
	timestamp: bigint;
	tickLimit: bigint;
}
export type Result_26 =
	| {
			__kind__: 'ok';
			ok: Array<[LimitOrderType, LimitOrderKey, LimitOrderValue]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_12 =
	| {
			__kind__: 'ok';
			ok: Array<bigint>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Error_ =
	| {
			__kind__: 'CommonError';
			CommonError: null;
	  }
	| {
			__kind__: 'InternalError';
			InternalError: string;
	  }
	| {
			__kind__: 'UnsupportedToken';
			UnsupportedToken: string;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: null;
	  };
export interface WithdrawToSubaccountArgs {
	fee: bigint;
	token: string;
	subaccount: Uint8Array;
	amount: bigint;
}
export type Result =
	| {
			__kind__: 'ok';
			ok: bigint;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_10 =
	| {
			__kind__: 'ok';
			ok: Page;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_8 =
	| {
			__kind__: 'ok';
			ok: {
				balance0: bigint;
				balance1: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Icrc21ConsentMessage =
	| {
			__kind__: 'LineDisplayMessage';
			LineDisplayMessage: {
				pages: Array<{
					lines: Array<string>;
				}>;
			};
	  }
	| {
			__kind__: 'GenericDisplayMessage';
			GenericDisplayMessage: string;
	  };
export interface Icrc21ConsentInfo {
	metadata: Icrc21ConsentMessageMetadata;
	consent_message: Icrc21ConsentMessage;
}
export interface Account {
	owner: Principal;
	subaccount?: Uint8Array;
}
export type Time = bigint;
export interface TransferPositionInfo {
	to: Account;
	err?: Error__1;
	status: TransferPositionStatus;
	from: Account;
	positionId: bigint;
	token0Amount: bigint;
	token1Amount: bigint;
}
export type Result_13 =
	| {
			__kind__: 'ok';
			ok: Array<[string, Array<bigint>]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_25 =
	| {
			__kind__: 'ok';
			ok: {
				lowerLimitOrders: Array<[LimitOrderKey, LimitOrderValue]>;
				upperLimitOrders: Array<[LimitOrderKey, LimitOrderValue]>;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Icrc21Error =
	| {
			__kind__: 'GenericError';
			GenericError: {
				description: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'InsufficientPayment';
			InsufficientPayment: Icrc21ErrorInfo;
	  }
	| {
			__kind__: 'UnsupportedCanisterCall';
			UnsupportedCanisterCall: Icrc21ErrorInfo;
	  }
	| {
			__kind__: 'ConsentMessageUnavailable';
			ConsentMessageUnavailable: Icrc21ErrorInfo;
	  };
export interface PoolMetadata {
	fee: bigint;
	key: string;
	sqrtPriceX96: bigint;
	tick: bigint;
	liquidity: bigint;
	token0: Token;
	token1: Token;
	maxLiquidityPerTick: bigint;
	nextPositionId: bigint;
}
export interface AddLimitOrderInfo {
	err?: Error__1;
	status: AddLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token0: Token__1;
	token1: Token__1;
	tickLimit: bigint;
}
export interface Transfer {
	to: Account;
	fee: bigint;
	token: Principal;
	from: Account;
	memo?: Uint8Array;
	index: bigint;
	amount: bigint;
	standard: string;
}
export type Result_27 =
	| {
			__kind__: 'ok';
			ok: PoolInitArgs;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_11 =
	| {
			__kind__: 'ok';
			ok: Page_1;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface MintArgs {
	fee: bigint;
	tickUpper: bigint;
	token0: string;
	token1: string;
	amount0Desired: string;
	amount1Desired: string;
	tickLower: bigint;
}
export interface LimitOrderArgs {
	positionId: bigint;
	tickLimit: bigint;
}
export interface CycleInfo {
	balance: bigint;
	available: bigint;
}
export interface Icrc21ErrorInfo {
	description: string;
}
export interface AccountBalance {
	balance0: bigint;
	balance1: bigint;
}
export interface Page_5 {
	content: Array<[Principal, AccountBalance]>;
	offset: bigint;
	limit: bigint;
	totalElements: bigint;
}
export type Icrc21ConsentMessageResponse =
	| {
			__kind__: 'Ok';
			Ok: Icrc21ConsentInfo;
	  }
	| {
			__kind__: 'Err';
			Err: Icrc21Error;
	  };
export interface OneStepSwapInfo {
	err?: Error__1;
	status: OneStepSwapStatus;
	withdraw: WithdrawInfo;
	swap: SwapInfo;
	deposit: DepositInfo;
}
export type Error__1 = string;
export type Result_21 =
	| {
			__kind__: 'ok';
			ok: {
				infoCid: string;
				records: Array<SwapRecordInfo>;
				errors: Array<PushError>;
				retryCount: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface Transaction__1 {
	id: bigint;
	action: Action;
	owner: Principal;
	timestamp: Time;
	canisterId: Principal;
}
export interface PushError {
	time: bigint;
	message: string;
}
export type Result_18 =
	| {
			__kind__: 'ok';
			ok: Page_2;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface JobInfo {
	interval: bigint;
	name: string;
	lastRun: Time;
	timerId?: bigint;
}
export type Result_3 =
	| {
			__kind__: 'ok';
			ok: bigint;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface PoolInitArgs {
	infoCid: Principal;
	positionIndexCid: Principal;
	trustedCanisterManagerCid: Principal;
	token0: Token;
	token1: Token;
	feeReceiverCid: Principal;
}
export type Result_15 =
	| {
			__kind__: 'ok';
			ok: {
				upperLimitOrdersIds: Array<{
					userPositionId: bigint;
					timestamp: bigint;
				}>;
				lowerLimitOrderIds: Array<{
					userPositionId: bigint;
					timestamp: bigint;
				}>;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface SwapPoolInterface {
	activeJobs(): Promise<void>;
	addLimitOrder(arg0: LimitOrderArgs): Promise<Result_2>;
	allTokenBalance(arg0: bigint, arg1: bigint): Promise<Result_32>;
	approvePosition(arg0: Principal, arg1: bigint): Promise<Result_2>;
	batchRefreshIncome(arg0: Array<bigint>): Promise<Result_31>;
	checkOwnerOfUserPosition(arg0: Principal, arg1: bigint): Promise<Result_2>;
	claim(arg0: ClaimArgs): Promise<Result_30>;
	decreaseLiquidity(arg0: DecreaseLiquidityArgs): Promise<Result_30>;
	deleteFailedTransaction(arg0: bigint, arg1: boolean): Promise<Result_2>;
	deposit(arg0: DepositArgs): Promise<Result>;
	depositAllAndMint(arg0: DepositAndMintArgs): Promise<Result>;
	depositAndSwap(arg0: DepositAndSwapArgs): Promise<Result>;
	depositFrom(arg0: DepositArgs): Promise<Result>;
	depositFromAndSwap(arg0: DepositAndSwapArgs): Promise<Result>;
	getAdmins(): Promise<Array<Principal>>;
	getAvailabilityState(): Promise<{
		whiteList: Array<Principal>;
		available: boolean;
	}>;
	getCachedTokenFee(): Promise<{
		token0Fee: bigint;
		token1Fee: bigint;
	}>;
	getClaimLog(): Promise<Array<string>>;
	getCycleInfo(): Promise<Result_29>;
	getFailedTransactions(): Promise<Result_16>;
	getFeeGrowthGlobal(): Promise<Result_28>;
	getInitArgs(): Promise<Result_27>;
	getJobs(): Promise<{
		jobs: Array<JobInfo>;
		level: Level;
	}>;
	getLimitOrderAvailabilityState(): Promise<Result_2>;
	getLimitOrderStack(): Promise<Result_26>;
	getLimitOrders(): Promise<Result_25>;
	getMistransferBalance(arg0: Token): Promise<Result>;
	getPosition(arg0: GetPositionArgs): Promise<Result_24>;
	getPositions(arg0: bigint, arg1: bigint): Promise<Result_23>;
	getSortedUserLimitOrders(arg0: Principal): Promise<Result_22>;
	getSwapRecordState(): Promise<Result_21>;
	getTickBitmaps(): Promise<Result_20>;
	getTickInfos(arg0: bigint, arg1: bigint): Promise<Result_19>;
	getTicks(arg0: bigint, arg1: bigint): Promise<Result_18>;
	getTokenAmountState(): Promise<Result_17>;
	getTokenBalance(): Promise<{
		token0: bigint;
		token1: bigint;
	}>;
	getTransactions(): Promise<Result_16>;
	getTransactionsByOwner(arg0: Principal): Promise<Result_16>;
	getUserByPositionId(arg0: bigint): Promise<Result_1>;
	getUserLimitOrders(arg0: Principal): Promise<Result_15>;
	getUserPosition(arg0: bigint): Promise<Result_14>;
	getUserPositionIds(): Promise<Result_13>;
	getUserPositionIdsByPrincipal(arg0: Principal): Promise<Result_12>;
	getUserPositionWithTokenAmount(arg0: bigint, arg1: bigint): Promise<Result_11>;
	getUserPositions(arg0: bigint, arg1: bigint): Promise<Result_10>;
	getUserPositionsByPrincipal(arg0: Principal): Promise<Result_9>;
	getUserUnusedBalance(arg0: Principal): Promise<Result_8>;
	getVersion(): Promise<string>;
	icrc10_supported_standards(): Promise<
		Array<{
			url: string;
			name: string;
		}>
	>;
	icrc21_canister_call_consent_message(
		arg0: Icrc21ConsentMessageRequest
	): Promise<Icrc21ConsentMessageResponse>;
	icrc28_trusted_origins(): Promise<Icrc28TrustedOriginsResponse>;
	increaseLiquidity(arg0: IncreaseLiquidityArgs): Promise<Result>;
	init(arg0: bigint, arg1: bigint, arg2: bigint): Promise<void>;
	metadata(): Promise<Result_7>;
	mint(arg0: MintArgs): Promise<Result>;
	quote(arg0: SwapArgs): Promise<Result>;
	quoteForAll(arg0: SwapArgs): Promise<Result>;
	refreshIncome(arg0: bigint): Promise<Result_6>;
	removeLimitOrder(arg0: bigint): Promise<Result_2>;
	restartJobs(arg0: Array<string>): Promise<void>;
	setAdmins(arg0: Array<Principal>): Promise<void>;
	setAvailable(arg0: boolean): Promise<void>;
	setIcrc28TrustedOrigins(arg0: Array<string>): Promise<Result_5>;
	setLimitOrderAvailable(arg0: boolean): Promise<void>;
	setTokenAmountState(arg0: bigint, arg1: bigint): Promise<Result_4>;
	setWhiteList(arg0: Array<Principal>): Promise<void>;
	stopJobs(arg0: Array<string>): Promise<void>;
	sumTick(): Promise<Result_3>;
	swap(arg0: SwapArgs): Promise<Result>;
	transferPosition(arg0: Principal, arg1: Principal, arg2: bigint): Promise<Result_2>;
	updateTokenFee(): Promise<void>;
	upgradeTokenStandard(arg0: Principal): Promise<Result_1>;
	withdraw(arg0: WithdrawArgs): Promise<Result>;
	withdrawMistransferBalance(arg0: Token): Promise<Result>;
	withdrawToSubaccount(arg0: WithdrawToSubaccountArgs): Promise<Result>;
}
export interface WithdrawArgs {
	fee: bigint;
	token: string;
	amount: bigint;
}
export type Result_23 =
	| {
			__kind__: 'ok';
			ok: Page_4;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface SwapRecordInfo {
	currentLiquidity: bigint;
	currentSqrtPriceX96: bigint;
	currentTick: bigint;
	txInfo: Transaction__1;
	poolFee: bigint;
}
export interface Token__1 {
	address: Principal;
	standard: string;
}
export interface DecreaseLiquidityInfo {
	err?: Error__1;
	status: DecreaseLiquidityStatus;
	liquidity: bigint;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: Token__1;
	token1: Token__1;
}
export interface Icrc28TrustedOriginsResponse {
	trusted_origins: Array<string>;
}
export interface RefundInfo {
	err?: Error__1;
	status: RefundStatus;
	relatedIndex: bigint;
	transfer: Transfer;
}
export interface ClaimInfo {
	err?: Error__1;
	status: ClaimStatus;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: Token__1;
	token1: Token__1;
}
export type Result_5 =
	| {
			__kind__: 'ok';
			ok: boolean;
	  }
	| {
			__kind__: 'err';
			err: null;
	  };
export interface RemoveLimitOrderInfo {
	err?: Error__1;
	status: RemoveLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token1AmountOut: bigint;
	token0: Token__1;
	token1: Token__1;
	token0AmountOut: bigint;
	tickLimit: bigint;
}
export interface Page_1 {
	content: Array<UserPositionInfoWithTokenAmount>;
	offset: bigint;
	limit: bigint;
	totalElements: bigint;
}
export interface Page_3 {
	content: Array<TickLiquidityInfo>;
	offset: bigint;
	limit: bigint;
	totalElements: bigint;
}
export interface PositionInfo {
	tokensOwed0: bigint;
	tokensOwed1: bigint;
	feeGrowthInside1LastX128: bigint;
	liquidity: bigint;
	feeGrowthInside0LastX128: bigint;
}
export interface Page {
	content: Array<UserPositionInfoWithId>;
	offset: bigint;
	limit: bigint;
	totalElements: bigint;
}
export type Result_31 =
	| {
			__kind__: 'ok';
			ok: {
				tokenIncome: Array<
					[
						bigint,
						{
							tokensOwed0: bigint;
							tokensOwed1: bigint;
						}
					]
				>;
				totalTokensOwed0: bigint;
				totalTokensOwed1: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_7 =
	| {
			__kind__: 'ok';
			ok: PoolMetadata;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface DepositInfo {
	err?: Error__1;
	status: DepositStatus;
	transfer: Transfer;
}
export interface GetPositionArgs {
	tickUpper: bigint;
	tickLower: bigint;
}
export type Result_28 =
	| {
			__kind__: 'ok';
			ok: {
				feeGrowthGlobal1X128: bigint;
				feeGrowthGlobal0X128: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface Icrc21ConsentMessageRequest {
	arg: Uint8Array;
	method: string;
	user_preferences: Icrc21ConsentMessageSpec;
}
export type Result_9 =
	| {
			__kind__: 'ok';
			ok: Array<UserPositionInfoWithId>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface LimitOrderValue {
	userPositionId: bigint;
	token0InAmount: bigint;
	owner: Principal;
	token1InAmount: bigint;
}
export type Result_30 =
	| {
			__kind__: 'ok';
			ok: {
				amount0: bigint;
				amount1: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface DepositArgs {
	fee: bigint;
	token: string;
	amount: bigint;
}
export interface DepositAndSwapArgs {
	tokenInFee: bigint;
	amountIn: string;
	zeroForOne: boolean;
	amountOutMinimum: string;
	tokenOutFee: bigint;
}
export interface ExecuteLimitOrderInfo {
	err?: Error__1;
	status: ExecuteLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token1AmountOut: bigint;
	token0: Token__1;
	token1: Token__1;
	token0AmountOut: bigint;
	tickLimit: bigint;
}
export type Result_17 =
	| {
			__kind__: 'ok';
			ok: {
				swapFee0Repurchase: bigint;
				token0Amount: bigint;
				swapFeeReceiver: string;
				token1Amount: bigint;
				swapFee1Repurchase: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface IncreaseLiquidityArgs {
	positionId: bigint;
	amount0Desired: string;
	amount1Desired: string;
}
export type Result_16 =
	| {
			__kind__: 'ok';
			ok: Array<[bigint, Transaction]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_1 =
	| {
			__kind__: 'ok';
			ok: string;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface Transaction {
	id: bigint;
	action: Action;
	owner: Principal;
	timestamp: Time;
	canisterId: Principal;
}
export type Action =
	| {
			__kind__: 'Withdraw';
			Withdraw: WithdrawInfo;
	  }
	| {
			__kind__: 'RemoveLimitOrder';
			RemoveLimitOrder: RemoveLimitOrderInfo;
	  }
	| {
			__kind__: 'AddLiquidity';
			AddLiquidity: AddLiquidityInfo;
	  }
	| {
			__kind__: 'OneStepSwap';
			OneStepSwap: OneStepSwapInfo;
	  }
	| {
			__kind__: 'Deposit';
			Deposit: DepositInfo;
	  }
	| {
			__kind__: 'Refund';
			Refund: RefundInfo;
	  }
	| {
			__kind__: 'Swap';
			Swap: SwapInfo;
	  }
	| {
			__kind__: 'ExecuteLimitOrder';
			ExecuteLimitOrder: ExecuteLimitOrderInfo;
	  }
	| {
			__kind__: 'TransferPosition';
			TransferPosition: TransferPositionInfo;
	  }
	| {
			__kind__: 'DecreaseLiquidity';
			DecreaseLiquidity: DecreaseLiquidityInfo;
	  }
	| {
			__kind__: 'Claim';
			Claim: ClaimInfo;
	  }
	| {
			__kind__: 'AddLimitOrder';
			AddLimitOrder: AddLimitOrderInfo;
	  };
export type Result_22 =
	| {
			__kind__: 'ok';
			ok: Array<{
				userPositionId: bigint;
				token0InAmount: bigint;
				timestamp: bigint;
				tickLimit: bigint;
				token1InAmount: bigint;
			}>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface DepositAndMintArgs {
	tickUpper: bigint;
	fee0: bigint;
	fee1: bigint;
	amount0: bigint;
	amount1: bigint;
	positionOwner: Principal;
	amount0Desired: string;
	amount1Desired: string;
	tickLower: bigint;
}
export interface TickLiquidityInfo {
	tickIndex: bigint;
	price0Decimal: bigint;
	liquidityNet: bigint;
	price0: bigint;
	price1: bigint;
	liquidityGross: bigint;
	price1Decimal: bigint;
}
export type Result_19 =
	| {
			__kind__: 'ok';
			ok: Page_3;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_29 =
	| {
			__kind__: 'ok';
			ok: CycleInfo;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface SwapInfo {
	err?: Error__1;
	status: SwapStatus;
	tokenIn: Token__1;
	tokenOut: Token__1;
	amountOutFee: bigint;
	amountIn: Amount;
	amountOut: bigint;
	amountInFee: bigint;
}
export type Result_24 =
	| {
			__kind__: 'ok';
			ok: PositionInfo;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_14 =
	| {
			__kind__: 'ok';
			ok: UserPositionInfo;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface Icrc21ConsentMessageMetadata {
	utc_offset_minutes?: number;
	language: string;
}
export interface DecreaseLiquidityArgs {
	liquidity: string;
	positionId: bigint;
}
export interface ClaimArgs {
	positionId: bigint;
}
export interface WithdrawInfo {
	err?: Error__1;
	status: WithdrawStatus;
	transfer: Transfer;
}
export interface Icrc21ConsentMessageSpec {
	metadata: Icrc21ConsentMessageMetadata;
	device_spec?:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  };
}
export interface Page_2 {
	content: Array<TickInfoWithId>;
	offset: bigint;
	limit: bigint;
	totalElements: bigint;
}
export type Amount = bigint;
export interface AddLiquidityInfo {
	err?: Error__1;
	status: AddLiquidityStatus;
	liquidity: bigint;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: Token__1;
	token1: Token__1;
}
export interface Page_4 {
	content: Array<PositionInfoWithId>;
	offset: bigint;
	limit: bigint;
	totalElements: bigint;
}
export interface TickInfoWithId {
	id: string;
	initialized: boolean;
	feeGrowthOutside1X128: bigint;
	secondsPerLiquidityOutsideX128: bigint;
	liquidityNet: bigint;
	secondsOutside: bigint;
	liquidityGross: bigint;
	feeGrowthOutside0X128: bigint;
	tickCumulativeOutside: bigint;
}
export enum ClaimStatus {
	Failed = 'Failed',
	Created = 'Created',
	Completed = 'Completed'
}
export enum DepositStatus {
	Failed = 'Failed',
	TransferCompleted = 'TransferCompleted',
	Created = 'Created',
	Completed = 'Completed'
}
export enum Level {
	Inactive = 'Inactive',
	Active = 'Active'
}
export enum LimitOrderType {
	Lower = 'Lower',
	Upper = 'Upper'
}
export enum OneStepSwapStatus {
	SwapCompleted = 'SwapCompleted',
	Failed = 'Failed',
	PreSwapCompleted = 'PreSwapCompleted',
	DepositCreditCompleted = 'DepositCreditCompleted',
	DepositTransferCompleted = 'DepositTransferCompleted',
	Created = 'Created',
	WithdrawCreditCompleted = 'WithdrawCreditCompleted',
	Completed = 'Completed'
}
export enum RefundStatus {
	Failed = 'Failed',
	CreditCompleted = 'CreditCompleted',
	Created = 'Created',
	Completed = 'Completed'
}
export enum RemoveLimitOrderStatus {
	Failed = 'Failed',
	LimitOrderDeleted = 'LimitOrderDeleted',
	Created = 'Created',
	Completed = 'Completed'
}
export interface icp_swap_poolInterface extends SwapPoolInterface {}
export class Icp_swap_pool implements icp_swap_poolInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async activeJobs(): Promise<void> {
		const result = await this.actor.activeJobs();
		return result;
	}
	async addLimitOrder(arg0: LimitOrderArgs): Promise<Result_2> {
		const result = await this.actor.addLimitOrder(arg0);
		return from_candid_Result_2_n1(result);
	}
	async allTokenBalance(arg0: bigint, arg1: bigint): Promise<Result_32> {
		const result = await this.actor.allTokenBalance(arg0, arg1);
		return from_candid_Result_32_n5(result);
	}
	async approvePosition(arg0: Principal, arg1: bigint): Promise<Result_2> {
		const result = await this.actor.approvePosition(arg0, arg1);
		return from_candid_Result_2_n1(result);
	}
	async batchRefreshIncome(arg0: Array<bigint>): Promise<Result_31> {
		const result = await this.actor.batchRefreshIncome(arg0);
		return from_candid_Result_31_n7(result);
	}
	async checkOwnerOfUserPosition(arg0: Principal, arg1: bigint): Promise<Result_2> {
		const result = await this.actor.checkOwnerOfUserPosition(arg0, arg1);
		return from_candid_Result_2_n1(result);
	}
	async claim(arg0: ClaimArgs): Promise<Result_30> {
		const result = await this.actor.claim(arg0);
		return from_candid_Result_30_n9(result);
	}
	async decreaseLiquidity(arg0: DecreaseLiquidityArgs): Promise<Result_30> {
		const result = await this.actor.decreaseLiquidity(arg0);
		return from_candid_Result_30_n9(result);
	}
	async deleteFailedTransaction(arg0: bigint, arg1: boolean): Promise<Result_2> {
		const result = await this.actor.deleteFailedTransaction(arg0, arg1);
		return from_candid_Result_2_n1(result);
	}
	async deposit(arg0: DepositArgs): Promise<Result> {
		const result = await this.actor.deposit(arg0);
		return from_candid_Result_n11(result);
	}
	async depositAllAndMint(arg0: DepositAndMintArgs): Promise<Result> {
		const result = await this.actor.depositAllAndMint(arg0);
		return from_candid_Result_n11(result);
	}
	async depositAndSwap(arg0: DepositAndSwapArgs): Promise<Result> {
		const result = await this.actor.depositAndSwap(arg0);
		return from_candid_Result_n11(result);
	}
	async depositFrom(arg0: DepositArgs): Promise<Result> {
		const result = await this.actor.depositFrom(arg0);
		return from_candid_Result_n11(result);
	}
	async depositFromAndSwap(arg0: DepositAndSwapArgs): Promise<Result> {
		const result = await this.actor.depositFromAndSwap(arg0);
		return from_candid_Result_n11(result);
	}
	async getAdmins(): Promise<Array<Principal>> {
		const result = await this.actor.getAdmins();
		return result;
	}
	async getAvailabilityState(): Promise<{
		whiteList: Array<Principal>;
		available: boolean;
	}> {
		const result = await this.actor.getAvailabilityState();
		return result;
	}
	async getCachedTokenFee(): Promise<{
		token0Fee: bigint;
		token1Fee: bigint;
	}> {
		const result = await this.actor.getCachedTokenFee();
		return result;
	}
	async getClaimLog(): Promise<Array<string>> {
		const result = await this.actor.getClaimLog();
		return result;
	}
	async getCycleInfo(): Promise<Result_29> {
		const result = await this.actor.getCycleInfo();
		return from_candid_Result_29_n13(result);
	}
	async getFailedTransactions(): Promise<Result_16> {
		const result = await this.actor.getFailedTransactions();
		return from_candid_Result_16_n15(result);
	}
	async getFeeGrowthGlobal(): Promise<Result_28> {
		const result = await this.actor.getFeeGrowthGlobal();
		return from_candid_Result_28_n70(result);
	}
	async getInitArgs(): Promise<Result_27> {
		const result = await this.actor.getInitArgs();
		return from_candid_Result_27_n72(result);
	}
	async getJobs(): Promise<{
		jobs: Array<JobInfo>;
		level: Level;
	}> {
		const result = await this.actor.getJobs();
		return from_candid_record_n74(result);
	}
	async getLimitOrderAvailabilityState(): Promise<Result_2> {
		const result = await this.actor.getLimitOrderAvailabilityState();
		return from_candid_Result_2_n1(result);
	}
	async getLimitOrderStack(): Promise<Result_26> {
		const result = await this.actor.getLimitOrderStack();
		return from_candid_Result_26_n81(result);
	}
	async getLimitOrders(): Promise<Result_25> {
		const result = await this.actor.getLimitOrders();
		return from_candid_Result_25_n87(result);
	}
	async getMistransferBalance(arg0: Token): Promise<Result> {
		const result = await this.actor.getMistransferBalance(arg0);
		return from_candid_Result_n11(result);
	}
	async getPosition(arg0: GetPositionArgs): Promise<Result_24> {
		const result = await this.actor.getPosition(arg0);
		return from_candid_Result_24_n89(result);
	}
	async getPositions(arg0: bigint, arg1: bigint): Promise<Result_23> {
		const result = await this.actor.getPositions(arg0, arg1);
		return from_candid_Result_23_n91(result);
	}
	async getSortedUserLimitOrders(arg0: Principal): Promise<Result_22> {
		const result = await this.actor.getSortedUserLimitOrders(arg0);
		return from_candid_Result_22_n93(result);
	}
	async getSwapRecordState(): Promise<Result_21> {
		const result = await this.actor.getSwapRecordState();
		return from_candid_Result_21_n95(result);
	}
	async getTickBitmaps(): Promise<Result_20> {
		const result = await this.actor.getTickBitmaps();
		return from_candid_Result_20_n102(result);
	}
	async getTickInfos(arg0: bigint, arg1: bigint): Promise<Result_19> {
		const result = await this.actor.getTickInfos(arg0, arg1);
		return from_candid_Result_19_n104(result);
	}
	async getTicks(arg0: bigint, arg1: bigint): Promise<Result_18> {
		const result = await this.actor.getTicks(arg0, arg1);
		return from_candid_Result_18_n106(result);
	}
	async getTokenAmountState(): Promise<Result_17> {
		const result = await this.actor.getTokenAmountState();
		return from_candid_Result_17_n108(result);
	}
	async getTokenBalance(): Promise<{
		token0: bigint;
		token1: bigint;
	}> {
		const result = await this.actor.getTokenBalance();
		return result;
	}
	async getTransactions(): Promise<Result_16> {
		const result = await this.actor.getTransactions();
		return from_candid_Result_16_n15(result);
	}
	async getTransactionsByOwner(arg0: Principal): Promise<Result_16> {
		const result = await this.actor.getTransactionsByOwner(arg0);
		return from_candid_Result_16_n15(result);
	}
	async getUserByPositionId(arg0: bigint): Promise<Result_1> {
		const result = await this.actor.getUserByPositionId(arg0);
		return from_candid_Result_1_n110(result);
	}
	async getUserLimitOrders(arg0: Principal): Promise<Result_15> {
		const result = await this.actor.getUserLimitOrders(arg0);
		return from_candid_Result_15_n112(result);
	}
	async getUserPosition(arg0: bigint): Promise<Result_14> {
		const result = await this.actor.getUserPosition(arg0);
		return from_candid_Result_14_n114(result);
	}
	async getUserPositionIds(): Promise<Result_13> {
		const result = await this.actor.getUserPositionIds();
		return from_candid_Result_13_n116(result);
	}
	async getUserPositionIdsByPrincipal(arg0: Principal): Promise<Result_12> {
		const result = await this.actor.getUserPositionIdsByPrincipal(arg0);
		return from_candid_Result_12_n118(result);
	}
	async getUserPositionWithTokenAmount(arg0: bigint, arg1: bigint): Promise<Result_11> {
		const result = await this.actor.getUserPositionWithTokenAmount(arg0, arg1);
		return from_candid_Result_11_n120(result);
	}
	async getUserPositions(arg0: bigint, arg1: bigint): Promise<Result_10> {
		const result = await this.actor.getUserPositions(arg0, arg1);
		return from_candid_Result_10_n122(result);
	}
	async getUserPositionsByPrincipal(arg0: Principal): Promise<Result_9> {
		const result = await this.actor.getUserPositionsByPrincipal(arg0);
		return from_candid_Result_9_n124(result);
	}
	async getUserUnusedBalance(arg0: Principal): Promise<Result_8> {
		const result = await this.actor.getUserUnusedBalance(arg0);
		return from_candid_Result_8_n126(result);
	}
	async getVersion(): Promise<string> {
		const result = await this.actor.getVersion();
		return result;
	}
	async icrc10_supported_standards(): Promise<
		Array<{
			url: string;
			name: string;
		}>
	> {
		const result = await this.actor.icrc10_supported_standards();
		return result;
	}
	async icrc21_canister_call_consent_message(
		arg0: Icrc21ConsentMessageRequest
	): Promise<Icrc21ConsentMessageResponse> {
		const result = await this.actor.icrc21_canister_call_consent_message(
			to_candid_Icrc21ConsentMessageRequest_n128(arg0)
		);
		return from_candid_Icrc21ConsentMessageResponse_n135(result);
	}
	async icrc28_trusted_origins(): Promise<Icrc28TrustedOriginsResponse> {
		const result = await this.actor.icrc28_trusted_origins();
		return result;
	}
	async increaseLiquidity(arg0: IncreaseLiquidityArgs): Promise<Result> {
		const result = await this.actor.increaseLiquidity(arg0);
		return from_candid_Result_n11(result);
	}
	async init(arg0: bigint, arg1: bigint, arg2: bigint): Promise<void> {
		const result = await this.actor.init(arg0, arg1, arg2);
		return result;
	}
	async metadata(): Promise<Result_7> {
		const result = await this.actor.metadata();
		return from_candid_Result_7_n146(result);
	}
	async mint(arg0: MintArgs): Promise<Result> {
		const result = await this.actor.mint(arg0);
		return from_candid_Result_n11(result);
	}
	async quote(arg0: SwapArgs): Promise<Result> {
		const result = await this.actor.quote(arg0);
		return from_candid_Result_n11(result);
	}
	async quoteForAll(arg0: SwapArgs): Promise<Result> {
		const result = await this.actor.quoteForAll(arg0);
		return from_candid_Result_n11(result);
	}
	async refreshIncome(arg0: bigint): Promise<Result_6> {
		const result = await this.actor.refreshIncome(arg0);
		return from_candid_Result_6_n148(result);
	}
	async removeLimitOrder(arg0: bigint): Promise<Result_2> {
		const result = await this.actor.removeLimitOrder(arg0);
		return from_candid_Result_2_n1(result);
	}
	async restartJobs(arg0: Array<string>): Promise<void> {
		const result = await this.actor.restartJobs(arg0);
		return result;
	}
	async setAdmins(arg0: Array<Principal>): Promise<void> {
		const result = await this.actor.setAdmins(arg0);
		return result;
	}
	async setAvailable(arg0: boolean): Promise<void> {
		const result = await this.actor.setAvailable(arg0);
		return result;
	}
	async setIcrc28TrustedOrigins(arg0: Array<string>): Promise<Result_5> {
		const result = await this.actor.setIcrc28TrustedOrigins(arg0);
		return from_candid_Result_5_n150(result);
	}
	async setLimitOrderAvailable(arg0: boolean): Promise<void> {
		const result = await this.actor.setLimitOrderAvailable(arg0);
		return result;
	}
	async setTokenAmountState(arg0: bigint, arg1: bigint): Promise<Result_4> {
		const result = await this.actor.setTokenAmountState(arg0, arg1);
		return from_candid_Result_4_n152(result);
	}
	async setWhiteList(arg0: Array<Principal>): Promise<void> {
		const result = await this.actor.setWhiteList(arg0);
		return result;
	}
	async stopJobs(arg0: Array<string>): Promise<void> {
		const result = await this.actor.stopJobs(arg0);
		return result;
	}
	async sumTick(): Promise<Result_3> {
		const result = await this.actor.sumTick();
		return from_candid_Result_3_n154(result);
	}
	async swap(arg0: SwapArgs): Promise<Result> {
		const result = await this.actor.swap(arg0);
		return from_candid_Result_n11(result);
	}
	async transferPosition(arg0: Principal, arg1: Principal, arg2: bigint): Promise<Result_2> {
		const result = await this.actor.transferPosition(arg0, arg1, arg2);
		return from_candid_Result_2_n1(result);
	}
	async updateTokenFee(): Promise<void> {
		const result = await this.actor.updateTokenFee();
		return result;
	}
	async upgradeTokenStandard(arg0: Principal): Promise<Result_1> {
		const result = await this.actor.upgradeTokenStandard(arg0);
		return from_candid_Result_1_n110(result);
	}
	async withdraw(arg0: WithdrawArgs): Promise<Result> {
		const result = await this.actor.withdraw(arg0);
		return from_candid_Result_n11(result);
	}
	async withdrawMistransferBalance(arg0: Token): Promise<Result> {
		const result = await this.actor.withdrawMistransferBalance(arg0);
		return from_candid_Result_n11(result);
	}
	async withdrawToSubaccount(arg0: WithdrawToSubaccountArgs): Promise<Result> {
		const result = await this.actor.withdrawToSubaccount(arg0);
		return from_candid_Result_n11(result);
	}
}
function from_candid_Account_n30(value: _Account): Account {
	return from_candid_record_n31(value);
}
function from_candid_Action_n21(value: _Action): Action {
	return from_candid_variant_n22(value);
}
function from_candid_AddLimitOrderInfo_n67(value: _AddLimitOrderInfo): AddLimitOrderInfo {
	return from_candid_record_n68(value);
}
function from_candid_AddLimitOrderStatus_n69(value: _AddLimitOrderStatus): AddLimitOrderStatus {
	return from_candid_variant_n40(value);
}
function from_candid_AddLiquidityInfo_n37(value: _AddLiquidityInfo): AddLiquidityInfo {
	return from_candid_record_n38(value);
}
function from_candid_AddLiquidityStatus_n39(value: _AddLiquidityStatus): AddLiquidityStatus {
	return from_candid_variant_n40(value);
}
function from_candid_ClaimInfo_n64(value: _ClaimInfo): ClaimInfo {
	return from_candid_record_n65(value);
}
function from_candid_ClaimStatus_n66(value: _ClaimStatus): ClaimStatus {
	return from_candid_variant_n40(value);
}
function from_candid_DecreaseLiquidityInfo_n61(
	value: _DecreaseLiquidityInfo
): DecreaseLiquidityInfo {
	return from_candid_record_n62(value);
}
function from_candid_DecreaseLiquidityStatus_n63(
	value: _DecreaseLiquidityStatus
): DecreaseLiquidityStatus {
	return from_candid_variant_n40(value);
}
function from_candid_DepositInfo_n48(value: _DepositInfo): DepositInfo {
	return from_candid_record_n49(value);
}
function from_candid_DepositStatus_n50(value: _DepositStatus): DepositStatus {
	return from_candid_variant_n51(value);
}
function from_candid_Error_n3(value: _Error): Error_ {
	return from_candid_variant_n4(value);
}
function from_candid_ExecuteLimitOrderInfo_n55(
	value: _ExecuteLimitOrderInfo
): ExecuteLimitOrderInfo {
	return from_candid_record_n56(value);
}
function from_candid_ExecuteLimitOrderStatus_n57(
	value: _ExecuteLimitOrderStatus
): ExecuteLimitOrderStatus {
	return from_candid_variant_n40(value);
}
function from_candid_Icrc21ConsentInfo_n137(value: _Icrc21ConsentInfo): Icrc21ConsentInfo {
	return from_candid_record_n138(value);
}
function from_candid_Icrc21ConsentMessageMetadata_n139(
	value: _Icrc21ConsentMessageMetadata
): Icrc21ConsentMessageMetadata {
	return from_candid_record_n140(value);
}
function from_candid_Icrc21ConsentMessageResponse_n135(
	value: _Icrc21ConsentMessageResponse
): Icrc21ConsentMessageResponse {
	return from_candid_variant_n136(value);
}
function from_candid_Icrc21ConsentMessage_n142(value: _Icrc21ConsentMessage): Icrc21ConsentMessage {
	return from_candid_variant_n143(value);
}
function from_candid_Icrc21Error_n144(value: _Icrc21Error): Icrc21Error {
	return from_candid_variant_n145(value);
}
function from_candid_JobInfo_n76(value: _JobInfo): JobInfo {
	return from_candid_record_n77(value);
}
function from_candid_Level_n79(value: _Level): Level {
	return from_candid_variant_n80(value);
}
function from_candid_LimitOrderType_n85(value: _LimitOrderType): LimitOrderType {
	return from_candid_variant_n86(value);
}
function from_candid_OneStepSwapInfo_n41(value: _OneStepSwapInfo): OneStepSwapInfo {
	return from_candid_record_n42(value);
}
function from_candid_OneStepSwapStatus_n43(value: _OneStepSwapStatus): OneStepSwapStatus {
	return from_candid_variant_n44(value);
}
function from_candid_RefundInfo_n52(value: _RefundInfo): RefundInfo {
	return from_candid_record_n53(value);
}
function from_candid_RefundStatus_n54(value: _RefundStatus): RefundStatus {
	return from_candid_variant_n27(value);
}
function from_candid_RemoveLimitOrderInfo_n33(value: _RemoveLimitOrderInfo): RemoveLimitOrderInfo {
	return from_candid_record_n34(value);
}
function from_candid_RemoveLimitOrderStatus_n35(
	value: _RemoveLimitOrderStatus
): RemoveLimitOrderStatus {
	return from_candid_variant_n36(value);
}
function from_candid_Result_10_n122(value: _Result_10): Result_10 {
	return from_candid_variant_n123(value);
}
function from_candid_Result_11_n120(value: _Result_11): Result_11 {
	return from_candid_variant_n121(value);
}
function from_candid_Result_12_n118(value: _Result_12): Result_12 {
	return from_candid_variant_n119(value);
}
function from_candid_Result_13_n116(value: _Result_13): Result_13 {
	return from_candid_variant_n117(value);
}
function from_candid_Result_14_n114(value: _Result_14): Result_14 {
	return from_candid_variant_n115(value);
}
function from_candid_Result_15_n112(value: _Result_15): Result_15 {
	return from_candid_variant_n113(value);
}
function from_candid_Result_16_n15(value: _Result_16): Result_16 {
	return from_candid_variant_n16(value);
}
function from_candid_Result_17_n108(value: _Result_17): Result_17 {
	return from_candid_variant_n109(value);
}
function from_candid_Result_18_n106(value: _Result_18): Result_18 {
	return from_candid_variant_n107(value);
}
function from_candid_Result_19_n104(value: _Result_19): Result_19 {
	return from_candid_variant_n105(value);
}
function from_candid_Result_1_n110(value: _Result_1): Result_1 {
	return from_candid_variant_n111(value);
}
function from_candid_Result_20_n102(value: _Result_20): Result_20 {
	return from_candid_variant_n103(value);
}
function from_candid_Result_21_n95(value: _Result_21): Result_21 {
	return from_candid_variant_n96(value);
}
function from_candid_Result_22_n93(value: _Result_22): Result_22 {
	return from_candid_variant_n94(value);
}
function from_candid_Result_23_n91(value: _Result_23): Result_23 {
	return from_candid_variant_n92(value);
}
function from_candid_Result_24_n89(value: _Result_24): Result_24 {
	return from_candid_variant_n90(value);
}
function from_candid_Result_25_n87(value: _Result_25): Result_25 {
	return from_candid_variant_n88(value);
}
function from_candid_Result_26_n81(value: _Result_26): Result_26 {
	return from_candid_variant_n82(value);
}
function from_candid_Result_27_n72(value: _Result_27): Result_27 {
	return from_candid_variant_n73(value);
}
function from_candid_Result_28_n70(value: _Result_28): Result_28 {
	return from_candid_variant_n71(value);
}
function from_candid_Result_29_n13(value: _Result_29): Result_29 {
	return from_candid_variant_n14(value);
}
function from_candid_Result_2_n1(value: _Result_2): Result_2 {
	return from_candid_variant_n2(value);
}
function from_candid_Result_30_n9(value: _Result_30): Result_30 {
	return from_candid_variant_n10(value);
}
function from_candid_Result_31_n7(value: _Result_31): Result_31 {
	return from_candid_variant_n8(value);
}
function from_candid_Result_32_n5(value: _Result_32): Result_32 {
	return from_candid_variant_n6(value);
}
function from_candid_Result_3_n154(value: _Result_3): Result_3 {
	return from_candid_variant_n155(value);
}
function from_candid_Result_4_n152(value: _Result_4): Result_4 {
	return from_candid_variant_n153(value);
}
function from_candid_Result_5_n150(value: _Result_5): Result_5 {
	return from_candid_variant_n151(value);
}
function from_candid_Result_6_n148(value: _Result_6): Result_6 {
	return from_candid_variant_n149(value);
}
function from_candid_Result_7_n146(value: _Result_7): Result_7 {
	return from_candid_variant_n147(value);
}
function from_candid_Result_8_n126(value: _Result_8): Result_8 {
	return from_candid_variant_n127(value);
}
function from_candid_Result_9_n124(value: _Result_9): Result_9 {
	return from_candid_variant_n125(value);
}
function from_candid_Result_n11(value: _Result): Result {
	return from_candid_variant_n12(value);
}
function from_candid_SwapInfo_n45(value: _SwapInfo): SwapInfo {
	return from_candid_record_n46(value);
}
function from_candid_SwapRecordInfo_n99(value: _SwapRecordInfo): SwapRecordInfo {
	return from_candid_record_n100(value);
}
function from_candid_SwapStatus_n47(value: _SwapStatus): SwapStatus {
	return from_candid_variant_n40(value);
}
function from_candid_Transaction__1_n101(value: _Transaction__1): Transaction__1 {
	return from_candid_record_n20(value);
}
function from_candid_Transaction_n19(value: _Transaction): Transaction {
	return from_candid_record_n20(value);
}
function from_candid_TransferPositionInfo_n58(value: _TransferPositionInfo): TransferPositionInfo {
	return from_candid_record_n59(value);
}
function from_candid_TransferPositionStatus_n60(
	value: _TransferPositionStatus
): TransferPositionStatus {
	return from_candid_variant_n40(value);
}
function from_candid_Transfer_n28(value: _Transfer): Transfer {
	return from_candid_record_n29(value);
}
function from_candid_WithdrawInfo_n23(value: _WithdrawInfo): WithdrawInfo {
	return from_candid_record_n24(value);
}
function from_candid_WithdrawStatus_n26(value: _WithdrawStatus): WithdrawStatus {
	return from_candid_variant_n27(value);
}
function from_candid_opt_n141(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n25(value: [] | [_Error__1]): Error__1 | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n32(value: [] | [Uint8Array]): Uint8Array | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n78(value: [] | [bigint]): bigint | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_record_n100(value: {
	currentLiquidity: bigint;
	currentSqrtPriceX96: bigint;
	currentTick: bigint;
	txInfo: _Transaction__1;
	poolFee: bigint;
}): {
	currentLiquidity: bigint;
	currentSqrtPriceX96: bigint;
	currentTick: bigint;
	txInfo: Transaction__1;
	poolFee: bigint;
} {
	return {
		currentLiquidity: value.currentLiquidity,
		currentSqrtPriceX96: value.currentSqrtPriceX96,
		currentTick: value.currentTick,
		txInfo: from_candid_Transaction__1_n101(value.txInfo),
		poolFee: value.poolFee
	};
}
function from_candid_record_n138(value: {
	metadata: _Icrc21ConsentMessageMetadata;
	consent_message: _Icrc21ConsentMessage;
}): {
	metadata: Icrc21ConsentMessageMetadata;
	consent_message: Icrc21ConsentMessage;
} {
	return {
		metadata: from_candid_Icrc21ConsentMessageMetadata_n139(value.metadata),
		consent_message: from_candid_Icrc21ConsentMessage_n142(value.consent_message)
	};
}
function from_candid_record_n140(value: { utc_offset_minutes: [] | [number]; language: string }): {
	utc_offset_minutes?: number;
	language: string;
} {
	return {
		utc_offset_minutes: record_opt_to_undefined(from_candid_opt_n141(value.utc_offset_minutes)),
		language: value.language
	};
}
function from_candid_record_n20(value: {
	id: bigint;
	action: _Action;
	owner: Principal;
	timestamp: _Time;
	canisterId: Principal;
}): {
	id: bigint;
	action: Action;
	owner: Principal;
	timestamp: Time;
	canisterId: Principal;
} {
	return {
		id: value.id,
		action: from_candid_Action_n21(value.action),
		owner: value.owner,
		timestamp: value.timestamp,
		canisterId: value.canisterId
	};
}
function from_candid_record_n24(value: {
	err: [] | [_Error__1];
	status: _WithdrawStatus;
	transfer: _Transfer;
}): {
	err?: Error__1;
	status: WithdrawStatus;
	transfer: Transfer;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_WithdrawStatus_n26(value.status),
		transfer: from_candid_Transfer_n28(value.transfer)
	};
}
function from_candid_record_n29(value: {
	to: _Account;
	fee: bigint;
	token: Principal;
	from: _Account;
	memo: [] | [Uint8Array];
	index: bigint;
	amount: bigint;
	standard: string;
}): {
	to: Account;
	fee: bigint;
	token: Principal;
	from: Account;
	memo?: Uint8Array;
	index: bigint;
	amount: bigint;
	standard: string;
} {
	return {
		to: from_candid_Account_n30(value.to),
		fee: value.fee,
		token: value.token,
		from: from_candid_Account_n30(value.from),
		memo: record_opt_to_undefined(from_candid_opt_n32(value.memo)),
		index: value.index,
		amount: value.amount,
		standard: value.standard
	};
}
function from_candid_record_n31(value: { owner: Principal; subaccount: [] | [Uint8Array] }): {
	owner: Principal;
	subaccount?: Uint8Array;
} {
	return {
		owner: value.owner,
		subaccount: record_opt_to_undefined(from_candid_opt_n32(value.subaccount))
	};
}
function from_candid_record_n34(value: {
	err: [] | [_Error__1];
	status: _RemoveLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token1AmountOut: bigint;
	token0: _Token__1;
	token1: _Token__1;
	token0AmountOut: bigint;
	tickLimit: bigint;
}): {
	err?: Error__1;
	status: RemoveLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token1AmountOut: bigint;
	token0: Token__1;
	token1: Token__1;
	token0AmountOut: bigint;
	tickLimit: bigint;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_RemoveLimitOrderStatus_n35(value.status),
		token1AmountIn: value.token1AmountIn,
		token0AmountIn: value.token0AmountIn,
		positionId: value.positionId,
		token1AmountOut: value.token1AmountOut,
		token0: value.token0,
		token1: value.token1,
		token0AmountOut: value.token0AmountOut,
		tickLimit: value.tickLimit
	};
}
function from_candid_record_n38(value: {
	err: [] | [_Error__1];
	status: _AddLiquidityStatus;
	liquidity: bigint;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: _Token__1;
	token1: _Token__1;
}): {
	err?: Error__1;
	status: AddLiquidityStatus;
	liquidity: bigint;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: Token__1;
	token1: Token__1;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_AddLiquidityStatus_n39(value.status),
		liquidity: value.liquidity,
		positionId: value.positionId,
		amount0: value.amount0,
		amount1: value.amount1,
		token0: value.token0,
		token1: value.token1
	};
}
function from_candid_record_n42(value: {
	err: [] | [_Error__1];
	status: _OneStepSwapStatus;
	withdraw: _WithdrawInfo;
	swap: _SwapInfo;
	deposit: _DepositInfo;
}): {
	err?: Error__1;
	status: OneStepSwapStatus;
	withdraw: WithdrawInfo;
	swap: SwapInfo;
	deposit: DepositInfo;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_OneStepSwapStatus_n43(value.status),
		withdraw: from_candid_WithdrawInfo_n23(value.withdraw),
		swap: from_candid_SwapInfo_n45(value.swap),
		deposit: from_candid_DepositInfo_n48(value.deposit)
	};
}
function from_candid_record_n46(value: {
	err: [] | [_Error__1];
	status: _SwapStatus;
	tokenIn: _Token__1;
	tokenOut: _Token__1;
	amountOutFee: bigint;
	amountIn: _Amount;
	amountOut: bigint;
	amountInFee: bigint;
}): {
	err?: Error__1;
	status: SwapStatus;
	tokenIn: Token__1;
	tokenOut: Token__1;
	amountOutFee: bigint;
	amountIn: Amount;
	amountOut: bigint;
	amountInFee: bigint;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_SwapStatus_n47(value.status),
		tokenIn: value.tokenIn,
		tokenOut: value.tokenOut,
		amountOutFee: value.amountOutFee,
		amountIn: value.amountIn,
		amountOut: value.amountOut,
		amountInFee: value.amountInFee
	};
}
function from_candid_record_n49(value: {
	err: [] | [_Error__1];
	status: _DepositStatus;
	transfer: _Transfer;
}): {
	err?: Error__1;
	status: DepositStatus;
	transfer: Transfer;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_DepositStatus_n50(value.status),
		transfer: from_candid_Transfer_n28(value.transfer)
	};
}
function from_candid_record_n53(value: {
	err: [] | [_Error__1];
	status: _RefundStatus;
	relatedIndex: bigint;
	transfer: _Transfer;
}): {
	err?: Error__1;
	status: RefundStatus;
	relatedIndex: bigint;
	transfer: Transfer;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_RefundStatus_n54(value.status),
		relatedIndex: value.relatedIndex,
		transfer: from_candid_Transfer_n28(value.transfer)
	};
}
function from_candid_record_n56(value: {
	err: [] | [_Error__1];
	status: _ExecuteLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token1AmountOut: bigint;
	token0: _Token__1;
	token1: _Token__1;
	token0AmountOut: bigint;
	tickLimit: bigint;
}): {
	err?: Error__1;
	status: ExecuteLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token1AmountOut: bigint;
	token0: Token__1;
	token1: Token__1;
	token0AmountOut: bigint;
	tickLimit: bigint;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_ExecuteLimitOrderStatus_n57(value.status),
		token1AmountIn: value.token1AmountIn,
		token0AmountIn: value.token0AmountIn,
		positionId: value.positionId,
		token1AmountOut: value.token1AmountOut,
		token0: value.token0,
		token1: value.token1,
		token0AmountOut: value.token0AmountOut,
		tickLimit: value.tickLimit
	};
}
function from_candid_record_n59(value: {
	to: _Account;
	err: [] | [_Error__1];
	status: _TransferPositionStatus;
	from: _Account;
	positionId: bigint;
	token0Amount: bigint;
	token1Amount: bigint;
}): {
	to: Account;
	err?: Error__1;
	status: TransferPositionStatus;
	from: Account;
	positionId: bigint;
	token0Amount: bigint;
	token1Amount: bigint;
} {
	return {
		to: from_candid_Account_n30(value.to),
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_TransferPositionStatus_n60(value.status),
		from: from_candid_Account_n30(value.from),
		positionId: value.positionId,
		token0Amount: value.token0Amount,
		token1Amount: value.token1Amount
	};
}
function from_candid_record_n62(value: {
	err: [] | [_Error__1];
	status: _DecreaseLiquidityStatus;
	liquidity: bigint;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: _Token__1;
	token1: _Token__1;
}): {
	err?: Error__1;
	status: DecreaseLiquidityStatus;
	liquidity: bigint;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: Token__1;
	token1: Token__1;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_DecreaseLiquidityStatus_n63(value.status),
		liquidity: value.liquidity,
		positionId: value.positionId,
		amount0: value.amount0,
		amount1: value.amount1,
		token0: value.token0,
		token1: value.token1
	};
}
function from_candid_record_n65(value: {
	err: [] | [_Error__1];
	status: _ClaimStatus;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: _Token__1;
	token1: _Token__1;
}): {
	err?: Error__1;
	status: ClaimStatus;
	positionId: bigint;
	amount0: bigint;
	amount1: bigint;
	token0: Token__1;
	token1: Token__1;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_ClaimStatus_n66(value.status),
		positionId: value.positionId,
		amount0: value.amount0,
		amount1: value.amount1,
		token0: value.token0,
		token1: value.token1
	};
}
function from_candid_record_n68(value: {
	err: [] | [_Error__1];
	status: _AddLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token0: _Token__1;
	token1: _Token__1;
	tickLimit: bigint;
}): {
	err?: Error__1;
	status: AddLimitOrderStatus;
	token1AmountIn: bigint;
	token0AmountIn: bigint;
	positionId: bigint;
	token0: Token__1;
	token1: Token__1;
	tickLimit: bigint;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n25(value.err)),
		status: from_candid_AddLimitOrderStatus_n69(value.status),
		token1AmountIn: value.token1AmountIn,
		token0AmountIn: value.token0AmountIn,
		positionId: value.positionId,
		token0: value.token0,
		token1: value.token1,
		tickLimit: value.tickLimit
	};
}
function from_candid_record_n74(value: { jobs: Array<_JobInfo>; level: _Level }): {
	jobs: Array<JobInfo>;
	level: Level;
} {
	return {
		jobs: from_candid_vec_n75(value.jobs),
		level: from_candid_Level_n79(value.level)
	};
}
function from_candid_record_n77(value: {
	interval: bigint;
	name: string;
	lastRun: _Time;
	timerId: [] | [bigint];
}): {
	interval: bigint;
	name: string;
	lastRun: Time;
	timerId?: bigint;
} {
	return {
		interval: value.interval,
		name: value.name,
		lastRun: value.lastRun,
		timerId: record_opt_to_undefined(from_candid_opt_n78(value.timerId))
	};
}
function from_candid_record_n97(value: {
	infoCid: string;
	records: Array<_SwapRecordInfo>;
	errors: Array<_PushError>;
	retryCount: bigint;
}): {
	infoCid: string;
	records: Array<SwapRecordInfo>;
	errors: Array<PushError>;
	retryCount: bigint;
} {
	return {
		infoCid: value.infoCid,
		records: from_candid_vec_n98(value.records),
		errors: value.errors,
		retryCount: value.retryCount
	};
}
function from_candid_tuple_n18(value: [bigint, _Transaction]): [bigint, Transaction] {
	return [value[0], from_candid_Transaction_n19(value[1])];
}
function from_candid_tuple_n84(
	value: [_LimitOrderType, _LimitOrderKey, _LimitOrderValue]
): [LimitOrderType, LimitOrderKey, LimitOrderValue] {
	return [from_candid_LimitOrderType_n85(value[0]), value[1], value[2]];
}
function from_candid_variant_n10(
	value:
		| {
				ok: {
					amount0: bigint;
					amount1: bigint;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				amount0: bigint;
				amount1: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n103(
	value:
		| {
				ok: Array<[bigint, bigint]>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<[bigint, bigint]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n105(
	value:
		| {
				ok: _Page_3;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Page_3;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n107(
	value:
		| {
				ok: _Page_2;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Page_2;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n109(
	value:
		| {
				ok: {
					swapFee0Repurchase: bigint;
					token0Amount: bigint;
					swapFeeReceiver: string;
					token1Amount: bigint;
					swapFee1Repurchase: bigint;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				swapFee0Repurchase: bigint;
				token0Amount: bigint;
				swapFeeReceiver: string;
				token1Amount: bigint;
				swapFee1Repurchase: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n111(
	value:
		| {
				ok: string;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: string;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n113(
	value:
		| {
				ok: {
					upperLimitOrdersIds: Array<{
						userPositionId: bigint;
						timestamp: bigint;
					}>;
					lowerLimitOrderIds: Array<{
						userPositionId: bigint;
						timestamp: bigint;
					}>;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				upperLimitOrdersIds: Array<{
					userPositionId: bigint;
					timestamp: bigint;
				}>;
				lowerLimitOrderIds: Array<{
					userPositionId: bigint;
					timestamp: bigint;
				}>;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n115(
	value:
		| {
				ok: _UserPositionInfo;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: UserPositionInfo;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n117(
	value:
		| {
				ok: Array<[string, Array<bigint>]>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<[string, Array<bigint>]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n119(
	value:
		| {
				ok: Array<bigint>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<bigint>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n12(
	value:
		| {
				ok: bigint;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: bigint;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n121(
	value:
		| {
				ok: _Page_1;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Page_1;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n123(
	value:
		| {
				ok: _Page;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Page;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n125(
	value:
		| {
				ok: Array<_UserPositionInfoWithId>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<UserPositionInfoWithId>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n127(
	value:
		| {
				ok: {
					balance0: bigint;
					balance1: bigint;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				balance0: bigint;
				balance1: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n136(
	value:
		| {
				Ok: _Icrc21ConsentInfo;
		  }
		| {
				Err: _Icrc21Error;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Icrc21ConsentInfo;
	  }
	| {
			__kind__: 'Err';
			Err: Icrc21Error;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_Icrc21ConsentInfo_n137(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_Icrc21Error_n144(value.Err)
				}
			: value;
}
function from_candid_variant_n14(
	value:
		| {
				ok: _CycleInfo;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: CycleInfo;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n143(
	value:
		| {
				LineDisplayMessage: {
					pages: Array<{
						lines: Array<string>;
					}>;
				};
		  }
		| {
				GenericDisplayMessage: string;
		  }
):
	| {
			__kind__: 'LineDisplayMessage';
			LineDisplayMessage: {
				pages: Array<{
					lines: Array<string>;
				}>;
			};
	  }
	| {
			__kind__: 'GenericDisplayMessage';
			GenericDisplayMessage: string;
	  } {
	return 'LineDisplayMessage' in value
		? {
				__kind__: 'LineDisplayMessage',
				LineDisplayMessage: value.LineDisplayMessage
			}
		: 'GenericDisplayMessage' in value
			? {
					__kind__: 'GenericDisplayMessage',
					GenericDisplayMessage: value.GenericDisplayMessage
				}
			: value;
}
function from_candid_variant_n145(
	value:
		| {
				GenericError: {
					description: string;
					error_code: bigint;
				};
		  }
		| {
				InsufficientPayment: _Icrc21ErrorInfo;
		  }
		| {
				UnsupportedCanisterCall: _Icrc21ErrorInfo;
		  }
		| {
				ConsentMessageUnavailable: _Icrc21ErrorInfo;
		  }
):
	| {
			__kind__: 'GenericError';
			GenericError: {
				description: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'InsufficientPayment';
			InsufficientPayment: Icrc21ErrorInfo;
	  }
	| {
			__kind__: 'UnsupportedCanisterCall';
			UnsupportedCanisterCall: Icrc21ErrorInfo;
	  }
	| {
			__kind__: 'ConsentMessageUnavailable';
			ConsentMessageUnavailable: Icrc21ErrorInfo;
	  } {
	return 'GenericError' in value
		? {
				__kind__: 'GenericError',
				GenericError: value.GenericError
			}
		: 'InsufficientPayment' in value
			? {
					__kind__: 'InsufficientPayment',
					InsufficientPayment: value.InsufficientPayment
				}
			: 'UnsupportedCanisterCall' in value
				? {
						__kind__: 'UnsupportedCanisterCall',
						UnsupportedCanisterCall: value.UnsupportedCanisterCall
					}
				: 'ConsentMessageUnavailable' in value
					? {
							__kind__: 'ConsentMessageUnavailable',
							ConsentMessageUnavailable: value.ConsentMessageUnavailable
						}
					: value;
}
function from_candid_variant_n147(
	value:
		| {
				ok: _PoolMetadata;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: PoolMetadata;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n149(
	value:
		| {
				ok: {
					tokensOwed0: bigint;
					tokensOwed1: bigint;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				tokensOwed0: bigint;
				tokensOwed1: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n151(
	value:
		| {
				ok: boolean;
		  }
		| {
				err: null;
		  }
):
	| {
			__kind__: 'ok';
			ok: boolean;
	  }
	| {
			__kind__: 'err';
			err: null;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: value.err
				}
			: value;
}
function from_candid_variant_n153(
	value:
		| {
				ok: null;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: null;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n155(
	value:
		| {
				ok: bigint;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: bigint;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n16(
	value:
		| {
				ok: Array<[bigint, _Transaction]>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<[bigint, Transaction]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_vec_n17(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n2(
	value:
		| {
				ok: boolean;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: boolean;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n22(
	value:
		| {
				Withdraw: _WithdrawInfo;
		  }
		| {
				RemoveLimitOrder: _RemoveLimitOrderInfo;
		  }
		| {
				AddLiquidity: _AddLiquidityInfo;
		  }
		| {
				OneStepSwap: _OneStepSwapInfo;
		  }
		| {
				Deposit: _DepositInfo;
		  }
		| {
				Refund: _RefundInfo;
		  }
		| {
				Swap: _SwapInfo;
		  }
		| {
				ExecuteLimitOrder: _ExecuteLimitOrderInfo;
		  }
		| {
				TransferPosition: _TransferPositionInfo;
		  }
		| {
				DecreaseLiquidity: _DecreaseLiquidityInfo;
		  }
		| {
				Claim: _ClaimInfo;
		  }
		| {
				AddLimitOrder: _AddLimitOrderInfo;
		  }
):
	| {
			__kind__: 'Withdraw';
			Withdraw: WithdrawInfo;
	  }
	| {
			__kind__: 'RemoveLimitOrder';
			RemoveLimitOrder: RemoveLimitOrderInfo;
	  }
	| {
			__kind__: 'AddLiquidity';
			AddLiquidity: AddLiquidityInfo;
	  }
	| {
			__kind__: 'OneStepSwap';
			OneStepSwap: OneStepSwapInfo;
	  }
	| {
			__kind__: 'Deposit';
			Deposit: DepositInfo;
	  }
	| {
			__kind__: 'Refund';
			Refund: RefundInfo;
	  }
	| {
			__kind__: 'Swap';
			Swap: SwapInfo;
	  }
	| {
			__kind__: 'ExecuteLimitOrder';
			ExecuteLimitOrder: ExecuteLimitOrderInfo;
	  }
	| {
			__kind__: 'TransferPosition';
			TransferPosition: TransferPositionInfo;
	  }
	| {
			__kind__: 'DecreaseLiquidity';
			DecreaseLiquidity: DecreaseLiquidityInfo;
	  }
	| {
			__kind__: 'Claim';
			Claim: ClaimInfo;
	  }
	| {
			__kind__: 'AddLimitOrder';
			AddLimitOrder: AddLimitOrderInfo;
	  } {
	return 'Withdraw' in value
		? {
				__kind__: 'Withdraw',
				Withdraw: from_candid_WithdrawInfo_n23(value.Withdraw)
			}
		: 'RemoveLimitOrder' in value
			? {
					__kind__: 'RemoveLimitOrder',
					RemoveLimitOrder: from_candid_RemoveLimitOrderInfo_n33(value.RemoveLimitOrder)
				}
			: 'AddLiquidity' in value
				? {
						__kind__: 'AddLiquidity',
						AddLiquidity: from_candid_AddLiquidityInfo_n37(value.AddLiquidity)
					}
				: 'OneStepSwap' in value
					? {
							__kind__: 'OneStepSwap',
							OneStepSwap: from_candid_OneStepSwapInfo_n41(value.OneStepSwap)
						}
					: 'Deposit' in value
						? {
								__kind__: 'Deposit',
								Deposit: from_candid_DepositInfo_n48(value.Deposit)
							}
						: 'Refund' in value
							? {
									__kind__: 'Refund',
									Refund: from_candid_RefundInfo_n52(value.Refund)
								}
							: 'Swap' in value
								? {
										__kind__: 'Swap',
										Swap: from_candid_SwapInfo_n45(value.Swap)
									}
								: 'ExecuteLimitOrder' in value
									? {
											__kind__: 'ExecuteLimitOrder',
											ExecuteLimitOrder: from_candid_ExecuteLimitOrderInfo_n55(
												value.ExecuteLimitOrder
											)
										}
									: 'TransferPosition' in value
										? {
												__kind__: 'TransferPosition',
												TransferPosition: from_candid_TransferPositionInfo_n58(
													value.TransferPosition
												)
											}
										: 'DecreaseLiquidity' in value
											? {
													__kind__: 'DecreaseLiquidity',
													DecreaseLiquidity: from_candid_DecreaseLiquidityInfo_n61(
														value.DecreaseLiquidity
													)
												}
											: 'Claim' in value
												? {
														__kind__: 'Claim',
														Claim: from_candid_ClaimInfo_n64(value.Claim)
													}
												: 'AddLimitOrder' in value
													? {
															__kind__: 'AddLimitOrder',
															AddLimitOrder: from_candid_AddLimitOrderInfo_n67(value.AddLimitOrder)
														}
													: value;
}
function from_candid_variant_n27(
	value:
		| {
				Failed: null;
		  }
		| {
				CreditCompleted: null;
		  }
		| {
				Created: null;
		  }
		| {
				Completed: null;
		  }
): RefundStatus {
	return 'Failed' in value
		? RefundStatus.Failed
		: 'CreditCompleted' in value
			? RefundStatus.CreditCompleted
			: 'Created' in value
				? RefundStatus.Created
				: 'Completed' in value
					? RefundStatus.Completed
					: value;
}
function from_candid_variant_n36(
	value:
		| {
				Failed: null;
		  }
		| {
				LimitOrderDeleted: null;
		  }
		| {
				Created: null;
		  }
		| {
				Completed: null;
		  }
): RemoveLimitOrderStatus {
	return 'Failed' in value
		? RemoveLimitOrderStatus.Failed
		: 'LimitOrderDeleted' in value
			? RemoveLimitOrderStatus.LimitOrderDeleted
			: 'Created' in value
				? RemoveLimitOrderStatus.Created
				: 'Completed' in value
					? RemoveLimitOrderStatus.Completed
					: value;
}
function from_candid_variant_n4(
	value:
		| {
				CommonError: null;
		  }
		| {
				InternalError: string;
		  }
		| {
				UnsupportedToken: string;
		  }
		| {
				InsufficientFunds: null;
		  }
):
	| {
			__kind__: 'CommonError';
			CommonError: null;
	  }
	| {
			__kind__: 'InternalError';
			InternalError: string;
	  }
	| {
			__kind__: 'UnsupportedToken';
			UnsupportedToken: string;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: null;
	  } {
	return 'CommonError' in value
		? {
				__kind__: 'CommonError',
				CommonError: value.CommonError
			}
		: 'InternalError' in value
			? {
					__kind__: 'InternalError',
					InternalError: value.InternalError
				}
			: 'UnsupportedToken' in value
				? {
						__kind__: 'UnsupportedToken',
						UnsupportedToken: value.UnsupportedToken
					}
				: 'InsufficientFunds' in value
					? {
							__kind__: 'InsufficientFunds',
							InsufficientFunds: value.InsufficientFunds
						}
					: value;
}
function from_candid_variant_n40(
	value:
		| {
				Failed: null;
		  }
		| {
				Created: null;
		  }
		| {
				Completed: null;
		  }
): ClaimStatus {
	return 'Failed' in value
		? ClaimStatus.Failed
		: 'Created' in value
			? ClaimStatus.Created
			: 'Completed' in value
				? ClaimStatus.Completed
				: value;
}
function from_candid_variant_n44(
	value:
		| {
				SwapCompleted: null;
		  }
		| {
				Failed: null;
		  }
		| {
				PreSwapCompleted: null;
		  }
		| {
				DepositCreditCompleted: null;
		  }
		| {
				DepositTransferCompleted: null;
		  }
		| {
				Created: null;
		  }
		| {
				WithdrawCreditCompleted: null;
		  }
		| {
				Completed: null;
		  }
): OneStepSwapStatus {
	return 'SwapCompleted' in value
		? OneStepSwapStatus.SwapCompleted
		: 'Failed' in value
			? OneStepSwapStatus.Failed
			: 'PreSwapCompleted' in value
				? OneStepSwapStatus.PreSwapCompleted
				: 'DepositCreditCompleted' in value
					? OneStepSwapStatus.DepositCreditCompleted
					: 'DepositTransferCompleted' in value
						? OneStepSwapStatus.DepositTransferCompleted
						: 'Created' in value
							? OneStepSwapStatus.Created
							: 'WithdrawCreditCompleted' in value
								? OneStepSwapStatus.WithdrawCreditCompleted
								: 'Completed' in value
									? OneStepSwapStatus.Completed
									: value;
}
function from_candid_variant_n51(
	value:
		| {
				Failed: null;
		  }
		| {
				TransferCompleted: null;
		  }
		| {
				Created: null;
		  }
		| {
				Completed: null;
		  }
): DepositStatus {
	return 'Failed' in value
		? DepositStatus.Failed
		: 'TransferCompleted' in value
			? DepositStatus.TransferCompleted
			: 'Created' in value
				? DepositStatus.Created
				: 'Completed' in value
					? DepositStatus.Completed
					: value;
}
function from_candid_variant_n6(
	value:
		| {
				ok: _Page_5;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Page_5;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n71(
	value:
		| {
				ok: {
					feeGrowthGlobal1X128: bigint;
					feeGrowthGlobal0X128: bigint;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				feeGrowthGlobal1X128: bigint;
				feeGrowthGlobal0X128: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n73(
	value:
		| {
				ok: _PoolInitArgs;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: PoolInitArgs;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n8(
	value:
		| {
				ok: {
					tokenIncome: Array<
						[
							bigint,
							{
								tokensOwed0: bigint;
								tokensOwed1: bigint;
							}
						]
					>;
					totalTokensOwed0: bigint;
					totalTokensOwed1: bigint;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				tokenIncome: Array<
					[
						bigint,
						{
							tokensOwed0: bigint;
							tokensOwed1: bigint;
						}
					]
				>;
				totalTokensOwed0: bigint;
				totalTokensOwed1: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n80(
	value:
		| {
				Inactive: null;
		  }
		| {
				Active: null;
		  }
): Level {
	return 'Inactive' in value ? Level.Inactive : 'Active' in value ? Level.Active : value;
}
function from_candid_variant_n82(
	value:
		| {
				ok: Array<[_LimitOrderType, _LimitOrderKey, _LimitOrderValue]>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<[LimitOrderType, LimitOrderKey, LimitOrderValue]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_vec_n83(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n86(
	value:
		| {
				Lower: null;
		  }
		| {
				Upper: null;
		  }
): LimitOrderType {
	return 'Lower' in value ? LimitOrderType.Lower : 'Upper' in value ? LimitOrderType.Upper : value;
}
function from_candid_variant_n88(
	value:
		| {
				ok: {
					lowerLimitOrders: Array<[_LimitOrderKey, _LimitOrderValue]>;
					upperLimitOrders: Array<[_LimitOrderKey, _LimitOrderValue]>;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				lowerLimitOrders: Array<[LimitOrderKey, LimitOrderValue]>;
				upperLimitOrders: Array<[LimitOrderKey, LimitOrderValue]>;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n90(
	value:
		| {
				ok: _PositionInfo;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: PositionInfo;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n92(
	value:
		| {
				ok: _Page_4;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Page_4;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n94(
	value:
		| {
				ok: Array<{
					userPositionId: bigint;
					token0InAmount: bigint;
					timestamp: bigint;
					tickLimit: bigint;
					token1InAmount: bigint;
				}>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<{
				userPositionId: bigint;
				token0InAmount: bigint;
				timestamp: bigint;
				tickLimit: bigint;
				token1InAmount: bigint;
			}>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n96(
	value:
		| {
				ok: {
					infoCid: string;
					records: Array<_SwapRecordInfo>;
					errors: Array<_PushError>;
					retryCount: bigint;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				infoCid: string;
				records: Array<SwapRecordInfo>;
				errors: Array<PushError>;
				retryCount: bigint;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_record_n97(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_vec_n17(value: Array<[bigint, _Transaction]>): Array<[bigint, Transaction]> {
	return value.map((x) => from_candid_tuple_n18(x));
}
function from_candid_vec_n75(value: Array<_JobInfo>): Array<JobInfo> {
	return value.map((x) => from_candid_JobInfo_n76(x));
}
function from_candid_vec_n83(
	value: Array<[_LimitOrderType, _LimitOrderKey, _LimitOrderValue]>
): Array<[LimitOrderType, LimitOrderKey, LimitOrderValue]> {
	return value.map((x) => from_candid_tuple_n84(x));
}
function from_candid_vec_n98(value: Array<_SwapRecordInfo>): Array<SwapRecordInfo> {
	return value.map((x) => from_candid_SwapRecordInfo_n99(x));
}
function to_candid_Icrc21ConsentMessageMetadata_n132(
	value: Icrc21ConsentMessageMetadata
): _Icrc21ConsentMessageMetadata {
	return to_candid_record_n133(value);
}
function to_candid_Icrc21ConsentMessageRequest_n128(
	value: Icrc21ConsentMessageRequest
): _Icrc21ConsentMessageRequest {
	return to_candid_record_n129(value);
}
function to_candid_Icrc21ConsentMessageSpec_n130(
	value: Icrc21ConsentMessageSpec
): _Icrc21ConsentMessageSpec {
	return to_candid_record_n131(value);
}
function to_candid_record_n129(value: {
	arg: Uint8Array;
	method: string;
	user_preferences: Icrc21ConsentMessageSpec;
}): {
	arg: Uint8Array;
	method: string;
	user_preferences: _Icrc21ConsentMessageSpec;
} {
	return {
		arg: value.arg,
		method: value.method,
		user_preferences: to_candid_Icrc21ConsentMessageSpec_n130(value.user_preferences)
	};
}
function to_candid_record_n131(value: {
	metadata: Icrc21ConsentMessageMetadata;
	device_spec?:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  };
}): {
	metadata: _Icrc21ConsentMessageMetadata;
	device_spec:
		| []
		| [
				| {
						GenericDisplay: null;
				  }
				| {
						LineDisplay: {
							characters_per_line: number;
							lines_per_page: number;
						};
				  }
		  ];
} {
	return {
		metadata: to_candid_Icrc21ConsentMessageMetadata_n132(value.metadata),
		device_spec: value.device_spec
			? candid_some(to_candid_variant_n134(value.device_spec))
			: candid_none()
	};
}
function to_candid_record_n133(value: { utc_offset_minutes?: number; language: string }): {
	utc_offset_minutes: [] | [number];
	language: string;
} {
	return {
		utc_offset_minutes: value.utc_offset_minutes
			? candid_some(value.utc_offset_minutes)
			: candid_none(),
		language: value.language
	};
}
function to_candid_variant_n134(
	value:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  }
):
	| {
			GenericDisplay: null;
	  }
	| {
			LineDisplay: {
				characters_per_line: number;
				lines_per_page: number;
			};
	  } {
	return value.__kind__ === 'GenericDisplay'
		? {
				GenericDisplay: value.GenericDisplay
			}
		: value.__kind__ === 'LineDisplay'
			? {
					LineDisplay: value.LineDisplay
				}
			: value;
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(canisterId: string, options: CreateActorOptions = {}): Icp_swap_pool {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Icp_swap_pool(actor);
}
