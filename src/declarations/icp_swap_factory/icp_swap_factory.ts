/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import type { Principal } from '@icp-sdk/core/principal';
import { idlFactory, type _SERVICE } from './declarations/icp_swap_factory.did';
import type {
	CreatePoolArgs as _CreatePoolArgs,
	CreatePoolRecord as _CreatePoolRecord,
	CycleInfo as _CycleInfo,
	Error as _Error,
	FailedPoolInfo as _FailedPoolInfo,
	Icrc21ConsentInfo as _Icrc21ConsentInfo,
	Icrc21ConsentMessage as _Icrc21ConsentMessage,
	Icrc21ConsentMessageMetadata as _Icrc21ConsentMessageMetadata,
	Icrc21ConsentMessageRequest as _Icrc21ConsentMessageRequest,
	Icrc21ConsentMessageResponse as _Icrc21ConsentMessageResponse,
	Icrc21ConsentMessageSpec as _Icrc21ConsentMessageSpec,
	Icrc21Error as _Icrc21Error,
	Icrc21ErrorInfo as _Icrc21ErrorInfo,
	Passcode as _Passcode,
	PoolData as _PoolData,
	PoolUpgradeTask as _PoolUpgradeTask,
	PoolUpgradeTaskStep as _PoolUpgradeTaskStep,
	Result as _Result,
	Result_1 as _Result_1,
	Result_10 as _Result_10,
	Result_11 as _Result_11,
	Result_12 as _Result_12,
	Result_13 as _Result_13,
	Result_2 as _Result_2,
	Result_3 as _Result_3,
	Result_4 as _Result_4,
	Result_5 as _Result_5,
	Result_6 as _Result_6,
	Result_7 as _Result_7,
	Result_8 as _Result_8,
	Result_9 as _Result_9,
	Token as _Token
} from './declarations/icp_swap_factory.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export interface Icrc21ConsentInfo {
	metadata: Icrc21ConsentMessageMetadata;
	consent_message: Icrc21ConsentMessage;
}
export type Result_2 =
	| {
			__kind__: 'ok';
			ok: boolean;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_13 =
	| {
			__kind__: 'ok';
			ok: PoolUpgradeTask | null;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface Icrc28TrustedOriginsResponse {
	trusted_origins: Array<string>;
}
export type Icrc21Error =
	| {
			__kind__: 'GenericError';
			GenericError: {
				description: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'InsufficientPayment';
			InsufficientPayment: Icrc21ErrorInfo;
	  }
	| {
			__kind__: 'UnsupportedCanisterCall';
			UnsupportedCanisterCall: Icrc21ErrorInfo;
	  }
	| {
			__kind__: 'ConsentMessageUnavailable';
			ConsentMessageUnavailable: Icrc21ErrorInfo;
	  };
export interface PoolUpgradeTaskStep {
	isDone: boolean;
	timestamp: bigint;
}
export interface CreatePoolRecord {
	err?: string;
	fee: bigint;
	status: string;
	token0: Token;
	token1: Token;
	timestamp: bigint;
	caller: Principal;
	poolId?: Principal;
}
export type Result_5 =
	| {
			__kind__: 'ok';
			ok: Array<[Principal, Array<Passcode>]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface GetPoolArgs {
	fee: bigint;
	token0: Token;
	token1: Token;
}
export type Result_1 =
	| {
			__kind__: 'ok';
			ok: null;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface CreatePoolArgs {
	fee: bigint;
	sqrtPriceX96: string;
	token0: Token;
	token1: Token;
	subnet?: string;
}
export type Result_4 =
	| {
			__kind__: 'ok';
			ok: Array<PoolData>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_11 =
	| {
			__kind__: 'ok';
			ok: Principal | null;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface FailedPoolInfo {
	task: PoolUpgradeTask;
	timestamp: bigint;
	errorMsg: string;
}
export interface PoolData {
	fee: bigint;
	key: string;
	tickSpacing: bigint;
	token0: Token;
	token1: Token;
	canisterId: Principal;
}
export interface CycleInfo {
	balance: bigint;
	available: bigint;
}
export interface PoolUpgradeTask {
	turnOnAvailable: PoolUpgradeTaskStep;
	backup: {
		isDone: boolean;
		isSent: boolean;
		retryCount: bigint;
		timestamp: bigint;
	};
	stop: PoolUpgradeTaskStep;
	moduleHashBefore?: Uint8Array;
	moduleHashAfter?: Uint8Array;
	turnOffAvailable: PoolUpgradeTaskStep;
	upgrade: PoolUpgradeTaskStep;
	start: PoolUpgradeTaskStep;
	poolData: PoolData;
}
export interface Token {
	address: string;
	standard: string;
}
export type Result_7 =
	| {
			__kind__: 'ok';
			ok: Array<PoolUpgradeTask>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface Passcode {
	fee: bigint;
	token0: Principal;
	token1: Principal;
}
export interface Icrc21ErrorInfo {
	description: string;
}
export interface Icrc21ConsentMessageMetadata {
	utc_offset_minutes?: number;
	language: string;
}
export type Icrc21ConsentMessageResponse =
	| {
			__kind__: 'Ok';
			Ok: Icrc21ConsentInfo;
	  }
	| {
			__kind__: 'Err';
			Err: Icrc21Error;
	  };
export interface Icrc21ConsentMessageSpec {
	metadata: Icrc21ConsentMessageMetadata;
	device_spec?:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  };
}
export type Result_6 =
	| {
			__kind__: 'ok';
			ok: Array<[Principal, Array<PoolUpgradeTask>]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface UpgradePoolArgs {
	poolIds: Array<Principal>;
}
export interface Icrc21ConsentMessageRequest {
	arg: Uint8Array;
	method: string;
	user_preferences: Icrc21ConsentMessageSpec;
}
export type Error_ =
	| {
			__kind__: 'CommonError';
			CommonError: null;
	  }
	| {
			__kind__: 'InternalError';
			InternalError: string;
	  }
	| {
			__kind__: 'UnsupportedToken';
			UnsupportedToken: string;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: null;
	  };
export type Result_12 =
	| {
			__kind__: 'ok';
			ok: CycleInfo;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_9 =
	| {
			__kind__: 'ok';
			ok: Array<Passcode>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result =
	| {
			__kind__: 'ok';
			ok: string;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_3 =
	| {
			__kind__: 'ok';
			ok: Array<FailedPoolInfo>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_10 =
	| {
			__kind__: 'ok';
			ok: {
				infoCid: Principal;
				positionIndexCid: Principal;
				trustedCanisterManagerCid: Principal;
				governanceCid?: Principal;
				passcodeManagerCid: Principal;
				backupCid: Principal;
				feeReceiverCid: Principal;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export type Result_8 =
	| {
			__kind__: 'ok';
			ok: PoolData;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  };
export interface PoolInstaller {
	weight: bigint;
	subnet: string;
	subnetType: string;
	canisterId: Principal;
}
export interface SwapFactoryInterface {
	activateWasm(): Promise<void>;
	addPasscode(arg0: Principal, arg1: Passcode): Promise<Result_1>;
	addPoolInstallers(arg0: Array<PoolInstaller>): Promise<void>;
	addPoolInstallersValidate(arg0: Array<PoolInstaller>): Promise<
		| {
				__kind__: 'Ok';
				Ok: string;
		  }
		| {
				__kind__: 'Err';
				Err: string;
		  }
	>;
	batchAddInstallerControllers(arg0: Array<Principal>): Promise<void>;
	batchAddPoolControllers(arg0: Array<Principal>, arg1: Array<Principal>): Promise<void>;
	batchClearRemovedPool(arg0: Array<Principal>): Promise<void>;
	batchRemovePoolControllers(arg0: Array<Principal>, arg1: Array<Principal>): Promise<void>;
	batchRemovePools(arg0: Array<Principal>): Promise<Result_1>;
	batchSetInstallerAdmins(arg0: Array<Principal>): Promise<void>;
	batchSetPoolAdmins(arg0: Array<Principal>, arg1: Array<Principal>): Promise<void>;
	batchSetPoolAvailable(arg0: Array<Principal>, arg1: boolean): Promise<void>;
	batchSetPoolIcrc28TrustedOrigins(arg0: Array<Principal>, arg1: Array<string>): Promise<Result_1>;
	batchSetPoolLimitOrderAvailable(arg0: Array<Principal>, arg1: boolean): Promise<void>;
	clearChunks(): Promise<void>;
	clearPoolUpgradeTaskHis(): Promise<void>;
	clearUpgradeFailedPoolList(): Promise<void>;
	combineWasmChunks(): Promise<void>;
	createPool(arg0: CreatePoolArgs): Promise<Result_8>;
	deletePasscode(arg0: Principal, arg1: Passcode): Promise<Result_1>;
	getActiveWasm(): Promise<Uint8Array>;
	getAdmins(): Promise<Array<Principal>>;
	getCreatePoolRecords(): Promise<Array<CreatePoolRecord>>;
	getCreatePoolRecordsByCaller(arg0: Principal): Promise<Array<CreatePoolRecord>>;
	getCurrentUpgradeTask(): Promise<Result_13>;
	getCycleInfo(): Promise<Result_12>;
	getGovernanceCid(): Promise<Result_11>;
	getInitArgs(): Promise<Result_10>;
	getInstallerModuleHash(): Promise<Uint8Array | null>;
	getNextPoolVersion(): Promise<string>;
	getPasscodesByPrincipal(arg0: Principal): Promise<Result_9>;
	getPendingUpgradePoolList(): Promise<Result_7>;
	/**
	 * / get pool by token addresses and fee.
	 */
	getPool(arg0: GetPoolArgs): Promise<Result_8>;
	getPoolInstallers(): Promise<Array<PoolInstaller>>;
	getPoolUpgradeTaskHis(arg0: Principal): Promise<Result_7>;
	getPoolUpgradeTaskHisList(): Promise<Result_6>;
	getPools(): Promise<Result_4>;
	getPrincipalPasscodes(): Promise<Result_5>;
	getRemovedPools(): Promise<Result_4>;
	getStagingWasm(): Promise<Uint8Array>;
	getUpgradeFailedPoolList(): Promise<Result_3>;
	getVersion(): Promise<string>;
	getWasmActiveStatus(): Promise<boolean>;
	icrc10_supported_standards(): Promise<
		Array<{
			url: string;
			name: string;
		}>
	>;
	icrc21_canister_call_consent_message(
		arg0: Icrc21ConsentMessageRequest
	): Promise<Icrc21ConsentMessageResponse>;
	icrc28_trusted_origins(): Promise<Icrc28TrustedOriginsResponse>;
	removePoolInstaller(arg0: Principal): Promise<void>;
	removePoolInstallerValidate(arg0: Principal): Promise<
		| {
				__kind__: 'Ok';
				Ok: string;
		  }
		| {
				__kind__: 'Err';
				Err: string;
		  }
	>;
	retryAllFailedUpgrades(): Promise<Result_1>;
	setAdmins(arg0: Array<Principal>): Promise<void>;
	setIcrc28TrustedOrigins(arg0: Array<string>): Promise<Result_2>;
	setInstallerModuleHash(arg0: Uint8Array): Promise<void>;
	setInstallerModuleHashValidate(arg0: Uint8Array): Promise<
		| {
				__kind__: 'Ok';
				Ok: string;
		  }
		| {
				__kind__: 'Err';
				Err: string;
		  }
	>;
	setNextPoolVersion(arg0: string): Promise<void>;
	setUpgradePoolList(arg0: UpgradePoolArgs): Promise<Result_1>;
	setWasmActive(arg0: boolean): Promise<void>;
	upgradePoolTokenStandard(arg0: Principal, arg1: Principal): Promise<Result>;
	uploadWasmChunk(arg0: Uint8Array): Promise<bigint>;
}
export type Icrc21ConsentMessage =
	| {
			__kind__: 'LineDisplayMessage';
			LineDisplayMessage: {
				pages: Array<{
					lines: Array<string>;
				}>;
			};
	  }
	| {
			__kind__: 'GenericDisplayMessage';
			GenericDisplayMessage: string;
	  };
export interface icp_swap_factoryInterface extends SwapFactoryInterface {}
export class Icp_swap_factory implements icp_swap_factoryInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async activateWasm(): Promise<void> {
		const result = await this.actor.activateWasm();
		return result;
	}
	async addPasscode(arg0: Principal, arg1: Passcode): Promise<Result_1> {
		const result = await this.actor.addPasscode(arg0, arg1);
		return from_candid_Result_1_n1(result);
	}
	async addPoolInstallers(arg0: Array<PoolInstaller>): Promise<void> {
		const result = await this.actor.addPoolInstallers(arg0);
		return result;
	}
	async addPoolInstallersValidate(arg0: Array<PoolInstaller>): Promise<
		| {
				__kind__: 'Ok';
				Ok: string;
		  }
		| {
				__kind__: 'Err';
				Err: string;
		  }
	> {
		const result = await this.actor.addPoolInstallersValidate(arg0);
		return from_candid_variant_n5(result);
	}
	async batchAddInstallerControllers(arg0: Array<Principal>): Promise<void> {
		const result = await this.actor.batchAddInstallerControllers(arg0);
		return result;
	}
	async batchAddPoolControllers(arg0: Array<Principal>, arg1: Array<Principal>): Promise<void> {
		const result = await this.actor.batchAddPoolControllers(arg0, arg1);
		return result;
	}
	async batchClearRemovedPool(arg0: Array<Principal>): Promise<void> {
		const result = await this.actor.batchClearRemovedPool(arg0);
		return result;
	}
	async batchRemovePoolControllers(arg0: Array<Principal>, arg1: Array<Principal>): Promise<void> {
		const result = await this.actor.batchRemovePoolControllers(arg0, arg1);
		return result;
	}
	async batchRemovePools(arg0: Array<Principal>): Promise<Result_1> {
		const result = await this.actor.batchRemovePools(arg0);
		return from_candid_Result_1_n1(result);
	}
	async batchSetInstallerAdmins(arg0: Array<Principal>): Promise<void> {
		const result = await this.actor.batchSetInstallerAdmins(arg0);
		return result;
	}
	async batchSetPoolAdmins(arg0: Array<Principal>, arg1: Array<Principal>): Promise<void> {
		const result = await this.actor.batchSetPoolAdmins(arg0, arg1);
		return result;
	}
	async batchSetPoolAvailable(arg0: Array<Principal>, arg1: boolean): Promise<void> {
		const result = await this.actor.batchSetPoolAvailable(arg0, arg1);
		return result;
	}
	async batchSetPoolIcrc28TrustedOrigins(
		arg0: Array<Principal>,
		arg1: Array<string>
	): Promise<Result_1> {
		const result = await this.actor.batchSetPoolIcrc28TrustedOrigins(arg0, arg1);
		return from_candid_Result_1_n1(result);
	}
	async batchSetPoolLimitOrderAvailable(arg0: Array<Principal>, arg1: boolean): Promise<void> {
		const result = await this.actor.batchSetPoolLimitOrderAvailable(arg0, arg1);
		return result;
	}
	async clearChunks(): Promise<void> {
		const result = await this.actor.clearChunks();
		return result;
	}
	async clearPoolUpgradeTaskHis(): Promise<void> {
		const result = await this.actor.clearPoolUpgradeTaskHis();
		return result;
	}
	async clearUpgradeFailedPoolList(): Promise<void> {
		const result = await this.actor.clearUpgradeFailedPoolList();
		return result;
	}
	async combineWasmChunks(): Promise<void> {
		const result = await this.actor.combineWasmChunks();
		return result;
	}
	async createPool(arg0: CreatePoolArgs): Promise<Result_8> {
		const result = await this.actor.createPool(to_candid_CreatePoolArgs_n6(arg0));
		return from_candid_Result_8_n8(result);
	}
	async deletePasscode(arg0: Principal, arg1: Passcode): Promise<Result_1> {
		const result = await this.actor.deletePasscode(arg0, arg1);
		return from_candid_Result_1_n1(result);
	}
	async getActiveWasm(): Promise<Uint8Array> {
		const result = await this.actor.getActiveWasm();
		return result;
	}
	async getAdmins(): Promise<Array<Principal>> {
		const result = await this.actor.getAdmins();
		return result;
	}
	async getCreatePoolRecords(): Promise<Array<CreatePoolRecord>> {
		const result = await this.actor.getCreatePoolRecords();
		return from_candid_vec_n10(result);
	}
	async getCreatePoolRecordsByCaller(arg0: Principal): Promise<Array<CreatePoolRecord>> {
		const result = await this.actor.getCreatePoolRecordsByCaller(arg0);
		return from_candid_vec_n10(result);
	}
	async getCurrentUpgradeTask(): Promise<Result_13> {
		const result = await this.actor.getCurrentUpgradeTask();
		return from_candid_Result_13_n15(result);
	}
	async getCycleInfo(): Promise<Result_12> {
		const result = await this.actor.getCycleInfo();
		return from_candid_Result_12_n21(result);
	}
	async getGovernanceCid(): Promise<Result_11> {
		const result = await this.actor.getGovernanceCid();
		return from_candid_Result_11_n23(result);
	}
	async getInitArgs(): Promise<Result_10> {
		const result = await this.actor.getInitArgs();
		return from_candid_Result_10_n25(result);
	}
	async getInstallerModuleHash(): Promise<Uint8Array | null> {
		const result = await this.actor.getInstallerModuleHash();
		return from_candid_opt_n20(result);
	}
	async getNextPoolVersion(): Promise<string> {
		const result = await this.actor.getNextPoolVersion();
		return result;
	}
	async getPasscodesByPrincipal(arg0: Principal): Promise<Result_9> {
		const result = await this.actor.getPasscodesByPrincipal(arg0);
		return from_candid_Result_9_n28(result);
	}
	async getPendingUpgradePoolList(): Promise<Result_7> {
		const result = await this.actor.getPendingUpgradePoolList();
		return from_candid_Result_7_n30(result);
	}
	async getPool(arg0: GetPoolArgs): Promise<Result_8> {
		const result = await this.actor.getPool(arg0);
		return from_candid_Result_8_n8(result);
	}
	async getPoolInstallers(): Promise<Array<PoolInstaller>> {
		const result = await this.actor.getPoolInstallers();
		return result;
	}
	async getPoolUpgradeTaskHis(arg0: Principal): Promise<Result_7> {
		const result = await this.actor.getPoolUpgradeTaskHis(arg0);
		return from_candid_Result_7_n30(result);
	}
	async getPoolUpgradeTaskHisList(): Promise<Result_6> {
		const result = await this.actor.getPoolUpgradeTaskHisList();
		return from_candid_Result_6_n33(result);
	}
	async getPools(): Promise<Result_4> {
		const result = await this.actor.getPools();
		return from_candid_Result_4_n37(result);
	}
	async getPrincipalPasscodes(): Promise<Result_5> {
		const result = await this.actor.getPrincipalPasscodes();
		return from_candid_Result_5_n39(result);
	}
	async getRemovedPools(): Promise<Result_4> {
		const result = await this.actor.getRemovedPools();
		return from_candid_Result_4_n37(result);
	}
	async getStagingWasm(): Promise<Uint8Array> {
		const result = await this.actor.getStagingWasm();
		return result;
	}
	async getUpgradeFailedPoolList(): Promise<Result_3> {
		const result = await this.actor.getUpgradeFailedPoolList();
		return from_candid_Result_3_n41(result);
	}
	async getVersion(): Promise<string> {
		const result = await this.actor.getVersion();
		return result;
	}
	async getWasmActiveStatus(): Promise<boolean> {
		const result = await this.actor.getWasmActiveStatus();
		return result;
	}
	async icrc10_supported_standards(): Promise<
		Array<{
			url: string;
			name: string;
		}>
	> {
		const result = await this.actor.icrc10_supported_standards();
		return result;
	}
	async icrc21_canister_call_consent_message(
		arg0: Icrc21ConsentMessageRequest
	): Promise<Icrc21ConsentMessageResponse> {
		const result = await this.actor.icrc21_canister_call_consent_message(
			to_candid_Icrc21ConsentMessageRequest_n46(arg0)
		);
		return from_candid_Icrc21ConsentMessageResponse_n53(result);
	}
	async icrc28_trusted_origins(): Promise<Icrc28TrustedOriginsResponse> {
		const result = await this.actor.icrc28_trusted_origins();
		return result;
	}
	async removePoolInstaller(arg0: Principal): Promise<void> {
		const result = await this.actor.removePoolInstaller(arg0);
		return result;
	}
	async removePoolInstallerValidate(arg0: Principal): Promise<
		| {
				__kind__: 'Ok';
				Ok: string;
		  }
		| {
				__kind__: 'Err';
				Err: string;
		  }
	> {
		const result = await this.actor.removePoolInstallerValidate(arg0);
		return from_candid_variant_n5(result);
	}
	async retryAllFailedUpgrades(): Promise<Result_1> {
		const result = await this.actor.retryAllFailedUpgrades();
		return from_candid_Result_1_n1(result);
	}
	async setAdmins(arg0: Array<Principal>): Promise<void> {
		const result = await this.actor.setAdmins(arg0);
		return result;
	}
	async setIcrc28TrustedOrigins(arg0: Array<string>): Promise<Result_2> {
		const result = await this.actor.setIcrc28TrustedOrigins(arg0);
		return from_candid_Result_2_n64(result);
	}
	async setInstallerModuleHash(arg0: Uint8Array): Promise<void> {
		const result = await this.actor.setInstallerModuleHash(arg0);
		return result;
	}
	async setInstallerModuleHashValidate(arg0: Uint8Array): Promise<
		| {
				__kind__: 'Ok';
				Ok: string;
		  }
		| {
				__kind__: 'Err';
				Err: string;
		  }
	> {
		const result = await this.actor.setInstallerModuleHashValidate(arg0);
		return from_candid_variant_n5(result);
	}
	async setNextPoolVersion(arg0: string): Promise<void> {
		const result = await this.actor.setNextPoolVersion(arg0);
		return result;
	}
	async setUpgradePoolList(arg0: UpgradePoolArgs): Promise<Result_1> {
		const result = await this.actor.setUpgradePoolList(arg0);
		return from_candid_Result_1_n1(result);
	}
	async setWasmActive(arg0: boolean): Promise<void> {
		const result = await this.actor.setWasmActive(arg0);
		return result;
	}
	async upgradePoolTokenStandard(arg0: Principal, arg1: Principal): Promise<Result> {
		const result = await this.actor.upgradePoolTokenStandard(arg0, arg1);
		return from_candid_Result_n66(result);
	}
	async uploadWasmChunk(arg0: Uint8Array): Promise<bigint> {
		const result = await this.actor.uploadWasmChunk(arg0);
		return result;
	}
}
function from_candid_CreatePoolRecord_n11(value: _CreatePoolRecord): CreatePoolRecord {
	return from_candid_record_n12(value);
}
function from_candid_Error_n3(value: _Error): Error_ {
	return from_candid_variant_n4(value);
}
function from_candid_FailedPoolInfo_n44(value: _FailedPoolInfo): FailedPoolInfo {
	return from_candid_record_n45(value);
}
function from_candid_Icrc21ConsentInfo_n55(value: _Icrc21ConsentInfo): Icrc21ConsentInfo {
	return from_candid_record_n56(value);
}
function from_candid_Icrc21ConsentMessageMetadata_n57(
	value: _Icrc21ConsentMessageMetadata
): Icrc21ConsentMessageMetadata {
	return from_candid_record_n58(value);
}
function from_candid_Icrc21ConsentMessageResponse_n53(
	value: _Icrc21ConsentMessageResponse
): Icrc21ConsentMessageResponse {
	return from_candid_variant_n54(value);
}
function from_candid_Icrc21ConsentMessage_n60(value: _Icrc21ConsentMessage): Icrc21ConsentMessage {
	return from_candid_variant_n61(value);
}
function from_candid_Icrc21Error_n62(value: _Icrc21Error): Icrc21Error {
	return from_candid_variant_n63(value);
}
function from_candid_PoolUpgradeTask_n18(value: _PoolUpgradeTask): PoolUpgradeTask {
	return from_candid_record_n19(value);
}
function from_candid_Result_10_n25(value: _Result_10): Result_10 {
	return from_candid_variant_n26(value);
}
function from_candid_Result_11_n23(value: _Result_11): Result_11 {
	return from_candid_variant_n24(value);
}
function from_candid_Result_12_n21(value: _Result_12): Result_12 {
	return from_candid_variant_n22(value);
}
function from_candid_Result_13_n15(value: _Result_13): Result_13 {
	return from_candid_variant_n16(value);
}
function from_candid_Result_1_n1(value: _Result_1): Result_1 {
	return from_candid_variant_n2(value);
}
function from_candid_Result_2_n64(value: _Result_2): Result_2 {
	return from_candid_variant_n65(value);
}
function from_candid_Result_3_n41(value: _Result_3): Result_3 {
	return from_candid_variant_n42(value);
}
function from_candid_Result_4_n37(value: _Result_4): Result_4 {
	return from_candid_variant_n38(value);
}
function from_candid_Result_5_n39(value: _Result_5): Result_5 {
	return from_candid_variant_n40(value);
}
function from_candid_Result_6_n33(value: _Result_6): Result_6 {
	return from_candid_variant_n34(value);
}
function from_candid_Result_7_n30(value: _Result_7): Result_7 {
	return from_candid_variant_n31(value);
}
function from_candid_Result_8_n8(value: _Result_8): Result_8 {
	return from_candid_variant_n9(value);
}
function from_candid_Result_9_n28(value: _Result_9): Result_9 {
	return from_candid_variant_n29(value);
}
function from_candid_Result_n66(value: _Result): Result {
	return from_candid_variant_n67(value);
}
function from_candid_opt_n13(value: [] | [string]): string | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n14(value: [] | [Principal]): Principal | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n17(value: [] | [_PoolUpgradeTask]): PoolUpgradeTask | null {
	return value.length === 0 ? null : from_candid_PoolUpgradeTask_n18(value[0]);
}
function from_candid_opt_n20(value: [] | [Uint8Array]): Uint8Array | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n59(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_record_n12(value: {
	err: [] | [string];
	fee: bigint;
	status: string;
	token0: _Token;
	token1: _Token;
	timestamp: bigint;
	caller: Principal;
	poolId: [] | [Principal];
}): {
	err?: string;
	fee: bigint;
	status: string;
	token0: Token;
	token1: Token;
	timestamp: bigint;
	caller: Principal;
	poolId?: Principal;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n13(value.err)),
		fee: value.fee,
		status: value.status,
		token0: value.token0,
		token1: value.token1,
		timestamp: value.timestamp,
		caller: value.caller,
		poolId: record_opt_to_undefined(from_candid_opt_n14(value.poolId))
	};
}
function from_candid_record_n19(value: {
	turnOnAvailable: _PoolUpgradeTaskStep;
	backup: {
		isDone: boolean;
		isSent: boolean;
		retryCount: bigint;
		timestamp: bigint;
	};
	stop: _PoolUpgradeTaskStep;
	moduleHashBefore: [] | [Uint8Array];
	moduleHashAfter: [] | [Uint8Array];
	turnOffAvailable: _PoolUpgradeTaskStep;
	upgrade: _PoolUpgradeTaskStep;
	start: _PoolUpgradeTaskStep;
	poolData: _PoolData;
}): {
	turnOnAvailable: PoolUpgradeTaskStep;
	backup: {
		isDone: boolean;
		isSent: boolean;
		retryCount: bigint;
		timestamp: bigint;
	};
	stop: PoolUpgradeTaskStep;
	moduleHashBefore?: Uint8Array;
	moduleHashAfter?: Uint8Array;
	turnOffAvailable: PoolUpgradeTaskStep;
	upgrade: PoolUpgradeTaskStep;
	start: PoolUpgradeTaskStep;
	poolData: PoolData;
} {
	return {
		turnOnAvailable: value.turnOnAvailable,
		backup: value.backup,
		stop: value.stop,
		moduleHashBefore: record_opt_to_undefined(from_candid_opt_n20(value.moduleHashBefore)),
		moduleHashAfter: record_opt_to_undefined(from_candid_opt_n20(value.moduleHashAfter)),
		turnOffAvailable: value.turnOffAvailable,
		upgrade: value.upgrade,
		start: value.start,
		poolData: value.poolData
	};
}
function from_candid_record_n27(value: {
	infoCid: Principal;
	positionIndexCid: Principal;
	trustedCanisterManagerCid: Principal;
	governanceCid: [] | [Principal];
	passcodeManagerCid: Principal;
	backupCid: Principal;
	feeReceiverCid: Principal;
}): {
	infoCid: Principal;
	positionIndexCid: Principal;
	trustedCanisterManagerCid: Principal;
	governanceCid?: Principal;
	passcodeManagerCid: Principal;
	backupCid: Principal;
	feeReceiverCid: Principal;
} {
	return {
		infoCid: value.infoCid,
		positionIndexCid: value.positionIndexCid,
		trustedCanisterManagerCid: value.trustedCanisterManagerCid,
		governanceCid: record_opt_to_undefined(from_candid_opt_n14(value.governanceCid)),
		passcodeManagerCid: value.passcodeManagerCid,
		backupCid: value.backupCid,
		feeReceiverCid: value.feeReceiverCid
	};
}
function from_candid_record_n45(value: {
	task: _PoolUpgradeTask;
	timestamp: bigint;
	errorMsg: string;
}): {
	task: PoolUpgradeTask;
	timestamp: bigint;
	errorMsg: string;
} {
	return {
		task: from_candid_PoolUpgradeTask_n18(value.task),
		timestamp: value.timestamp,
		errorMsg: value.errorMsg
	};
}
function from_candid_record_n56(value: {
	metadata: _Icrc21ConsentMessageMetadata;
	consent_message: _Icrc21ConsentMessage;
}): {
	metadata: Icrc21ConsentMessageMetadata;
	consent_message: Icrc21ConsentMessage;
} {
	return {
		metadata: from_candid_Icrc21ConsentMessageMetadata_n57(value.metadata),
		consent_message: from_candid_Icrc21ConsentMessage_n60(value.consent_message)
	};
}
function from_candid_record_n58(value: { utc_offset_minutes: [] | [number]; language: string }): {
	utc_offset_minutes?: number;
	language: string;
} {
	return {
		utc_offset_minutes: record_opt_to_undefined(from_candid_opt_n59(value.utc_offset_minutes)),
		language: value.language
	};
}
function from_candid_tuple_n36(
	value: [Principal, Array<_PoolUpgradeTask>]
): [Principal, Array<PoolUpgradeTask>] {
	return [value[0], from_candid_vec_n32(value[1])];
}
function from_candid_variant_n16(
	value:
		| {
				ok: [] | [_PoolUpgradeTask];
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: PoolUpgradeTask | null;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_opt_n17(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n2(
	value:
		| {
				ok: null;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: null;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n22(
	value:
		| {
				ok: _CycleInfo;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: CycleInfo;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n24(
	value:
		| {
				ok: [] | [Principal];
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Principal | null;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_opt_n14(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n26(
	value:
		| {
				ok: {
					infoCid: Principal;
					positionIndexCid: Principal;
					trustedCanisterManagerCid: Principal;
					governanceCid: [] | [Principal];
					passcodeManagerCid: Principal;
					backupCid: Principal;
					feeReceiverCid: Principal;
				};
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: {
				infoCid: Principal;
				positionIndexCid: Principal;
				trustedCanisterManagerCid: Principal;
				governanceCid?: Principal;
				passcodeManagerCid: Principal;
				backupCid: Principal;
				feeReceiverCid: Principal;
			};
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_record_n27(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n29(
	value:
		| {
				ok: Array<_Passcode>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<Passcode>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n31(
	value:
		| {
				ok: Array<_PoolUpgradeTask>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<PoolUpgradeTask>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_vec_n32(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n34(
	value:
		| {
				ok: Array<[Principal, Array<_PoolUpgradeTask>]>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<[Principal, Array<PoolUpgradeTask>]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_vec_n35(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n38(
	value:
		| {
				ok: Array<_PoolData>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<PoolData>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n4(
	value:
		| {
				CommonError: null;
		  }
		| {
				InternalError: string;
		  }
		| {
				UnsupportedToken: string;
		  }
		| {
				InsufficientFunds: null;
		  }
):
	| {
			__kind__: 'CommonError';
			CommonError: null;
	  }
	| {
			__kind__: 'InternalError';
			InternalError: string;
	  }
	| {
			__kind__: 'UnsupportedToken';
			UnsupportedToken: string;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: null;
	  } {
	return 'CommonError' in value
		? {
				__kind__: 'CommonError',
				CommonError: value.CommonError
			}
		: 'InternalError' in value
			? {
					__kind__: 'InternalError',
					InternalError: value.InternalError
				}
			: 'UnsupportedToken' in value
				? {
						__kind__: 'UnsupportedToken',
						UnsupportedToken: value.UnsupportedToken
					}
				: 'InsufficientFunds' in value
					? {
							__kind__: 'InsufficientFunds',
							InsufficientFunds: value.InsufficientFunds
						}
					: value;
}
function from_candid_variant_n40(
	value:
		| {
				ok: Array<[Principal, Array<_Passcode>]>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<[Principal, Array<Passcode>]>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n42(
	value:
		| {
				ok: Array<_FailedPoolInfo>;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: Array<FailedPoolInfo>;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: from_candid_vec_n43(value.ok)
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n5(
	value:
		| {
				Ok: string;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: string;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n54(
	value:
		| {
				Ok: _Icrc21ConsentInfo;
		  }
		| {
				Err: _Icrc21Error;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Icrc21ConsentInfo;
	  }
	| {
			__kind__: 'Err';
			Err: Icrc21Error;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_Icrc21ConsentInfo_n55(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_Icrc21Error_n62(value.Err)
				}
			: value;
}
function from_candid_variant_n61(
	value:
		| {
				LineDisplayMessage: {
					pages: Array<{
						lines: Array<string>;
					}>;
				};
		  }
		| {
				GenericDisplayMessage: string;
		  }
):
	| {
			__kind__: 'LineDisplayMessage';
			LineDisplayMessage: {
				pages: Array<{
					lines: Array<string>;
				}>;
			};
	  }
	| {
			__kind__: 'GenericDisplayMessage';
			GenericDisplayMessage: string;
	  } {
	return 'LineDisplayMessage' in value
		? {
				__kind__: 'LineDisplayMessage',
				LineDisplayMessage: value.LineDisplayMessage
			}
		: 'GenericDisplayMessage' in value
			? {
					__kind__: 'GenericDisplayMessage',
					GenericDisplayMessage: value.GenericDisplayMessage
				}
			: value;
}
function from_candid_variant_n63(
	value:
		| {
				GenericError: {
					description: string;
					error_code: bigint;
				};
		  }
		| {
				InsufficientPayment: _Icrc21ErrorInfo;
		  }
		| {
				UnsupportedCanisterCall: _Icrc21ErrorInfo;
		  }
		| {
				ConsentMessageUnavailable: _Icrc21ErrorInfo;
		  }
):
	| {
			__kind__: 'GenericError';
			GenericError: {
				description: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'InsufficientPayment';
			InsufficientPayment: Icrc21ErrorInfo;
	  }
	| {
			__kind__: 'UnsupportedCanisterCall';
			UnsupportedCanisterCall: Icrc21ErrorInfo;
	  }
	| {
			__kind__: 'ConsentMessageUnavailable';
			ConsentMessageUnavailable: Icrc21ErrorInfo;
	  } {
	return 'GenericError' in value
		? {
				__kind__: 'GenericError',
				GenericError: value.GenericError
			}
		: 'InsufficientPayment' in value
			? {
					__kind__: 'InsufficientPayment',
					InsufficientPayment: value.InsufficientPayment
				}
			: 'UnsupportedCanisterCall' in value
				? {
						__kind__: 'UnsupportedCanisterCall',
						UnsupportedCanisterCall: value.UnsupportedCanisterCall
					}
				: 'ConsentMessageUnavailable' in value
					? {
							__kind__: 'ConsentMessageUnavailable',
							ConsentMessageUnavailable: value.ConsentMessageUnavailable
						}
					: value;
}
function from_candid_variant_n65(
	value:
		| {
				ok: boolean;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: boolean;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n67(
	value:
		| {
				ok: string;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: string;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_variant_n9(
	value:
		| {
				ok: _PoolData;
		  }
		| {
				err: _Error;
		  }
):
	| {
			__kind__: 'ok';
			ok: PoolData;
	  }
	| {
			__kind__: 'err';
			err: Error_;
	  } {
	return 'ok' in value
		? {
				__kind__: 'ok',
				ok: value.ok
			}
		: 'err' in value
			? {
					__kind__: 'err',
					err: from_candid_Error_n3(value.err)
				}
			: value;
}
function from_candid_vec_n10(value: Array<_CreatePoolRecord>): Array<CreatePoolRecord> {
	return value.map((x) => from_candid_CreatePoolRecord_n11(x));
}
function from_candid_vec_n32(value: Array<_PoolUpgradeTask>): Array<PoolUpgradeTask> {
	return value.map((x) => from_candid_PoolUpgradeTask_n18(x));
}
function from_candid_vec_n35(
	value: Array<[Principal, Array<_PoolUpgradeTask>]>
): Array<[Principal, Array<PoolUpgradeTask>]> {
	return value.map((x) => from_candid_tuple_n36(x));
}
function from_candid_vec_n43(value: Array<_FailedPoolInfo>): Array<FailedPoolInfo> {
	return value.map((x) => from_candid_FailedPoolInfo_n44(x));
}
function to_candid_CreatePoolArgs_n6(value: CreatePoolArgs): _CreatePoolArgs {
	return to_candid_record_n7(value);
}
function to_candid_Icrc21ConsentMessageMetadata_n50(
	value: Icrc21ConsentMessageMetadata
): _Icrc21ConsentMessageMetadata {
	return to_candid_record_n51(value);
}
function to_candid_Icrc21ConsentMessageRequest_n46(
	value: Icrc21ConsentMessageRequest
): _Icrc21ConsentMessageRequest {
	return to_candid_record_n47(value);
}
function to_candid_Icrc21ConsentMessageSpec_n48(
	value: Icrc21ConsentMessageSpec
): _Icrc21ConsentMessageSpec {
	return to_candid_record_n49(value);
}
function to_candid_record_n47(value: {
	arg: Uint8Array;
	method: string;
	user_preferences: Icrc21ConsentMessageSpec;
}): {
	arg: Uint8Array;
	method: string;
	user_preferences: _Icrc21ConsentMessageSpec;
} {
	return {
		arg: value.arg,
		method: value.method,
		user_preferences: to_candid_Icrc21ConsentMessageSpec_n48(value.user_preferences)
	};
}
function to_candid_record_n49(value: {
	metadata: Icrc21ConsentMessageMetadata;
	device_spec?:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  };
}): {
	metadata: _Icrc21ConsentMessageMetadata;
	device_spec:
		| []
		| [
				| {
						GenericDisplay: null;
				  }
				| {
						LineDisplay: {
							characters_per_line: number;
							lines_per_page: number;
						};
				  }
		  ];
} {
	return {
		metadata: to_candid_Icrc21ConsentMessageMetadata_n50(value.metadata),
		device_spec: value.device_spec
			? candid_some(to_candid_variant_n52(value.device_spec))
			: candid_none()
	};
}
function to_candid_record_n51(value: { utc_offset_minutes?: number; language: string }): {
	utc_offset_minutes: [] | [number];
	language: string;
} {
	return {
		utc_offset_minutes: value.utc_offset_minutes
			? candid_some(value.utc_offset_minutes)
			: candid_none(),
		language: value.language
	};
}
function to_candid_record_n7(value: {
	fee: bigint;
	sqrtPriceX96: string;
	token0: Token;
	token1: Token;
	subnet?: string;
}): {
	fee: bigint;
	sqrtPriceX96: string;
	token0: _Token;
	token1: _Token;
	subnet: [] | [string];
} {
	return {
		fee: value.fee,
		sqrtPriceX96: value.sqrtPriceX96,
		token0: value.token0,
		token1: value.token1,
		subnet: value.subnet ? candid_some(value.subnet) : candid_none()
	};
}
function to_candid_variant_n52(
	value:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  }
):
	| {
			GenericDisplay: null;
	  }
	| {
			LineDisplay: {
				characters_per_line: number;
				lines_per_page: number;
			};
	  } {
	return value.__kind__ === 'GenericDisplay'
		? {
				GenericDisplay: value.GenericDisplay
			}
		: value.__kind__ === 'LineDisplay'
			? {
					LineDisplay: value.LineDisplay
				}
			: value;
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(
	canisterId: string,
	options: CreateActorOptions = {}
): Icp_swap_factory {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Icp_swap_factory(actor);
}
