/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { ActorMethod } from '@icp-sdk/core/agent';
import type { IDL } from '@icp-sdk/core/candid';
import type { Principal } from '@icp-sdk/core/principal';

/**
 * Represents Solana account data.
 */
export type AccountData =
	| {
			/**
			 * The data is formatted as a JSON `ParsedAccount`.
			 */
			json: ParsedAccount;
	  }
	| {
			/**
			 * The data is formatted as a binary string. This is a legacy format retained for RPC backwards compatibility
			 */
			legacyBinary: string;
	  }
	| {
			/**
			 * The data is formatted as a string containing the account data encoded according to one of
			 * the `AccountEncoding` formats.
			 */
			binary: [string, AccountEncoding];
	  };
/**
 * Represents an encoding format for Solana account data.
 */
export type AccountEncoding =
	| { 'base64+zstd': null }
	| {
			/**
			 * The account data is formatted as a JSON string.
			 */
			jsonParsed: null;
	  }
	| {
			/**
			 * The account data is formatted as a base-58 string.
			 */
			base58: null;
	  }
	| {
			/**
			 * The account data is formatted as a base-64 string.
			 */
			base64: null;
	  }
	| {
			/**
			 * The account data is formatted as a binary string. Legacy. Retained for RPC backwards compatibility.
			 */
			binary: null;
	  };
/**
 * Solana account info.
 */
export interface AccountInfo {
	/**
	 * Boolean indicating if the account contains a program (and is strictly read-only).
	 */
	executable: boolean;
	/**
	 * Pubkey of the program this account has been assigned to.
	 */
	owner: Pubkey;
	/**
	 * Number of lamports assigned to this account.
	 */
	lamports: bigint;
	/**
	 * Data associated with the account.
	 */
	data: AccountData;
	/**
	 * The data size of the account.
	 */
	space: bigint;
	/**
	 * The epoch at which this account will next owe rent.
	 */
	rentEpoch: bigint;
}
/**
 * Commitment levels in Solana, representing finality guarantees of transactions and state queries.
 */
export type CommitmentLevel = { finalized: null } | { confirmed: null } | { processed: null };
/**
 * A compiled Solana instruction.
 */
export interface CompiledInstruction {
	data: string;
	accounts: Uint8Array;
	programIdIndex: number;
	stackHeight: [] | [number];
}
/**
 * The result of a Solana `getBlock` RPC method call.
 */
export interface ConfirmedBlock {
	/**
	 * The epoch rewards are distributed over `1 + numRewardPartition` blocks. See the
	 * [Partitioned Inflationary Rewards Distribution](https://docs.anza.xyz/proposals/partitioned-inflationary-rewards-distribution/)
	 * feature for more details.
	 */
	numRewardPartition: [] | [bigint];
	/**
	 * Estimated production time.
	 */
	blockTime: [] | [Timestamp];
	/**
	 * The blockhash of this block, as base-58 encoded string.
	 */
	blockhash: Hash;
	/**
	 * The number of blocks beneath this block.
	 */
	blockHeight: [] | [bigint];
	/**
	 * The signatures of the transactions in this block. Included if the request parameter `transactionDetails` is not
	 * `none`.
	 */
	signatures: [] | [Array<Signature>];
	/**
	 * Array of rewards distributed in this block.
	 */
	rewards: [] | [Array<Reward>];
	/**
	 * Transaction details for the transactions included in this block. Included in the response
	 * when `transactionDetails` is set to `accounts`.
	 */
	transactions: [] | [Array<EncodedTransactionWithStatusMeta>];
	/**
	 * The blockhash of this block's parent, as base-58 encoded string; if the parent block is not
	 * available due to ledger cleanup, this field will return "11111111111111111111111111111111".
	 */
	previousBlockhash: Hash;
	/**
	 * The slot index of this block's parent.
	 */
	parentSlot: Slot;
}
/**
 * Solana transaction signature information as returned by the `getSignaturesForAddress` RPC method.
 */
export interface ConfirmedTransactionStatusWithSignature {
	/**
	 * Error if transaction failed, null if transaction succeeded.
	 */
	err: [] | [TransactionError];
	/**
	 * Transaction signature.
	 */
	signature: Signature;
	/**
	 * The transaction's cluster confirmation status; Either `processed`, `confirmed`, or `finalized`.
	 * See [Commitment](https://solana.com/docs/rpc#configuring-state-commitment) for more on
	 * optimistic confirmation.
	 */
	confirmationStatus: [] | [TransactionConfirmationStatus];
	/**
	 * Memo associated with the transaction, null if no memo is present.
	 */
	memo: [] | [string];
	/**
	 * The slot that contains the block with the transaction.
	 */
	slot: Slot;
	/**
	 * Estimated production time of when transaction was processed, null if not available.
	 */
	blockTime: [] | [Timestamp];
}
/**
 * Defines a consensus strategy for combining responses from different providers.
 */
export type ConsensusStrategy =
	| { Equality: null }
	| { Threshold: { min: number; total: [] | [number] } };
/**
 * Represents a slice of the return value of the `getAccountInfo` Solana RPC method.
 * NOTE: Data slicing is only available for base58, base64, or base64+zstd encodings.
 */
export interface DataSlice {
	offset: number;
	length: number;
}
/**
 * Represents an encoded confirmed Solana transaction with status metadata object.
 */
export interface EncodedConfirmedTransactionWithStatusMeta {
	/**
	 * Transaction information including the metadata, version and encoded transaction.
	 */
	transaction: EncodedTransactionWithStatusMeta;
	/**
	 * The slot this transaction was processed in
	 */
	slot: Slot;
	/**
	 * Estimated production time, as Unix timestamp (seconds since the Unix epoch) of when the transaction was processed.
	 * `null` if not available.
	 */
	blockTime: [] | [Timestamp];
}
/**
 * Encoding of a Solana transaction.
 */
export type EncodedTransaction =
	| { legacyBinary: string }
	| { binary: [string, { base58: null } | { base64: null }] };
/**
 * Represents an encoded Solana transaction with status metadata object.
 */
export interface EncodedTransactionWithStatusMeta {
	/**
	 * [Transaction status metadata object](https://solana.com/docs/rpc/json-structures#transaction-status-metadata) or null.
	 */
	meta: [] | [TransactionStatusMeta];
	/**
	 * Transaction object, either in JSON format or encoded binary data.
	 */
	transaction: EncodedTransaction;
	/**
	 * Transaction version. `null` if `maxSupportedTransactionVersion` is not set in request params.
	 */
	version: [] | [{ legacy: null } | { number: number }];
}
/**
 * Represents the encoding of the return value of the `getAccountInfo` Solana RPC method.
 */
export type GetAccountInfoEncoding =
	| { 'base64+zstd': null }
	| {
			/**
			 * Return the data as a JSON string.
			 * * jsonParsed encoding attempts to use program-specific state parsers to return more human-readable and explicit
			 * account state data.
			 * * If jsonParsed is requested but a parser cannot be found, the field falls back to base64 encoding, detectable
			 * when the data field is type string.
			 */
			jsonParsed: null;
	  }
	| {
			/**
			 * Return the account data encoded in base-58. This is slow and limited to less than 129 bytes of account data.
			 */
			base58: null;
	  }
	| {
			/**
			 * Return the account data encoded in base-64. This works for account data of any size.
			 */
			base64: null;
	  };
/**
 * The parameters for a call to the `getAccountInfo` Solana RPC method.
 */
export interface GetAccountInfoParams {
	encoding: [] | [GetAccountInfoEncoding];
	pubkey: Pubkey;
	dataSlice: [] | [DataSlice];
	minContextSlot: [] | [Slot];
	commitment: [] | [CommitmentLevel];
}
/**
 * Represents the result of a call to the `getAccountInfo` Solana RPC method.
 * If the requested account doesn't exist, the `Ok` variant will be null.
 */
export type GetAccountInfoResult = { Ok: [] | [AccountInfo] } | { Err: RpcError };
/**
 * The parameters for a Solana `getBalance` RPC method call.
 */
export interface GetBalanceParams {
	/**
	 * Pubkey of account to query, as base-58 encoded string.
	 */
	pubkey: Pubkey;
	/**
	 * The minimum slot that the request can be evaluated at.
	 */
	minContextSlot: [] | [Slot];
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment: [] | [CommitmentLevel];
}
/**
 * Represents the result of a call to the `getBalance` Solana RPC method.
 */
export type GetBalanceResult = { Ok: Lamport } | { Err: RpcError };
/**
 * The parameters for a Solana `getBlock` RPC method call.
 */
export interface GetBlockParams {
	/**
	 * The max transaction version to return in responses.
	 * * If the requested block contains a transaction with a higher version,
	 * an error will be returned.
	 * * If this parameter is omitted, only legacy transactions will be returned, and a block
	 * containing any versioned transaction will prompt the error.
	 */
	maxSupportedTransactionVersion: [] | [number];
	/**
	 * Specifies what transaction details to include in the response.
	 *
	 * *Warning:* If this value is not specified, the default value of `none` will be used, which
	 * is different from the default value in the Solana RPC API. This is because the default value
	 * of `full` for the Solana RPC API results in response sizes that are generally too large to
	 * be supported by the ICP.
	 */
	transactionDetails: [] | [TransactionDetails];
	/**
	 * Slot number of the block to fetch.
	 */
	slot: Slot;
	/**
	 * Whether to populate the rewards array. If not provided, the default includes rewards.
	 */
	rewards: [] | [boolean];
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment: [] | [{ finalized: null } | { confirmed: null }];
}
/**
 * Represents the result of a call to the `getBlock` Solana RPC method.
 * If there is no confirmed block for the requested block, the `Ok` variant will be null.
 */
export type GetBlockResult = { Ok: [] | [ConfirmedBlock] } | { Err: RpcError };
/**
 * The parameters for a call to the `getRecentPrioritizationFees` Solana RPC method.
 * An array of Account addresses (up to a maximum of 128 addresses), as base-58 encoded strings.
 */
export type GetRecentPrioritizationFeesParams = Array<Pubkey>;
/**
 * Represents the result of a call to the `getSlot` Solana RPC method.
 */
export type GetRecentPrioritizationFeesResult =
	| {
			Ok: Array<PrioritizationFee>;
	  }
	| { Err: RpcError };
/**
 * Configures how to perform `getRecentPrioritizationFees` RPC HTTP calls.
 *
 * The response to `getRecentPrioritizationFees` corresponds to a (non-necessarily continuous) range of slots associated
 * with the priority fee for that slot and may include `processed` slots (a new `processed` slot is produced every ca. 400ms).
 * Similarly to the necessary rounding used for `getSlot`,
 * achieving consensus for `getRecentPrioritizationFees` requires to select a subset of those slots
 * that can be seen my a super-majority of the nodes, which is done as follows:
 * 1) `maxSlotRoundingError`: round down the slot with the maximum value.
 * The selected subset will only contain priority fees for slots that are smaller or equal to the rounded down slot.
 * 2) `maxLength`: limit the size of the selected subset by removing priority fees for the older slots (lower values).
 */
export interface GetRecentPrioritizationFeesRpcConfig {
	responseConsensus: [] | [ConsensusStrategy];
	/**
	 * Round down the slot with the maximum value.
	 * Increasing that value will reduce the freshness of the returned prioritization fees
	 * but increase the likelihood of nodes reaching consensus.
	 */
	maxSlotRoundingError: [] | [RoundingError];
	responseSizeEstimate: [] | [bigint];
	/**
	 * Limit the number of returned priority fees.
	 * Valid numbers are 1-150, default is 100.
	 * Increasing that value can help in estimating the current priority fee
	 * but will reduce the likelihood of nodes reaching consensus.
	 */
	maxLength: [] | [number];
}
/**
 * The parameters for a call to the `getSignatureStatuses` Solana RPC method.
 */
export interface GetSignatureStatusesParams {
	/**
	 * If set to true, a Solana node will search its ledger cache for any signatures not found in the recent status cache.
	 */
	searchTransactionHistory: [] | [boolean];
	/**
	 * An array of transaction signatures to confirm, as base-58 encoded strings (up to a maximum of 256)
	 */
	signatures: Array<Signature>;
}
/**
 * Represents the result of a call to the `getSignatureStatuses` Solana RPC method.
 */
export type GetSignatureStatusesResult =
	| {
			Ok: Array<[] | [TransactionStatus]>;
	  }
	| { Err: RpcError };
/**
 * The parameters for a call to the `getSignaturesForAddress` Solana RPC method.
 */
export interface GetSignaturesForAddressParams {
	/**
	 * The account address.
	 */
	pubkey: Pubkey;
	/**
	 * Maximum transaction signatures to return (between 1 and 1,000).
	 */
	limit: [] | [number];
	/**
	 * Start searching backwards from this transaction signature. Any transaction can be used for this field; it
	 * does not necessarily have to use the `pubkey` account. If not provided, the search starts from the top of
	 * the highest max confirmed block.
	 *
	 * This field is required to obtain an idempotent response, and hence crucial for the replicas to reach
	 * consensus. If not included, different replicas will likely have different responses due to the fast-changing
	 * nature of the highest max confirmed block. Furthermore, it is highly recommended to use a finalized
	 * transaction so that all returned transactions are also finalized. Otherwise, different replicas might
	 * see different statuses for some of the returned transactions and hence be unable to reach consensus.
	 */
	before: [] | [Signature];
	/**
	 * Search until this transaction signature, if found before `limit` reached.
	 */
	until: [] | [Signature];
	/**
	 * The minimum slot that the request can be evaluated at.
	 */
	minContextSlot: [] | [Slot];
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment: [] | [CommitmentLevel];
}
/**
 * Represents the result of a call to the `getSignaturesForAddress` Solana RPC method containing
 * an array of transaction signature information objects, ordered from newest to oldest transaction.
 */
export type GetSignaturesForAddressResult =
	| {
			Ok: Array<ConfirmedTransactionStatusWithSignature>;
	  }
	| { Err: RpcError };
/**
 * The parameters for a call to the `getSlot` Solana RPC method.
 */
export interface GetSlotParams {
	minContextSlot: [] | [Slot];
	commitment: [] | [CommitmentLevel];
}
/**
 * Represents the result of a call to the `getSlot` Solana RPC method.
 */
export type GetSlotResult = { Ok: Slot } | { Err: RpcError };
/**
 * Configures how to perform `getSlot` RPC HTTP calls.
 */
export interface GetSlotRpcConfig {
	roundingError: [] | [RoundingError];
	responseConsensus: [] | [ConsensusStrategy];
	responseSizeEstimate: [] | [bigint];
}
/**
 * The parameters for a Solana `getTokenAccountBalance` RPC method call.
 */
export interface GetTokenAccountBalanceParams {
	/**
	 * Pubkey of token account to query, as base-58 encoded string.
	 */
	pubkey: Pubkey;
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment: [] | [CommitmentLevel];
}
/**
 * Represents the result of a call to the `getTokenAccountBalance` Solana RPC method.
 */
export type GetTokenAccountBalanceResult = { Ok: TokenAmount } | { Err: RpcError };
/**
 * The parameters for a Solana `getTransaction` RPC method call.
 */
export interface GetTransactionParams {
	/**
	 * Transaction signature, as base-58 encoded string.
	 */
	signature: Signature;
	/**
	 * Set the max transaction version to return in responses.
	 * If the requested transaction is a higher version, an error will be returned.
	 * If this parameter is omitted, only legacy transactions will be returned,
	 * and any versioned transaction will prompt the error.
	 */
	maxSupportedTransactionVersion: [] | [number];
	/**
	 * Encoding for the returned Transaction.
	 */
	encoding: [] | [{ base58: null } | { base64: null }];
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment: [] | [CommitmentLevel];
}
/**
 * Represents the result of a call to the `getTransaction` Solana RPC method.
 */
export type GetTransactionResult =
	| {
			Ok: [] | [EncodedConfirmedTransactionWithStatusMeta];
	  }
	| { Err: RpcError };
/**
 * A Solana hash.
 * This is a base-58 encoded string with at most 44 characters.
 * Example: "DzfXchZJoLMG3cNftcf2sw7qatkkuwQf4xH15N5wkKAb"
 */
export type Hash = string;
/**
 * An HTTP header.
 */
export interface HttpHeader {
	value: string;
	name: string;
}
/**
 * Represents an HTTP outcall error.
 */
export type HttpOutcallError =
	| {
			IcError: { code: RejectionCode; message: string };
	  }
	| {
			InvalidHttpJsonRpcResponse: {
				status: number;
				body: string;
				parsingError: [] | [string];
			};
	  };
/**
 * List of inner instructions executed by a Solana transaction.
 * See the [Solana documentation](https://solana.com/de/docs/rpc/json-structures#inner-instructions) for more details.
 */
export interface InnerInstructions {
	instructions: Array<Instruction>;
	index: number;
}
/**
 * The installation args for the Solana RPC canister.
 */
export interface InstallArgs {
	logFilter: [] | [LogFilter];
	manageApiKeys: [] | [Array<Principal>];
	mode: [] | [Mode];
	overrideProvider: [] | [OverrideProvider];
	numSubnetNodes: [] | [NumSubnetNodes];
}
/**
 * Specific operation executed by a Solana transaction.
 */
export type Instruction = { compiled: CompiledInstruction };
/**
 * Errors that can occur during the execution of a specific instruction within a Solana transaction.
 * See the [Solana documentation](https://github.com/solana-labs/solana/blob/7700cb3128c1f19820de67b81aa45d18f73d2ac0/sdk/program/src/instruction.rs#L33) for more details.
 */
export type InstructionError =
	| { ModifiedProgramId: null }
	| { CallDepth: null }
	| { Immutable: null }
	| { GenericError: null }
	| { ExecutableAccountNotRentExempt: null }
	| { IncorrectAuthority: null }
	| { PrivilegeEscalation: null }
	| { ReentrancyNotAllowed: null }
	| { InvalidInstructionData: null }
	| { RentEpochModified: null }
	| { IllegalOwner: null }
	| { ComputationalBudgetExceeded: null }
	| { ExecutableDataModified: null }
	| { ExecutableLamportChange: null }
	| { UnbalancedInstruction: null }
	| { ProgramEnvironmentSetupFailure: null }
	| { IncorrectProgramId: null }
	| { UnsupportedSysvar: null }
	| { UnsupportedProgramId: null }
	| { AccountDataTooSmall: null }
	| { NotEnoughAccountKeys: null }
	| { AccountBorrowFailed: null }
	| { InvalidRealloc: null }
	| { AccountNotExecutable: null }
	| { AccountNotRentExempt: null }
	| { Custom: number }
	| { AccountDataSizeChanged: null }
	| { MaxAccountsDataAllocationsExceeded: null }
	| { ExternalAccountLamportSpend: null }
	| { ExternalAccountDataModified: null }
	| { MissingAccount: null }
	| { ProgramFailedToComplete: null }
	| { MaxInstructionTraceLengthExceeded: null }
	| { InvalidAccountData: null }
	| { ProgramFailedToCompile: null }
	| { ExecutableModified: null }
	| { InvalidAccountOwner: null }
	| { MaxSeedLengthExceeded: null }
	| { AccountAlreadyInitialized: null }
	| { AccountBorrowOutstanding: null }
	| { ReadonlyDataModified: null }
	| { UninitializedAccount: null }
	| { InvalidArgument: null }
	| { BorshIoError: string }
	| { BuiltinProgramsMustConsumeComputeUnits: null }
	| { MissingRequiredSignature: null }
	| { DuplicateAccountOutOfSync: null }
	| { MaxAccountsExceeded: null }
	| { ArithmeticOverflow: null }
	| { InvalidError: null }
	| { InvalidSeeds: null }
	| { DuplicateAccountIndex: null }
	| { ReadonlyLamportChange: null }
	| { InsufficientFunds: null };
/**
 * Represents a JSON-RPC error.
 */
export interface JsonRpcError {
	code: bigint;
	message: string;
}
/**
 * Smallest denomination of SOL, the native token on Solana, i.e.
 * 1_000_000_000 Lamports is 1 SOL
 */
export type Lamport = bigint;
/**
 * Transaction addresses loaded from address lookup tables.
 */
export interface LoadedAddresses {
	writable: Array<Pubkey>;
	readonly: Array<Pubkey>;
}
/**
 * A filter for log entries.
 */
export type LogFilter =
	| { ShowAll: null }
	| { HideAll: null }
	| { ShowPattern: Regex }
	| { HidePattern: Regex };
/**
 * Micro-lamports are used for the calculation of prioritization fees.
 * 1_000_000 MicroLamport == 1 Lamport
 */
export type MicroLamport = bigint;
/**
 * The canister operation mode. Default is 'Normal'.
 */
export type Mode =
	| {
			/**
			 * Demo mode, where cycle payment is not required.
			 */
			Demo: null;
	  }
	| {
			/**
			 * Normal mode, where cycle payment is required for certain operations.
			 */
			Normal: null;
	  };
/**
 * Represents an aggregated result from multiple RPC calls to the `getAccountInfo` Solana RPC method.
 */
export type MultiGetAccountInfoResult =
	| {
			Consistent: GetAccountInfoResult;
	  }
	| { Inconsistent: Array<[RpcSource, GetAccountInfoResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `getBalance` Solana RPC method.
 */
export type MultiGetBalanceResult =
	| { Consistent: GetBalanceResult }
	| { Inconsistent: Array<[RpcSource, GetBalanceResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `getBlock` Solana RPC method.
 */
export type MultiGetBlockResult =
	| { Consistent: GetBlockResult }
	| { Inconsistent: Array<[RpcSource, GetBlockResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `getRecentPrioritizationFeesResult` Solana RPC method.
 */
export type MultiGetRecentPrioritizationFeesResult =
	| {
			Consistent: GetRecentPrioritizationFeesResult;
	  }
	| { Inconsistent: Array<[RpcSource, GetRecentPrioritizationFeesResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `getSignatureStatuses` Solana RPC method.
 */
export type MultiGetSignatureStatusesResult =
	| {
			Consistent: GetSignatureStatusesResult;
	  }
	| { Inconsistent: Array<[RpcSource, GetSignatureStatusesResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `getSignatureStatuses` Solana RPC method.
 */
export type MultiGetSignaturesForAddressResult =
	| {
			Consistent: GetSignaturesForAddressResult;
	  }
	| { Inconsistent: Array<[RpcSource, GetSignaturesForAddressResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `getSlot` Solana RPC method.
 */
export type MultiGetSlotResult =
	| { Consistent: GetSlotResult }
	| { Inconsistent: Array<[RpcSource, GetSlotResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `getTokenAccountBalance` Solana RPC method.
 */
export type MultiGetTokenAccountBalanceResult =
	| {
			Consistent: GetTokenAccountBalanceResult;
	  }
	| { Inconsistent: Array<[RpcSource, GetTokenAccountBalanceResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `getTransaction` Solana RPC method.
 */
export type MultiGetTransactionResult =
	| {
			Consistent: GetTransactionResult;
	  }
	| { Inconsistent: Array<[RpcSource, GetTransactionResult]> };
/**
 * Represents an aggregated result from multiple RPC calls for a raw JSON-RPC request.
 */
export type MultiRequestResult =
	| { Consistent: RequestResult }
	| { Inconsistent: Array<[RpcSource, RequestResult]> };
/**
 * Represents an aggregated result from multiple RPC calls to the `sendTransaction` Solana RPC method.
 */
export type MultiSendTransactionResult =
	| {
			Consistent: SendTransactionResult;
	  }
	| { Inconsistent: Array<[RpcSource, SendTransactionResult]> };
/**
 * The number of nodes in the subnet
 */
export type NumSubnetNodes = number;
/**
 * Allows modifying an RpcEndpoint's request URL and HTTP headers.
 */
export interface OverrideProvider {
	overrideUrl: [] | [RegexSubstitution];
}
/**
 * Represents Solana account data parsed as JSON.
 */
export interface ParsedAccount {
	/**
	 * The data size of the account.
	 */
	space: bigint;
	/**
	 * The account data parsed as JSON and formatted as a string.
	 */
	parsed: string;
	/**
	 * The Solana program that interprets the data.
	 */
	program: Pubkey;
}
/**
 * Prioritization fee returned by `getRecentPrioritizationFees`.
 */
export interface PrioritizationFee {
	/**
	 * The per-compute-unit fee paid by at least one successfully landed transaction,
	 * specified in increments of micro-lamports.
	 */
	prioritizationFee: MicroLamport;
	/**
	 * Slot in which the fee was observed.
	 */
	slot: Slot;
}
/**
 * Represents an error with an RPC provider.
 */
export type ProviderError =
	| {
			TooFewCycles: { expected: bigint; received: bigint };
	  }
	| { InvalidRpcConfig: string }
	| { UnsupportedCluster: string };
/**
 * Address of a [Solana account][acc].
 *
 * This is a base-58 encoded string with at most 44 characters.
 * Some account addresses are ed25519 public keys. Often, though, account addresses do not
 * have corresponding secret keys as with [program derived addresses][pdas].
 * Example: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
 *
 * [acc]: https://solana.com/docs/core/accounts
 * [pdas]: https://solana.com/docs/core/cpi#program-derived-addresses
 */
export type Pubkey = string;
/**
 * A string used as a regex pattern.
 */
export type Regex = string;
/**
 * A regex-based substitution with a pattern and replacement string.
 */
export interface RegexSubstitution {
	pattern: Regex;
	replacement: string;
}
/**
 * Represents an IC rejection code for an HTTP outcall.
 */
export type RejectionCode =
	| { NoError: null }
	| { CanisterError: null }
	| { SysTransient: null }
	| { DestinationInvalid: null }
	| { Unknown: null }
	| { SysFatal: null }
	| { CanisterReject: null };
/**
 * Cycles cost of a request made to the SOL RPC canister.
 * E.g., the cycle cost for `getSlot` can be retrieved by calling `getSlotCyclesCost`.
 */
export type RequestCostResult = { Ok: bigint } | { Err: RpcError };
/**
 * Represents the result of a raw JSON-RPC request.
 */
export type RequestResult = { Ok: string } | { Err: RpcError };
/**
 * Reward or penalty applied to an account for fees, rent, voting, or staking activity.
 */
export interface Reward {
	lamports: bigint;
	postBalance: bigint;
	commission: [] | [number];
	pubkey: Pubkey;
	rewardType: [] | [{ fee: null } | { staking: null } | { rent: null } | { voting: null }];
}
/**
 * Rounding error for fetching the current slot from Solana using the JSON-RPC interface, meaning slots will be rounded
 * down to the nearest multiple of this error when being fetched.
 *
 * Solana slot time (around 400ms) is faster than the latency of an HTTPs outcall (which involves every node in the
 * subnet making an HTTP request), which is typically around a couple of seconds. It is therefore extremely likely that
 * the nodes will receive different results and will fail to reach consensus.
 *
 * Rounding down the slot received by each node artificially increases the slot time observed by each node and therefore
 * increases the probability of reaching consensus. In other words, the higher the rounding error, the more likely it is
 * that consensus will be reached (which is required for the HTTPs outcall to be successful), but the older the
 * resulting slot will be. Certain use cases, such as sending transactions, require a relatively recent block hash (less
 * than 150 blocks old) so that too a large rounding error is not advisable.
 *
 * The default value of 20 has been experimentally shown to likely achieve consensus while still resulting in a slot
 * whose corresponding block is "recent enough" to be used in a Solana transaction.
 */
export type RoundingError = bigint;
/**
 * Defines how to reach the supported RPC provider.
 */
export type RpcAccess =
	| {
			Authenticated: { publicUrl: [] | [string]; auth: RpcAuth };
	  }
	| { Unauthenticated: { publicUrl: string } };
/**
 * Defines how a call to a supported provider is authenticated.
 */
export type RpcAuth = { BearerToken: { url: string } } | { UrlParameter: { urlPattern: string } };
/**
 * Configures how to perform RPC HTTP calls.
 */
export interface RpcConfig {
	responseConsensus: [] | [ConsensusStrategy];
	responseSizeEstimate: [] | [bigint];
}
/**
 * Specifies how to reach a Solana RPC provider
 */
export interface RpcEndpoint {
	url: string;
	headers: [] | [Array<HttpHeader>];
}
/**
 * Represents an error that occurred while trying to perform an RPC call.
 */
export type RpcError =
	| { JsonRpcError: JsonRpcError }
	| { ProviderError: ProviderError }
	| { ValidationError: string }
	| { HttpOutcallError: HttpOutcallError };
/**
 * Defines an RPC provider for a particular Solana cluster and how to access it.
 */
export interface RpcProvider {
	access: RpcAccess;
	cluster: SolanaCluster;
}
/**
 * Defines a Solana RPC source.
 */
export type RpcSource = { Custom: RpcEndpoint } | { Supported: SupportedProvider };
/**
 * Defines a collection of Solana RPC sources.
 */
export type RpcSources =
	| {
			/**
			 * Let the SOL RPC canister decide how many and which providers should be contacted for that cluster.
			 * The exact number of contacted providers can be influenced by the chosen `ConsensusStrategy`.
			 */
			Default: SolanaCluster;
	  }
	| {
			/**
			 * List explicitly which providers should be contacted.
			 */
			Custom: Array<RpcSource>;
	  };
/**
 * The encoding format for the transaction argument to the Solana `sendTransaction` RPC method call.
 */
export type SendTransactionEncoding =
	| {
			/**
			 * DEPRECATED: The transaction is base-58 encoded.
			 */
			base58: null;
	  }
	| {
			/**
			 * The transaction is base-64 encoded.
			 */
			base64: null;
	  };
/**
 * The parameters for a Solana `sendTransaction` RPC method call.
 */
export interface SendTransactionParams {
	/**
	 * Encoding format for the transaction.
	 */
	encoding: [] | [SendTransactionEncoding];
	/**
	 * Commitment level to use for preflight. See Configuring State Commitment. Default finalized.
	 */
	preflightCommitment: [] | [CommitmentLevel];
	/**
	 * Fully-signed transaction, as encoded string.
	 */
	transaction: string;
	/**
	 * Maximum number of times for the RPC node to retry sending the transaction to the leader.
	 * If this parameter not provided, the RPC node will retry the transaction until it is
	 * finalized or until the blockhash expires.
	 */
	maxRetries: [] | [number];
	/**
	 * Set the minimum slot at which to perform preflight transaction checks
	 */
	minContextSlot: [] | [Slot];
	/**
	 * When true, skip the preflight transaction checks. Default: false.
	 */
	skipPreflight: [] | [boolean];
}
/**
 * Represents the result of a call to the `sendTransaction` Solana RPC method.
 */
export type SendTransactionResult = { Ok: Signature } | { Err: RpcError };
/**
 * Ed25519 signature.
 * This is a base-58 encoded string with at most 88 characters.
 * Example: "5LrcE2f6uvydKRquEJ8xp19heGxSvqsVbcqUeFoiWbXe8JNip7ftPQNTAVPyTK7ijVdpkzmKKaAQR7MWMmujAhXD"
 */
export type Signature = string;
/**
 * Represents a Solana slot
 */
export type Slot = bigint;
/**
 * Identifies a Solana cluster
 */
export type SolanaCluster =
	| {
			/**
			 * Live production environment
			 */
			Mainnet: null;
	  }
	| {
			/**
			 * Validator and stress testing
			 */
			Testnet: null;
	  }
	| {
			/**
			 * Public testing and development
			 */
			Devnet: null;
	  };
/**
 * Identifies an RPC provider for a particular Solana cluster.
 */
export type SupportedProvider =
	| { AnkrMainnet: null }
	| { AlchemyDevnet: null }
	| { DrpcMainnet: null }
	| { ChainstackDevnet: null }
	| { AlchemyMainnet: null }
	| { HeliusDevnet: null }
	| { AnkrDevnet: null }
	| { DrpcDevnet: null }
	| { ChainstackMainnet: null }
	| { PublicNodeMainnet: null }
	| { HeliusMainnet: null };
/**
 * Unix timestamp (seconds since the Unix epoch).
 * NOTE: This type is defined as an unsigned integer to align with the Solana JSON-RPC interface,
 * although in practice, an unsigned integer type would be functionally equivalent.
 */
export type Timestamp = bigint;
/**
 * A human-readable representation of a token amount.
 */
export interface TokenAmount {
	decimals: number;
	uiAmount: [] | [number];
	uiAmountString: string;
	amount: string;
}
/**
 * A Solana transaction confirmation status.
 */
export type TransactionConfirmationStatus =
	| { finalized: null }
	| { confirmed: null }
	| { processed: null };
/**
 * Determines whether and how transactions are included in a `getBlock` response.
 */
export type TransactionDetails = { none: null } | { accounts: null } | { signatures: null };
/**
 * Error that can occur when processing a Solana transaction.
 * See the [Solana documentation](https://github.com/solana-labs/solana/blob/c0c60386544ec9a9ec7119229f37386d9f070523/sdk/src/transaction/error.rs#L13) for more details.
 */
export type TransactionError =
	| { ProgramCacheHitMaxLimit: null }
	| { InvalidAccountForFee: null }
	| { AddressLookupTableNotFound: null }
	| { MissingSignatureForFee: null }
	| { WouldExceedAccountDataBlockLimit: null }
	| { AccountInUse: null }
	| { DuplicateInstruction: number }
	| { AccountNotFound: null }
	| { TooManyAccountLocks: null }
	| { InvalidAccountIndex: null }
	| { AlreadyProcessed: null }
	| { WouldExceedAccountDataTotalLimit: null }
	| { InvalidAddressLookupTableIndex: null }
	| { SanitizeFailure: null }
	| { ResanitizationNeeded: null }
	| { InvalidRentPayingAccount: null }
	| { MaxLoadedAccountsDataSizeExceeded: null }
	| { InvalidAddressLookupTableData: null }
	| { InvalidWritableAccount: null }
	| { WouldExceedMaxAccountCostLimit: null }
	| { InvalidLoadedAccountsDataSizeLimit: null }
	| { InvalidProgramForExecution: null }
	| { InstructionError: [number, InstructionError] }
	| { InsufficientFundsForRent: { account_index: number } }
	| { UnsupportedVersion: null }
	| { ClusterMaintenance: null }
	| { WouldExceedMaxVoteCostLimit: null }
	| { SignatureFailure: null }
	| { ProgramAccountNotFound: null }
	| { AccountLoadedTwice: null }
	| { ProgramExecutionTemporarilyRestricted: { account_index: number } }
	| { AccountBorrowOutstanding: null }
	| { WouldExceedMaxBlockCostLimit: null }
	| { InvalidAddressLookupTableOwner: null }
	| { InsufficientFundsForFee: null }
	| { CallChainTooDeep: null }
	| { UnbalancedTransaction: null }
	| { CommitCancelled: null }
	| { BlockhashNotFound: null };
/**
 * Solana transaction status as returned by the `getSignatureStatuses` RPC method.
 *
 * *WARNING*: The optional `confirmations` field in the `getSignatureStatuses` response is not
 * included in this type. This value is ignored when processing the RPC response because it
 * changes with every Solana block (approximately every 400ms) which is too quick to achieve
 * consensus between the different nodes performing the request.
 */
export interface TransactionStatus {
	/**
	 * Error if transaction failed, null if transaction succeeded.
	 */
	err: [] | [TransactionError];
	/**
	 * *DEPRECATED*: Transaction status:
	 * * Ok - Transaction was successful
	 * * Err - Transaction failed with `TransactionError`
	 */
	status: { Ok: null } | { Err: TransactionError };
	/**
	 * The transaction's cluster confirmation status; Either `processed`, `confirmed`, or `finalized`.
	 * See [Commitment](https://solana.com/docs/rpc#configuring-state-commitment) for more on
	 * optimistic confirmation.
	 */
	confirmationStatus: [] | [TransactionConfirmationStatus];
	/**
	 * The slot the transaction was processed.
	 */
	slot: Slot;
}
/**
 * Transaction status metadata.
 * See the [Solana documentation](https://solana.com/docs/rpc/json-structures#transaction-status-metadata) for more details.
 */
export interface TransactionStatusMeta {
	fee: bigint;
	status: { Ok: null } | { Err: TransactionError };
	preBalances: BigUint64Array;
	postTokenBalances: [] | [Array<TransactionTokenBalance>];
	innerInstructions: [] | [Array<InnerInstructions>];
	postBalances: BigUint64Array;
	loadedAddresses: [] | [LoadedAddresses];
	rewards: [] | [Array<Reward>];
	logMessages: [] | [Array<string>];
	returnData: [] | [{ data: string; programId: Pubkey }];
	preTokenBalances: [] | [Array<TransactionTokenBalance>];
	computeUnitsConsumed: [] | [bigint];
}
/**
 * Balance of a specific SPL token account.
 */
export interface TransactionTokenBalance {
	uiTokenAmount: TokenAmount;
	owner: [] | [Pubkey];
	accountIndex: number;
	mint: string;
	programId: [] | [Pubkey];
}
export interface _SERVICE {
	/**
	 * Call the Solana `getAccountInfo` RPC method and return the resulting info.
	 */
	getAccountInfo: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetAccountInfoParams],
		MultiGetAccountInfoResult
	>;
	getAccountInfoCyclesCost: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetAccountInfoParams],
		RequestCostResult
	>;
	/**
	 * Call the Solana `getBalance` RPC method and return the resulting balance.
	 */
	getBalance: ActorMethod<[RpcSources, [] | [RpcConfig], GetBalanceParams], MultiGetBalanceResult>;
	getBalanceCyclesCost: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetBalanceParams],
		RequestCostResult
	>;
	/**
	 * Call the Solana `getBlock` RPC method and return the resulting block.
	 */
	getBlock: ActorMethod<[RpcSources, [] | [RpcConfig], GetBlockParams], MultiGetBlockResult>;
	getBlockCyclesCost: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetBlockParams],
		RequestCostResult
	>;
	/**
	 * Returns a list of all supported providers.
	 */
	getProviders: ActorMethod<[], Array<[SupportedProvider, RpcProvider]>>;
	/**
	 * Call the Solana `getRecentPrioritizationFees` RPC method and return the resulting slot.
	 */
	getRecentPrioritizationFees: ActorMethod<
		[
			RpcSources,
			[] | [GetRecentPrioritizationFeesRpcConfig],
			[] | [GetRecentPrioritizationFeesParams]
		],
		MultiGetRecentPrioritizationFeesResult
	>;
	getRecentPrioritizationFeesCyclesCost: ActorMethod<
		[
			RpcSources,
			[] | [GetRecentPrioritizationFeesRpcConfig],
			[] | [GetRecentPrioritizationFeesParams]
		],
		RequestCostResult
	>;
	/**
	 * Call the Solana `getSignatureStatuses` RPC method and return the resulting statuses.
	 */
	getSignatureStatuses: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetSignatureStatusesParams],
		MultiGetSignatureStatusesResult
	>;
	getSignatureStatusesCyclesCost: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetSignatureStatusesParams],
		RequestCostResult
	>;
	/**
	 * Call the Solana `getSignaturesForAddress` RPC method and return the resulting signatures.
	 */
	getSignaturesForAddress: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetSignaturesForAddressParams],
		MultiGetSignaturesForAddressResult
	>;
	getSignaturesForAddressCyclesCost: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetSignaturesForAddressParams],
		RequestCostResult
	>;
	/**
	 * Call the Solana `getSlot` RPC method and return the resulting slot.
	 */
	getSlot: ActorMethod<
		[RpcSources, [] | [GetSlotRpcConfig], [] | [GetSlotParams]],
		MultiGetSlotResult
	>;
	getSlotCyclesCost: ActorMethod<
		[RpcSources, [] | [GetSlotRpcConfig], [] | [GetSlotParams]],
		RequestCostResult
	>;
	/**
	 * Call the Solana `getTokenAccountBalance` RPC method and return the resulting balance.
	 * If the account does not exist, this method will return a JSON-RPC error.
	 */
	getTokenAccountBalance: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetTokenAccountBalanceParams],
		MultiGetTokenAccountBalanceResult
	>;
	getTokenAccountBalanceCyclesCost: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetTokenAccountBalanceParams],
		RequestCostResult
	>;
	/**
	 * Call the Solana `getTransaction` RPC method and return the resulting transaction.
	 */
	getTransaction: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetTransactionParams],
		MultiGetTransactionResult
	>;
	getTransactionCyclesCost: ActorMethod<
		[RpcSources, [] | [RpcConfig], GetTransactionParams],
		RequestCostResult
	>;
	/**
	 * Make a raw JSON-RPC request that sends the given json_rpc_payload.
	 */
	jsonRequest: ActorMethod<[RpcSources, [] | [RpcConfig], string], MultiRequestResult>;
	jsonRequestCyclesCost: ActorMethod<[RpcSources, [] | [RpcConfig], string], RequestCostResult>;
	/**
	 * Call the Solana `sendTransaction` RPC method and return the resulting transaction ID.
	 */
	sendTransaction: ActorMethod<
		[RpcSources, [] | [RpcConfig], SendTransactionParams],
		MultiSendTransactionResult
	>;
	sendTransactionCyclesCost: ActorMethod<
		[RpcSources, [] | [RpcConfig], SendTransactionParams],
		RequestCostResult
	>;
	/**
	 * Update the API keys for a list of supported providers.
	 *
	 * # Preconditions
	 *
	 * The caller is the controller or a principal specified in `InstallArgs::manage_api_keys`.
	 */
	updateApiKeys: ActorMethod<[Array<[SupportedProvider, [] | [string]]>], undefined>;
}
export declare const idlService: IDL.ServiceClass;
export declare const idlInitArgs: IDL.Type[];
export declare const idlFactory: IDL.InterfaceFactory;
export declare const init: (args: { IDL: typeof IDL }) => IDL.Type[];
