/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import type { Principal } from '@icp-sdk/core/principal';
import { idlFactory, type _SERVICE } from './declarations/sol_rpc.did';
import type {
	AccountData as _AccountData,
	AccountEncoding as _AccountEncoding,
	AccountInfo as _AccountInfo,
	CommitmentLevel as _CommitmentLevel,
	CompiledInstruction as _CompiledInstruction,
	ConfirmedBlock as _ConfirmedBlock,
	ConfirmedTransactionStatusWithSignature as _ConfirmedTransactionStatusWithSignature,
	ConsensusStrategy as _ConsensusStrategy,
	DataSlice as _DataSlice,
	EncodedConfirmedTransactionWithStatusMeta as _EncodedConfirmedTransactionWithStatusMeta,
	EncodedTransaction as _EncodedTransaction,
	EncodedTransactionWithStatusMeta as _EncodedTransactionWithStatusMeta,
	GetAccountInfoEncoding as _GetAccountInfoEncoding,
	GetAccountInfoParams as _GetAccountInfoParams,
	GetAccountInfoResult as _GetAccountInfoResult,
	GetBalanceParams as _GetBalanceParams,
	GetBalanceResult as _GetBalanceResult,
	GetBlockParams as _GetBlockParams,
	GetBlockResult as _GetBlockResult,
	GetRecentPrioritizationFeesParams as _GetRecentPrioritizationFeesParams,
	GetRecentPrioritizationFeesResult as _GetRecentPrioritizationFeesResult,
	GetRecentPrioritizationFeesRpcConfig as _GetRecentPrioritizationFeesRpcConfig,
	GetSignatureStatusesParams as _GetSignatureStatusesParams,
	GetSignatureStatusesResult as _GetSignatureStatusesResult,
	GetSignaturesForAddressParams as _GetSignaturesForAddressParams,
	GetSignaturesForAddressResult as _GetSignaturesForAddressResult,
	GetSlotParams as _GetSlotParams,
	GetSlotResult as _GetSlotResult,
	GetSlotRpcConfig as _GetSlotRpcConfig,
	GetTokenAccountBalanceParams as _GetTokenAccountBalanceParams,
	GetTokenAccountBalanceResult as _GetTokenAccountBalanceResult,
	GetTransactionParams as _GetTransactionParams,
	GetTransactionResult as _GetTransactionResult,
	Hash as _Hash,
	HttpHeader as _HttpHeader,
	HttpOutcallError as _HttpOutcallError,
	InnerInstructions as _InnerInstructions,
	Instruction as _Instruction,
	InstructionError as _InstructionError,
	JsonRpcError as _JsonRpcError,
	Lamport as _Lamport,
	LoadedAddresses as _LoadedAddresses,
	MultiGetAccountInfoResult as _MultiGetAccountInfoResult,
	MultiGetBalanceResult as _MultiGetBalanceResult,
	MultiGetBlockResult as _MultiGetBlockResult,
	MultiGetRecentPrioritizationFeesResult as _MultiGetRecentPrioritizationFeesResult,
	MultiGetSignatureStatusesResult as _MultiGetSignatureStatusesResult,
	MultiGetSignaturesForAddressResult as _MultiGetSignaturesForAddressResult,
	MultiGetSlotResult as _MultiGetSlotResult,
	MultiGetTokenAccountBalanceResult as _MultiGetTokenAccountBalanceResult,
	MultiGetTransactionResult as _MultiGetTransactionResult,
	MultiRequestResult as _MultiRequestResult,
	MultiSendTransactionResult as _MultiSendTransactionResult,
	ParsedAccount as _ParsedAccount,
	PrioritizationFee as _PrioritizationFee,
	ProviderError as _ProviderError,
	Pubkey as _Pubkey,
	RejectionCode as _RejectionCode,
	RequestCostResult as _RequestCostResult,
	RequestResult as _RequestResult,
	Reward as _Reward,
	RoundingError as _RoundingError,
	RpcAccess as _RpcAccess,
	RpcAuth as _RpcAuth,
	RpcConfig as _RpcConfig,
	RpcEndpoint as _RpcEndpoint,
	RpcError as _RpcError,
	RpcProvider as _RpcProvider,
	RpcSource as _RpcSource,
	RpcSources as _RpcSources,
	SendTransactionEncoding as _SendTransactionEncoding,
	SendTransactionParams as _SendTransactionParams,
	SendTransactionResult as _SendTransactionResult,
	Signature as _Signature,
	Slot as _Slot,
	SolanaCluster as _SolanaCluster,
	SupportedProvider as _SupportedProvider,
	Timestamp as _Timestamp,
	TokenAmount as _TokenAmount,
	TransactionConfirmationStatus as _TransactionConfirmationStatus,
	TransactionDetails as _TransactionDetails,
	TransactionError as _TransactionError,
	TransactionStatus as _TransactionStatus,
	TransactionStatusMeta as _TransactionStatusMeta,
	TransactionTokenBalance as _TransactionTokenBalance
} from './declarations/sol_rpc.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export interface InnerInstructions {
	instructions: Array<Instruction>;
	index: number;
}
export interface TransactionStatus {
	/**
	 * Error if transaction failed, null if transaction succeeded.
	 */
	err?: TransactionError;
	/**
	 * *DEPRECATED*: Transaction status:
	 * * Ok - Transaction was successful
	 * * Err - Transaction failed with `TransactionError`
	 */
	status:
		| {
				__kind__: 'Ok';
				Ok: null;
		  }
		| {
				__kind__: 'Err';
				Err: TransactionError;
		  };
	/**
	 * The transaction's cluster confirmation status; Either `processed`, `confirmed`, or `finalized`.
	 * See [Commitment](https://solana.com/docs/rpc#configuring-state-commitment) for more on
	 * optimistic confirmation.
	 */
	confirmationStatus?: TransactionConfirmationStatus;
	/**
	 * The slot the transaction was processed.
	 */
	slot: Slot;
}
export type MultiGetBalanceResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetBalanceResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetBalanceResult]>;
	  };
export interface RpcEndpoint {
	url: string;
	headers?: Array<HttpHeader>;
}
export interface GetAccountInfoParams {
	encoding?: GetAccountInfoEncoding;
	pubkey: Pubkey;
	dataSlice?: DataSlice;
	minContextSlot?: Slot;
	commitment?: CommitmentLevel;
}
export type RpcSources =
	| {
			__kind__: 'Default';
			/**
			 * Let the SOL RPC canister decide how many and which providers should be contacted for that cluster.
			 * The exact number of contacted providers can be influenced by the chosen `ConsensusStrategy`.
			 */
			Default: SolanaCluster;
	  }
	| {
			__kind__: 'Custom';
			/**
			 * List explicitly which providers should be contacted.
			 */
			Custom: Array<RpcSource>;
	  };
export type HttpOutcallError =
	| {
			__kind__: 'IcError';
			IcError: {
				code: RejectionCode;
				message: string;
			};
	  }
	| {
			__kind__: 'InvalidHttpJsonRpcResponse';
			InvalidHttpJsonRpcResponse: {
				status: number;
				body: string;
				parsingError?: string;
			};
	  };
export type MultiGetBlockResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetBlockResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetBlockResult]>;
	  };
export interface GetRecentPrioritizationFeesRpcConfig {
	responseConsensus?: ConsensusStrategy;
	/**
	 * Round down the slot with the maximum value.
	 * Increasing that value will reduce the freshness of the returned prioritization fees
	 * but increase the likelihood of nodes reaching consensus.
	 */
	maxSlotRoundingError?: RoundingError;
	responseSizeEstimate?: bigint;
	/**
	 * Limit the number of returned priority fees.
	 * Valid numbers are 1-150, default is 100.
	 * Increasing that value can help in estimating the current priority fee
	 * but will reduce the likelihood of nodes reaching consensus.
	 */
	maxLength?: number;
}
export type TransactionError =
	| {
			__kind__: 'ProgramCacheHitMaxLimit';
			ProgramCacheHitMaxLimit: null;
	  }
	| {
			__kind__: 'InvalidAccountForFee';
			InvalidAccountForFee: null;
	  }
	| {
			__kind__: 'AddressLookupTableNotFound';
			AddressLookupTableNotFound: null;
	  }
	| {
			__kind__: 'MissingSignatureForFee';
			MissingSignatureForFee: null;
	  }
	| {
			__kind__: 'WouldExceedAccountDataBlockLimit';
			WouldExceedAccountDataBlockLimit: null;
	  }
	| {
			__kind__: 'AccountInUse';
			AccountInUse: null;
	  }
	| {
			__kind__: 'DuplicateInstruction';
			DuplicateInstruction: number;
	  }
	| {
			__kind__: 'AccountNotFound';
			AccountNotFound: null;
	  }
	| {
			__kind__: 'TooManyAccountLocks';
			TooManyAccountLocks: null;
	  }
	| {
			__kind__: 'InvalidAccountIndex';
			InvalidAccountIndex: null;
	  }
	| {
			__kind__: 'AlreadyProcessed';
			AlreadyProcessed: null;
	  }
	| {
			__kind__: 'WouldExceedAccountDataTotalLimit';
			WouldExceedAccountDataTotalLimit: null;
	  }
	| {
			__kind__: 'InvalidAddressLookupTableIndex';
			InvalidAddressLookupTableIndex: null;
	  }
	| {
			__kind__: 'SanitizeFailure';
			SanitizeFailure: null;
	  }
	| {
			__kind__: 'ResanitizationNeeded';
			ResanitizationNeeded: null;
	  }
	| {
			__kind__: 'InvalidRentPayingAccount';
			InvalidRentPayingAccount: null;
	  }
	| {
			__kind__: 'MaxLoadedAccountsDataSizeExceeded';
			MaxLoadedAccountsDataSizeExceeded: null;
	  }
	| {
			__kind__: 'InvalidAddressLookupTableData';
			InvalidAddressLookupTableData: null;
	  }
	| {
			__kind__: 'InvalidWritableAccount';
			InvalidWritableAccount: null;
	  }
	| {
			__kind__: 'WouldExceedMaxAccountCostLimit';
			WouldExceedMaxAccountCostLimit: null;
	  }
	| {
			__kind__: 'InvalidLoadedAccountsDataSizeLimit';
			InvalidLoadedAccountsDataSizeLimit: null;
	  }
	| {
			__kind__: 'InvalidProgramForExecution';
			InvalidProgramForExecution: null;
	  }
	| {
			__kind__: 'InstructionError';
			InstructionError: [number, InstructionError];
	  }
	| {
			__kind__: 'InsufficientFundsForRent';
			InsufficientFundsForRent: {
				account_index: number;
			};
	  }
	| {
			__kind__: 'UnsupportedVersion';
			UnsupportedVersion: null;
	  }
	| {
			__kind__: 'ClusterMaintenance';
			ClusterMaintenance: null;
	  }
	| {
			__kind__: 'WouldExceedMaxVoteCostLimit';
			WouldExceedMaxVoteCostLimit: null;
	  }
	| {
			__kind__: 'SignatureFailure';
			SignatureFailure: null;
	  }
	| {
			__kind__: 'ProgramAccountNotFound';
			ProgramAccountNotFound: null;
	  }
	| {
			__kind__: 'AccountLoadedTwice';
			AccountLoadedTwice: null;
	  }
	| {
			__kind__: 'ProgramExecutionTemporarilyRestricted';
			ProgramExecutionTemporarilyRestricted: {
				account_index: number;
			};
	  }
	| {
			__kind__: 'AccountBorrowOutstanding';
			AccountBorrowOutstanding: null;
	  }
	| {
			__kind__: 'WouldExceedMaxBlockCostLimit';
			WouldExceedMaxBlockCostLimit: null;
	  }
	| {
			__kind__: 'InvalidAddressLookupTableOwner';
			InvalidAddressLookupTableOwner: null;
	  }
	| {
			__kind__: 'InsufficientFundsForFee';
			InsufficientFundsForFee: null;
	  }
	| {
			__kind__: 'CallChainTooDeep';
			CallChainTooDeep: null;
	  }
	| {
			__kind__: 'UnbalancedTransaction';
			UnbalancedTransaction: null;
	  }
	| {
			__kind__: 'CommitCancelled';
			CommitCancelled: null;
	  }
	| {
			__kind__: 'BlockhashNotFound';
			BlockhashNotFound: null;
	  };
export interface TransactionStatusMeta {
	fee: bigint;
	status:
		| {
				__kind__: 'Ok';
				Ok: null;
		  }
		| {
				__kind__: 'Err';
				Err: TransactionError;
		  };
	preBalances: BigUint64Array;
	postTokenBalances?: Array<TransactionTokenBalance>;
	innerInstructions?: Array<InnerInstructions>;
	postBalances: BigUint64Array;
	loadedAddresses?: LoadedAddresses;
	rewards?: Array<Reward>;
	logMessages?: Array<string>;
	returnData?: {
		data: string;
		programId: Pubkey;
	};
	preTokenBalances?: Array<TransactionTokenBalance>;
	computeUnitsConsumed?: bigint;
}
export type GetSignaturesForAddressResult =
	| {
			__kind__: 'Ok';
			Ok: Array<ConfirmedTransactionStatusWithSignature>;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export type GetSlotResult =
	| {
			__kind__: 'Ok';
			Ok: Slot;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export type GetTokenAccountBalanceResult =
	| {
			__kind__: 'Ok';
			Ok: TokenAmount;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export interface LoadedAddresses {
	writable: Array<Pubkey>;
	readonly: Array<Pubkey>;
}
export type SendTransactionResult =
	| {
			__kind__: 'Ok';
			Ok: Signature;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export type MultiRequestResult =
	| {
			__kind__: 'Consistent';
			Consistent: RequestResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, RequestResult]>;
	  };
export interface TokenAmount {
	decimals: number;
	uiAmount?: number;
	uiAmountString: string;
	amount: string;
}
export type GetBalanceResult =
	| {
			__kind__: 'Ok';
			Ok: Lamport;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export type EncodedTransaction =
	| {
			__kind__: 'legacyBinary';
			legacyBinary: string;
	  }
	| {
			__kind__: 'binary';
			binary: [string, Variant_base58_base64];
	  };
export interface GetSlotParams {
	minContextSlot?: Slot;
	commitment?: CommitmentLevel;
}
/**
 * Rounding error for fetching the current slot from Solana using the JSON-RPC interface, meaning slots will be rounded
 * down to the nearest multiple of this error when being fetched.
 *
 * Solana slot time (around 400ms) is faster than the latency of an HTTPs outcall (which involves every node in the
 * subnet making an HTTP request), which is typically around a couple of seconds. It is therefore extremely likely that
 * the nodes will receive different results and will fail to reach consensus.
 *
 * Rounding down the slot received by each node artificially increases the slot time observed by each node and therefore
 * increases the probability of reaching consensus. In other words, the higher the rounding error, the more likely it is
 * that consensus will be reached (which is required for the HTTPs outcall to be successful), but the older the
 * resulting slot will be. Certain use cases, such as sending transactions, require a relatively recent block hash (less
 * than 150 blocks old) so that too a large rounding error is not advisable.
 *
 * The default value of 20 has been experimentally shown to likely achieve consensus while still resulting in a slot
 * whose corresponding block is "recent enough" to be used in a Solana transaction.
 */
export type RoundingError = bigint;
export interface DataSlice {
	offset: number;
	length: number;
}
export interface GetBlockParams {
	/**
	 * The max transaction version to return in responses.
	 * * If the requested block contains a transaction with a higher version,
	 * an error will be returned.
	 * * If this parameter is omitted, only legacy transactions will be returned, and a block
	 * containing any versioned transaction will prompt the error.
	 */
	maxSupportedTransactionVersion?: number;
	/**
	 * Specifies what transaction details to include in the response.
	 *
	 * *Warning:* If this value is not specified, the default value of `none` will be used, which
	 * is different from the default value in the Solana RPC API. This is because the default value
	 * of `full` for the Solana RPC API results in response sizes that are generally too large to
	 * be supported by the ICP.
	 */
	transactionDetails?: TransactionDetails;
	/**
	 * Slot number of the block to fetch.
	 */
	slot: Slot;
	/**
	 * Whether to populate the rewards array. If not provided, the default includes rewards.
	 */
	rewards?: boolean;
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment?: Variant_finalized_confirmed;
}
export interface Reward {
	lamports: bigint;
	postBalance: bigint;
	commission?: number;
	pubkey: Pubkey;
	rewardType?: Variant_fee_staking_rent_voting;
}
export type InstructionError =
	| {
			__kind__: 'ModifiedProgramId';
			ModifiedProgramId: null;
	  }
	| {
			__kind__: 'CallDepth';
			CallDepth: null;
	  }
	| {
			__kind__: 'Immutable';
			Immutable: null;
	  }
	| {
			__kind__: 'GenericError';
			GenericError: null;
	  }
	| {
			__kind__: 'ExecutableAccountNotRentExempt';
			ExecutableAccountNotRentExempt: null;
	  }
	| {
			__kind__: 'IncorrectAuthority';
			IncorrectAuthority: null;
	  }
	| {
			__kind__: 'PrivilegeEscalation';
			PrivilegeEscalation: null;
	  }
	| {
			__kind__: 'ReentrancyNotAllowed';
			ReentrancyNotAllowed: null;
	  }
	| {
			__kind__: 'InvalidInstructionData';
			InvalidInstructionData: null;
	  }
	| {
			__kind__: 'RentEpochModified';
			RentEpochModified: null;
	  }
	| {
			__kind__: 'IllegalOwner';
			IllegalOwner: null;
	  }
	| {
			__kind__: 'ComputationalBudgetExceeded';
			ComputationalBudgetExceeded: null;
	  }
	| {
			__kind__: 'ExecutableDataModified';
			ExecutableDataModified: null;
	  }
	| {
			__kind__: 'ExecutableLamportChange';
			ExecutableLamportChange: null;
	  }
	| {
			__kind__: 'UnbalancedInstruction';
			UnbalancedInstruction: null;
	  }
	| {
			__kind__: 'ProgramEnvironmentSetupFailure';
			ProgramEnvironmentSetupFailure: null;
	  }
	| {
			__kind__: 'IncorrectProgramId';
			IncorrectProgramId: null;
	  }
	| {
			__kind__: 'UnsupportedSysvar';
			UnsupportedSysvar: null;
	  }
	| {
			__kind__: 'UnsupportedProgramId';
			UnsupportedProgramId: null;
	  }
	| {
			__kind__: 'AccountDataTooSmall';
			AccountDataTooSmall: null;
	  }
	| {
			__kind__: 'NotEnoughAccountKeys';
			NotEnoughAccountKeys: null;
	  }
	| {
			__kind__: 'AccountBorrowFailed';
			AccountBorrowFailed: null;
	  }
	| {
			__kind__: 'InvalidRealloc';
			InvalidRealloc: null;
	  }
	| {
			__kind__: 'AccountNotExecutable';
			AccountNotExecutable: null;
	  }
	| {
			__kind__: 'AccountNotRentExempt';
			AccountNotRentExempt: null;
	  }
	| {
			__kind__: 'Custom';
			Custom: number;
	  }
	| {
			__kind__: 'AccountDataSizeChanged';
			AccountDataSizeChanged: null;
	  }
	| {
			__kind__: 'MaxAccountsDataAllocationsExceeded';
			MaxAccountsDataAllocationsExceeded: null;
	  }
	| {
			__kind__: 'ExternalAccountLamportSpend';
			ExternalAccountLamportSpend: null;
	  }
	| {
			__kind__: 'ExternalAccountDataModified';
			ExternalAccountDataModified: null;
	  }
	| {
			__kind__: 'MissingAccount';
			MissingAccount: null;
	  }
	| {
			__kind__: 'ProgramFailedToComplete';
			ProgramFailedToComplete: null;
	  }
	| {
			__kind__: 'MaxInstructionTraceLengthExceeded';
			MaxInstructionTraceLengthExceeded: null;
	  }
	| {
			__kind__: 'InvalidAccountData';
			InvalidAccountData: null;
	  }
	| {
			__kind__: 'ProgramFailedToCompile';
			ProgramFailedToCompile: null;
	  }
	| {
			__kind__: 'ExecutableModified';
			ExecutableModified: null;
	  }
	| {
			__kind__: 'InvalidAccountOwner';
			InvalidAccountOwner: null;
	  }
	| {
			__kind__: 'MaxSeedLengthExceeded';
			MaxSeedLengthExceeded: null;
	  }
	| {
			__kind__: 'AccountAlreadyInitialized';
			AccountAlreadyInitialized: null;
	  }
	| {
			__kind__: 'AccountBorrowOutstanding';
			AccountBorrowOutstanding: null;
	  }
	| {
			__kind__: 'ReadonlyDataModified';
			ReadonlyDataModified: null;
	  }
	| {
			__kind__: 'UninitializedAccount';
			UninitializedAccount: null;
	  }
	| {
			__kind__: 'InvalidArgument';
			InvalidArgument: null;
	  }
	| {
			__kind__: 'BorshIoError';
			BorshIoError: string;
	  }
	| {
			__kind__: 'BuiltinProgramsMustConsumeComputeUnits';
			BuiltinProgramsMustConsumeComputeUnits: null;
	  }
	| {
			__kind__: 'MissingRequiredSignature';
			MissingRequiredSignature: null;
	  }
	| {
			__kind__: 'DuplicateAccountOutOfSync';
			DuplicateAccountOutOfSync: null;
	  }
	| {
			__kind__: 'MaxAccountsExceeded';
			MaxAccountsExceeded: null;
	  }
	| {
			__kind__: 'ArithmeticOverflow';
			ArithmeticOverflow: null;
	  }
	| {
			__kind__: 'InvalidError';
			InvalidError: null;
	  }
	| {
			__kind__: 'InvalidSeeds';
			InvalidSeeds: null;
	  }
	| {
			__kind__: 'DuplicateAccountIndex';
			DuplicateAccountIndex: null;
	  }
	| {
			__kind__: 'ReadonlyLamportChange';
			ReadonlyLamportChange: null;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: null;
	  };
export interface GetTransactionParams {
	/**
	 * Transaction signature, as base-58 encoded string.
	 */
	signature: Signature;
	/**
	 * Set the max transaction version to return in responses.
	 * If the requested transaction is a higher version, an error will be returned.
	 * If this parameter is omitted, only legacy transactions will be returned,
	 * and any versioned transaction will prompt the error.
	 */
	maxSupportedTransactionVersion?: number;
	/**
	 * Encoding for the returned Transaction.
	 */
	encoding?: Variant_base58_base64;
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment?: CommitmentLevel;
}
export type MultiGetAccountInfoResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetAccountInfoResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetAccountInfoResult]>;
	  };
export interface ConfirmedTransactionStatusWithSignature {
	/**
	 * Error if transaction failed, null if transaction succeeded.
	 */
	err?: TransactionError;
	/**
	 * Transaction signature.
	 */
	signature: Signature;
	/**
	 * The transaction's cluster confirmation status; Either `processed`, `confirmed`, or `finalized`.
	 * See [Commitment](https://solana.com/docs/rpc#configuring-state-commitment) for more on
	 * optimistic confirmation.
	 */
	confirmationStatus?: TransactionConfirmationStatus;
	/**
	 * Memo associated with the transaction, null if no memo is present.
	 */
	memo?: string;
	/**
	 * The slot that contains the block with the transaction.
	 */
	slot: Slot;
	/**
	 * Estimated production time of when transaction was processed, null if not available.
	 */
	blockTime?: Timestamp;
}
export type RequestResult =
	| {
			__kind__: 'Ok';
			Ok: string;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export type ConsensusStrategy =
	| {
			__kind__: 'Equality';
			Equality: null;
	  }
	| {
			__kind__: 'Threshold';
			Threshold: {
				min: number;
				total?: number;
			};
	  };
export type RpcAccess =
	| {
			__kind__: 'Authenticated';
			Authenticated: {
				publicUrl?: string;
				auth: RpcAuth;
			};
	  }
	| {
			__kind__: 'Unauthenticated';
			Unauthenticated: {
				publicUrl: string;
			};
	  };
export interface HttpHeader {
	value: string;
	name: string;
}
export type RpcSource =
	| {
			__kind__: 'Custom';
			Custom: RpcEndpoint;
	  }
	| {
			__kind__: 'Supported';
			Supported: SupportedProvider;
	  };
export type RpcError =
	| {
			__kind__: 'JsonRpcError';
			JsonRpcError: JsonRpcError;
	  }
	| {
			__kind__: 'ProviderError';
			ProviderError: ProviderError;
	  }
	| {
			__kind__: 'ValidationError';
			ValidationError: string;
	  }
	| {
			__kind__: 'HttpOutcallError';
			HttpOutcallError: HttpOutcallError;
	  };
/**
 * The number of nodes in the subnet
 */
export type NumSubnetNodes = number;
export interface InstallArgs {
	logFilter?: LogFilter;
	manageApiKeys?: Array<Principal>;
	mode?: Mode;
	overrideProvider?: OverrideProvider;
	numSubnetNodes?: NumSubnetNodes;
}
export type MultiGetTokenAccountBalanceResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetTokenAccountBalanceResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetTokenAccountBalanceResult]>;
	  };
export type RpcAuth =
	| {
			__kind__: 'BearerToken';
			BearerToken: {
				url: string;
			};
	  }
	| {
			__kind__: 'UrlParameter';
			UrlParameter: {
				urlPattern: string;
			};
	  };
export interface PrioritizationFee {
	/**
	 * The per-compute-unit fee paid by at least one successfully landed transaction,
	 * specified in increments of micro-lamports.
	 */
	prioritizationFee: MicroLamport;
	/**
	 * Slot in which the fee was observed.
	 */
	slot: Slot;
}
export type MultiSendTransactionResult =
	| {
			__kind__: 'Consistent';
			Consistent: SendTransactionResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, SendTransactionResult]>;
	  };
export interface ConfirmedBlock {
	/**
	 * The epoch rewards are distributed over `1 + numRewardPartition` blocks. See the
	 * [Partitioned Inflationary Rewards Distribution](https://docs.anza.xyz/proposals/partitioned-inflationary-rewards-distribution/)
	 * feature for more details.
	 */
	numRewardPartition?: bigint;
	/**
	 * Estimated production time.
	 */
	blockTime?: Timestamp;
	/**
	 * The blockhash of this block, as base-58 encoded string.
	 */
	blockhash: Hash;
	/**
	 * The number of blocks beneath this block.
	 */
	blockHeight?: bigint;
	/**
	 * The signatures of the transactions in this block. Included if the request parameter `transactionDetails` is not
	 * `none`.
	 */
	signatures?: Array<Signature>;
	/**
	 * Array of rewards distributed in this block.
	 */
	rewards?: Array<Reward>;
	/**
	 * Transaction details for the transactions included in this block. Included in the response
	 * when `transactionDetails` is set to `accounts`.
	 */
	transactions?: Array<EncodedTransactionWithStatusMeta>;
	/**
	 * The blockhash of this block's parent, as base-58 encoded string; if the parent block is not
	 * available due to ledger cleanup, this field will return "11111111111111111111111111111111".
	 */
	previousBlockhash: Hash;
	/**
	 * The slot index of this block's parent.
	 */
	parentSlot: Slot;
}
export interface RpcConfig {
	responseConsensus?: ConsensusStrategy;
	responseSizeEstimate?: bigint;
}
export type Instruction = {
	__kind__: 'compiled';
	compiled: CompiledInstruction;
};
export type MultiGetTransactionResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetTransactionResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetTransactionResult]>;
	  };
export type GetBlockResult =
	| {
			__kind__: 'Ok';
			Ok: ConfirmedBlock | null;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export interface GetSlotRpcConfig {
	roundingError?: RoundingError;
	responseConsensus?: ConsensusStrategy;
	responseSizeEstimate?: bigint;
}
/**
 * Unix timestamp (seconds since the Unix epoch).
 * NOTE: This type is defined as an unsigned integer to align with the Solana JSON-RPC interface,
 * although in practice, an unsigned integer type would be functionally equivalent.
 */
export type Timestamp = bigint;
export type MultiGetSignatureStatusesResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetSignatureStatusesResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetSignatureStatusesResult]>;
	  };
export interface RpcProvider {
	access: RpcAccess;
	cluster: SolanaCluster;
}
export interface EncodedTransactionWithStatusMeta {
	/**
	 * [Transaction status metadata object](https://solana.com/docs/rpc/json-structures#transaction-status-metadata) or null.
	 */
	meta?: TransactionStatusMeta;
	/**
	 * Transaction object, either in JSON format or encoded binary data.
	 */
	transaction: EncodedTransaction;
	/**
	 * Transaction version. `null` if `maxSupportedTransactionVersion` is not set in request params.
	 */
	version?:
		| {
				__kind__: 'legacy';
				legacy: null;
		  }
		| {
				__kind__: 'number';
				number: number;
		  };
}
export interface GetSignatureStatusesParams {
	/**
	 * If set to true, a Solana node will search its ledger cache for any signatures not found in the recent status cache.
	 */
	searchTransactionHistory?: boolean;
	/**
	 * An array of transaction signatures to confirm, as base-58 encoded strings (up to a maximum of 256)
	 */
	signatures: Array<Signature>;
}
export interface ParsedAccount {
	/**
	 * The data size of the account.
	 */
	space: bigint;
	/**
	 * The account data parsed as JSON and formatted as a string.
	 */
	parsed: string;
	/**
	 * The Solana program that interprets the data.
	 */
	program: Pubkey;
}
export type MultiGetSlotResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetSlotResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetSlotResult]>;
	  };
/**
 * Micro-lamports are used for the calculation of prioritization fees.
 * 1_000_000 MicroLamport == 1 Lamport
 */
export type MicroLamport = bigint;
export type ProviderError =
	| {
			__kind__: 'TooFewCycles';
			TooFewCycles: {
				expected: bigint;
				received: bigint;
			};
	  }
	| {
			__kind__: 'InvalidRpcConfig';
			InvalidRpcConfig: string;
	  }
	| {
			__kind__: 'UnsupportedCluster';
			UnsupportedCluster: string;
	  };
export type MultiGetRecentPrioritizationFeesResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetRecentPrioritizationFeesResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetRecentPrioritizationFeesResult]>;
	  };
/**
 * A Solana hash.
 * This is a base-58 encoded string with at most 44 characters.
 * Example: "DzfXchZJoLMG3cNftcf2sw7qatkkuwQf4xH15N5wkKAb"
 */
export type Hash = string;
/**
 * Represents a Solana slot
 */
export type Slot = bigint;
/**
 * Ed25519 signature.
 * This is a base-58 encoded string with at most 88 characters.
 * Example: "5LrcE2f6uvydKRquEJ8xp19heGxSvqsVbcqUeFoiWbXe8JNip7ftPQNTAVPyTK7ijVdpkzmKKaAQR7MWMmujAhXD"
 */
export type Signature = string;
export interface AccountInfo {
	/**
	 * Boolean indicating if the account contains a program (and is strictly read-only).
	 */
	executable: boolean;
	/**
	 * Pubkey of the program this account has been assigned to.
	 */
	owner: Pubkey;
	/**
	 * Number of lamports assigned to this account.
	 */
	lamports: bigint;
	/**
	 * Data associated with the account.
	 */
	data: AccountData;
	/**
	 * The data size of the account.
	 */
	space: bigint;
	/**
	 * The epoch at which this account will next owe rent.
	 */
	rentEpoch: bigint;
}
export interface GetBalanceParams {
	/**
	 * Pubkey of account to query, as base-58 encoded string.
	 */
	pubkey: Pubkey;
	/**
	 * The minimum slot that the request can be evaluated at.
	 */
	minContextSlot?: Slot;
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment?: CommitmentLevel;
}
export interface OverrideProvider {
	overrideUrl?: RegexSubstitution;
}
export type GetTransactionResult =
	| {
			__kind__: 'Ok';
			Ok: EncodedConfirmedTransactionWithStatusMeta | null;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
/**
 * Smallest denomination of SOL, the native token on Solana, i.e.
 * 1_000_000_000 Lamports is 1 SOL
 */
export type Lamport = bigint;
export interface GetTokenAccountBalanceParams {
	/**
	 * Pubkey of token account to query, as base-58 encoded string.
	 */
	pubkey: Pubkey;
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment?: CommitmentLevel;
}
/**
 * A string used as a regex pattern.
 */
export type Regex = string;
export interface SendTransactionParams {
	/**
	 * Encoding format for the transaction.
	 */
	encoding?: SendTransactionEncoding;
	/**
	 * Commitment level to use for preflight. See Configuring State Commitment. Default finalized.
	 */
	preflightCommitment?: CommitmentLevel;
	/**
	 * Fully-signed transaction, as encoded string.
	 */
	transaction: string;
	/**
	 * Maximum number of times for the RPC node to retry sending the transaction to the leader.
	 * If this parameter not provided, the RPC node will retry the transaction until it is
	 * finalized or until the blockhash expires.
	 */
	maxRetries?: number;
	/**
	 * Set the minimum slot at which to perform preflight transaction checks
	 */
	minContextSlot?: Slot;
	/**
	 * When true, skip the preflight transaction checks. Default: false.
	 */
	skipPreflight?: boolean;
}
export interface TransactionTokenBalance {
	uiTokenAmount: TokenAmount;
	owner?: Pubkey;
	accountIndex: number;
	mint: string;
	programId?: Pubkey;
}
export type GetRecentPrioritizationFeesResult =
	| {
			__kind__: 'Ok';
			Ok: Array<PrioritizationFee>;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export interface CompiledInstruction {
	data: string;
	accounts: Uint8Array;
	programIdIndex: number;
	stackHeight?: number;
}
export type AccountData =
	| {
			__kind__: 'json';
			/**
			 * The data is formatted as a JSON `ParsedAccount`.
			 */
			json: ParsedAccount;
	  }
	| {
			__kind__: 'legacyBinary';
			/**
			 * The data is formatted as a binary string. This is a legacy format retained for RPC backwards compatibility
			 */
			legacyBinary: string;
	  }
	| {
			__kind__: 'binary';
			/**
			 * The data is formatted as a string containing the account data encoded according to one of
			 * the `AccountEncoding` formats.
			 */
			binary: [string, AccountEncoding];
	  };
export type MultiGetSignaturesForAddressResult =
	| {
			__kind__: 'Consistent';
			Consistent: GetSignaturesForAddressResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetSignaturesForAddressResult]>;
	  };
export type GetSignatureStatusesResult =
	| {
			__kind__: 'Ok';
			Ok: Array<TransactionStatus | null>;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
/**
 * The parameters for a call to the `getRecentPrioritizationFees` Solana RPC method.
 * An array of Account addresses (up to a maximum of 128 addresses), as base-58 encoded strings.
 */
export type GetRecentPrioritizationFeesParams = Array<Pubkey>;
export interface RegexSubstitution {
	pattern: Regex;
	replacement: string;
}
export interface JsonRpcError {
	code: bigint;
	message: string;
}
export interface GetSignaturesForAddressParams {
	/**
	 * The account address.
	 */
	pubkey: Pubkey;
	/**
	 * Maximum transaction signatures to return (between 1 and 1,000).
	 */
	limit?: number;
	/**
	 * Start searching backwards from this transaction signature. Any transaction can be used for this field; it
	 * does not necessarily have to use the `pubkey` account. If not provided, the search starts from the top of
	 * the highest max confirmed block.
	 *
	 * This field is required to obtain an idempotent response, and hence crucial for the replicas to reach
	 * consensus. If not included, different replicas will likely have different responses due to the fast-changing
	 * nature of the highest max confirmed block. Furthermore, it is highly recommended to use a finalized
	 * transaction so that all returned transactions are also finalized. Otherwise, different replicas might
	 * see different statuses for some of the returned transactions and hence be unable to reach consensus.
	 */
	before?: Signature;
	/**
	 * Search until this transaction signature, if found before `limit` reached.
	 */
	until?: Signature;
	/**
	 * The minimum slot that the request can be evaluated at.
	 */
	minContextSlot?: Slot;
	/**
	 * The commitment describes how finalized a block is at that point in time.
	 */
	commitment?: CommitmentLevel;
}
export type LogFilter =
	| {
			__kind__: 'ShowAll';
			ShowAll: null;
	  }
	| {
			__kind__: 'HideAll';
			HideAll: null;
	  }
	| {
			__kind__: 'ShowPattern';
			ShowPattern: Regex;
	  }
	| {
			__kind__: 'HidePattern';
			HidePattern: Regex;
	  };
export interface EncodedConfirmedTransactionWithStatusMeta {
	/**
	 * Transaction information including the metadata, version and encoded transaction.
	 */
	transaction: EncodedTransactionWithStatusMeta;
	/**
	 * The slot this transaction was processed in
	 */
	slot: Slot;
	/**
	 * Estimated production time, as Unix timestamp (seconds since the Unix epoch) of when the transaction was processed.
	 * `null` if not available.
	 */
	blockTime?: Timestamp;
}
/**
 * Address of a [Solana account][acc].
 *
 * This is a base-58 encoded string with at most 44 characters.
 * Some account addresses are ed25519 public keys. Often, though, account addresses do not
 * have corresponding secret keys as with [program derived addresses][pdas].
 * Example: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
 *
 * [acc]: https://solana.com/docs/core/accounts
 * [pdas]: https://solana.com/docs/core/cpi#program-derived-addresses
 */
export type Pubkey = string;
export type RequestCostResult =
	| {
			__kind__: 'Ok';
			Ok: bigint;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export type GetAccountInfoResult =
	| {
			__kind__: 'Ok';
			Ok: AccountInfo | null;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  };
export enum AccountEncoding {
	'base64+zstd' = 'base64+zstd',
	/**
	 * The account data is formatted as a JSON string.
	 */
	jsonParsed = 'jsonParsed',
	/**
	 * The account data is formatted as a base-58 string.
	 */
	base58 = 'base58',
	/**
	 * The account data is formatted as a base-64 string.
	 */
	base64 = 'base64',
	/**
	 * The account data is formatted as a binary string. Legacy. Retained for RPC backwards compatibility.
	 */
	binary = 'binary'
}
export enum CommitmentLevel {
	finalized = 'finalized',
	confirmed = 'confirmed',
	processed = 'processed'
}
export enum GetAccountInfoEncoding {
	'base64+zstd' = 'base64+zstd',
	/**
	 * Return the data as a JSON string.
	 * * jsonParsed encoding attempts to use program-specific state parsers to return more human-readable and explicit
	 * account state data.
	 * * If jsonParsed is requested but a parser cannot be found, the field falls back to base64 encoding, detectable
	 * when the data field is type string.
	 */
	jsonParsed = 'jsonParsed',
	/**
	 * Return the account data encoded in base-58. This is slow and limited to less than 129 bytes of account data.
	 */
	base58 = 'base58',
	/**
	 * Return the account data encoded in base-64. This works for account data of any size.
	 */
	base64 = 'base64'
}
export enum Mode {
	/**
	 * Demo mode, where cycle payment is not required.
	 */
	Demo = 'Demo',
	/**
	 * Normal mode, where cycle payment is required for certain operations.
	 */
	Normal = 'Normal'
}
export enum RejectionCode {
	NoError = 'NoError',
	CanisterError = 'CanisterError',
	SysTransient = 'SysTransient',
	DestinationInvalid = 'DestinationInvalid',
	Unknown = 'Unknown',
	SysFatal = 'SysFatal',
	CanisterReject = 'CanisterReject'
}
export enum SolanaCluster {
	/**
	 * Live production environment
	 */
	Mainnet = 'Mainnet',
	/**
	 * Validator and stress testing
	 */
	Testnet = 'Testnet',
	/**
	 * Public testing and development
	 */
	Devnet = 'Devnet'
}
export enum SupportedProvider {
	AnkrMainnet = 'AnkrMainnet',
	AlchemyDevnet = 'AlchemyDevnet',
	DrpcMainnet = 'DrpcMainnet',
	ChainstackDevnet = 'ChainstackDevnet',
	AlchemyMainnet = 'AlchemyMainnet',
	HeliusDevnet = 'HeliusDevnet',
	AnkrDevnet = 'AnkrDevnet',
	DrpcDevnet = 'DrpcDevnet',
	ChainstackMainnet = 'ChainstackMainnet',
	PublicNodeMainnet = 'PublicNodeMainnet',
	HeliusMainnet = 'HeliusMainnet'
}
export enum TransactionDetails {
	none = 'none',
	accounts = 'accounts',
	signatures = 'signatures'
}
export enum Variant_base58_base64 {
	base58 = 'base58',
	base64 = 'base64'
}
export enum Variant_fee_staking_rent_voting {
	fee = 'fee',
	staking = 'staking',
	rent = 'rent',
	voting = 'voting'
}
export enum Variant_finalized_confirmed {
	finalized = 'finalized',
	confirmed = 'confirmed'
}
export interface sol_rpcInterface {
	getAccountInfo(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetAccountInfoParams
	): Promise<MultiGetAccountInfoResult>;
	getAccountInfoCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetAccountInfoParams
	): Promise<RequestCostResult>;
	getBalance(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetBalanceParams
	): Promise<MultiGetBalanceResult>;
	getBalanceCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetBalanceParams
	): Promise<RequestCostResult>;
	getBlock(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetBlockParams
	): Promise<MultiGetBlockResult>;
	getBlockCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetBlockParams
	): Promise<RequestCostResult>;
	getProviders(): Promise<Array<[SupportedProvider, RpcProvider]>>;
	getRecentPrioritizationFees(
		arg0: RpcSources,
		arg1: GetRecentPrioritizationFeesRpcConfig | null,
		arg2: GetRecentPrioritizationFeesParams | null
	): Promise<MultiGetRecentPrioritizationFeesResult>;
	getRecentPrioritizationFeesCyclesCost(
		arg0: RpcSources,
		arg1: GetRecentPrioritizationFeesRpcConfig | null,
		arg2: GetRecentPrioritizationFeesParams | null
	): Promise<RequestCostResult>;
	getSignatureStatuses(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetSignatureStatusesParams
	): Promise<MultiGetSignatureStatusesResult>;
	getSignatureStatusesCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetSignatureStatusesParams
	): Promise<RequestCostResult>;
	getSignaturesForAddress(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetSignaturesForAddressParams
	): Promise<MultiGetSignaturesForAddressResult>;
	getSignaturesForAddressCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetSignaturesForAddressParams
	): Promise<RequestCostResult>;
	getSlot(
		arg0: RpcSources,
		arg1: GetSlotRpcConfig | null,
		arg2: GetSlotParams | null
	): Promise<MultiGetSlotResult>;
	getSlotCyclesCost(
		arg0: RpcSources,
		arg1: GetSlotRpcConfig | null,
		arg2: GetSlotParams | null
	): Promise<RequestCostResult>;
	getTokenAccountBalance(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetTokenAccountBalanceParams
	): Promise<MultiGetTokenAccountBalanceResult>;
	getTokenAccountBalanceCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetTokenAccountBalanceParams
	): Promise<RequestCostResult>;
	getTransaction(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetTransactionParams
	): Promise<MultiGetTransactionResult>;
	getTransactionCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetTransactionParams
	): Promise<RequestCostResult>;
	jsonRequest(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		json_rpc_payload: string
	): Promise<MultiRequestResult>;
	jsonRequestCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		json_rpc_payload: string
	): Promise<RequestCostResult>;
	sendTransaction(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: SendTransactionParams
	): Promise<MultiSendTransactionResult>;
	sendTransactionCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: SendTransactionParams
	): Promise<RequestCostResult>;
	updateApiKeys(arg0: Array<[SupportedProvider, string | null]>): Promise<void>;
}
export class Sol_rpc implements sol_rpcInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async getAccountInfo(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetAccountInfoParams
	): Promise<MultiGetAccountInfoResult> {
		const result = await this.actor.getAccountInfo(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetAccountInfoParams_n18(arg2)
		);
		return from_candid_MultiGetAccountInfoResult_n24(result);
	}
	async getAccountInfoCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetAccountInfoParams
	): Promise<RequestCostResult> {
		const result = await this.actor.getAccountInfoCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetAccountInfoParams_n18(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async getBalance(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetBalanceParams
	): Promise<MultiGetBalanceResult> {
		const result = await this.actor.getBalance(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetBalanceParams_n58(arg2)
		);
		return from_candid_MultiGetBalanceResult_n60(result);
	}
	async getBalanceCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetBalanceParams
	): Promise<RequestCostResult> {
		const result = await this.actor.getBalanceCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetBalanceParams_n58(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async getBlock(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetBlockParams
	): Promise<MultiGetBlockResult> {
		const result = await this.actor.getBlock(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetBlockParams_n66(arg2)
		);
		return from_candid_MultiGetBlockResult_n71(result);
	}
	async getBlockCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetBlockParams
	): Promise<RequestCostResult> {
		const result = await this.actor.getBlockCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetBlockParams_n66(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async getProviders(): Promise<Array<[SupportedProvider, RpcProvider]>> {
		const result = await this.actor.getProviders();
		return from_candid_vec_n130(result);
	}
	async getRecentPrioritizationFees(
		arg0: RpcSources,
		arg1: GetRecentPrioritizationFeesRpcConfig | null,
		arg2: GetRecentPrioritizationFeesParams | null
	): Promise<MultiGetRecentPrioritizationFeesResult> {
		const result = await this.actor.getRecentPrioritizationFees(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n141(arg1),
			to_candid_opt_n144(arg2)
		);
		return from_candid_MultiGetRecentPrioritizationFeesResult_n145(result);
	}
	async getRecentPrioritizationFeesCyclesCost(
		arg0: RpcSources,
		arg1: GetRecentPrioritizationFeesRpcConfig | null,
		arg2: GetRecentPrioritizationFeesParams | null
	): Promise<RequestCostResult> {
		const result = await this.actor.getRecentPrioritizationFeesCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n141(arg1),
			to_candid_opt_n144(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async getSignatureStatuses(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetSignatureStatusesParams
	): Promise<MultiGetSignatureStatusesResult> {
		const result = await this.actor.getSignatureStatuses(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetSignatureStatusesParams_n151(arg2)
		);
		return from_candid_MultiGetSignatureStatusesResult_n153(result);
	}
	async getSignatureStatusesCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetSignatureStatusesParams
	): Promise<RequestCostResult> {
		const result = await this.actor.getSignatureStatusesCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetSignatureStatusesParams_n151(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async getSignaturesForAddress(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetSignaturesForAddressParams
	): Promise<MultiGetSignaturesForAddressResult> {
		const result = await this.actor.getSignaturesForAddress(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetSignaturesForAddressParams_n167(arg2)
		);
		return from_candid_MultiGetSignaturesForAddressResult_n169(result);
	}
	async getSignaturesForAddressCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetSignaturesForAddressParams
	): Promise<RequestCostResult> {
		const result = await this.actor.getSignaturesForAddressCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetSignaturesForAddressParams_n167(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async getSlot(
		arg0: RpcSources,
		arg1: GetSlotRpcConfig | null,
		arg2: GetSlotParams | null
	): Promise<MultiGetSlotResult> {
		const result = await this.actor.getSlot(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n178(arg1),
			to_candid_opt_n181(arg2)
		);
		return from_candid_MultiGetSlotResult_n184(result);
	}
	async getSlotCyclesCost(
		arg0: RpcSources,
		arg1: GetSlotRpcConfig | null,
		arg2: GetSlotParams | null
	): Promise<RequestCostResult> {
		const result = await this.actor.getSlotCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n178(arg1),
			to_candid_opt_n181(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async getTokenAccountBalance(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetTokenAccountBalanceParams
	): Promise<MultiGetTokenAccountBalanceResult> {
		const result = await this.actor.getTokenAccountBalance(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetTokenAccountBalanceParams_n190(arg2)
		);
		return from_candid_MultiGetTokenAccountBalanceResult_n192(result);
	}
	async getTokenAccountBalanceCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetTokenAccountBalanceParams
	): Promise<RequestCostResult> {
		const result = await this.actor.getTokenAccountBalanceCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetTokenAccountBalanceParams_n190(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async getTransaction(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetTransactionParams
	): Promise<MultiGetTransactionResult> {
		const result = await this.actor.getTransaction(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetTransactionParams_n198(arg2)
		);
		return from_candid_MultiGetTransactionResult_n201(result);
	}
	async getTransactionCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: GetTransactionParams
	): Promise<RequestCostResult> {
		const result = await this.actor.getTransactionCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_GetTransactionParams_n198(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async jsonRequest(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: string
	): Promise<MultiRequestResult> {
		const result = await this.actor.jsonRequest(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			arg2
		);
		return from_candid_MultiRequestResult_n210(result);
	}
	async jsonRequestCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: string
	): Promise<RequestCostResult> {
		const result = await this.actor.jsonRequestCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			arg2
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async sendTransaction(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: SendTransactionParams
	): Promise<MultiSendTransactionResult> {
		const result = await this.actor.sendTransaction(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_SendTransactionParams_n216(arg2)
		);
		return from_candid_MultiSendTransactionResult_n219(result);
	}
	async sendTransactionCyclesCost(
		arg0: RpcSources,
		arg1: RpcConfig | null,
		arg2: SendTransactionParams
	): Promise<RequestCostResult> {
		const result = await this.actor.sendTransactionCyclesCost(
			to_candid_RpcSources_n1(arg0),
			to_candid_opt_n12(arg1),
			to_candid_SendTransactionParams_n216(arg2)
		);
		return from_candid_RequestCostResult_n56(result);
	}
	async updateApiKeys(arg0: Array<[SupportedProvider, string | null]>): Promise<void> {
		const result = await this.actor.updateApiKeys(to_candid_vec_n225(arg0));
		return result;
	}
}
function from_candid_AccountData_n31(value: _AccountData): AccountData {
	return from_candid_variant_n32(value);
}
function from_candid_AccountEncoding_n34(value: _AccountEncoding): AccountEncoding {
	return from_candid_variant_n35(value);
}
function from_candid_AccountInfo_n29(value: _AccountInfo): AccountInfo {
	return from_candid_record_n30(value);
}
function from_candid_CompiledInstruction_n116(value: _CompiledInstruction): CompiledInstruction {
	return from_candid_record_n117(value);
}
function from_candid_ConfirmedBlock_n76(value: _ConfirmedBlock): ConfirmedBlock {
	return from_candid_record_n77(value);
}
function from_candid_ConfirmedTransactionStatusWithSignature_n174(
	value: _ConfirmedTransactionStatusWithSignature
): ConfirmedTransactionStatusWithSignature {
	return from_candid_record_n175(value);
}
function from_candid_EncodedConfirmedTransactionWithStatusMeta_n206(
	value: _EncodedConfirmedTransactionWithStatusMeta
): EncodedConfirmedTransactionWithStatusMeta {
	return from_candid_record_n207(value);
}
function from_candid_EncodedTransactionWithStatusMeta_n90(
	value: _EncodedTransactionWithStatusMeta
): EncodedTransactionWithStatusMeta {
	return from_candid_record_n91(value);
}
function from_candid_EncodedTransaction_n122(value: _EncodedTransaction): EncodedTransaction {
	return from_candid_variant_n123(value);
}
function from_candid_GetAccountInfoResult_n26(value: _GetAccountInfoResult): GetAccountInfoResult {
	return from_candid_variant_n27(value);
}
function from_candid_GetBalanceResult_n62(value: _GetBalanceResult): GetBalanceResult {
	return from_candid_variant_n63(value);
}
function from_candid_GetBlockResult_n73(value: _GetBlockResult): GetBlockResult {
	return from_candid_variant_n74(value);
}
function from_candid_GetRecentPrioritizationFeesResult_n147(
	value: _GetRecentPrioritizationFeesResult
): GetRecentPrioritizationFeesResult {
	return from_candid_variant_n148(value);
}
function from_candid_GetSignatureStatusesResult_n155(
	value: _GetSignatureStatusesResult
): GetSignatureStatusesResult {
	return from_candid_variant_n156(value);
}
function from_candid_GetSignaturesForAddressResult_n171(
	value: _GetSignaturesForAddressResult
): GetSignaturesForAddressResult {
	return from_candid_variant_n172(value);
}
function from_candid_GetSlotResult_n186(value: _GetSlotResult): GetSlotResult {
	return from_candid_variant_n187(value);
}
function from_candid_GetTokenAccountBalanceResult_n194(
	value: _GetTokenAccountBalanceResult
): GetTokenAccountBalanceResult {
	return from_candid_variant_n195(value);
}
function from_candid_GetTransactionResult_n203(value: _GetTransactionResult): GetTransactionResult {
	return from_candid_variant_n204(value);
}
function from_candid_HttpOutcallError_n40(value: _HttpOutcallError): HttpOutcallError {
	return from_candid_variant_n41(value);
}
function from_candid_InnerInstructions_n111(value: _InnerInstructions): InnerInstructions {
	return from_candid_record_n112(value);
}
function from_candid_InstructionError_n99(value: _InstructionError): InstructionError {
	return from_candid_variant_n100(value);
}
function from_candid_Instruction_n114(value: _Instruction): Instruction {
	return from_candid_variant_n115(value);
}
function from_candid_MultiGetAccountInfoResult_n24(
	value: _MultiGetAccountInfoResult
): MultiGetAccountInfoResult {
	return from_candid_variant_n25(value);
}
function from_candid_MultiGetBalanceResult_n60(
	value: _MultiGetBalanceResult
): MultiGetBalanceResult {
	return from_candid_variant_n61(value);
}
function from_candid_MultiGetBlockResult_n71(value: _MultiGetBlockResult): MultiGetBlockResult {
	return from_candid_variant_n72(value);
}
function from_candid_MultiGetRecentPrioritizationFeesResult_n145(
	value: _MultiGetRecentPrioritizationFeesResult
): MultiGetRecentPrioritizationFeesResult {
	return from_candid_variant_n146(value);
}
function from_candid_MultiGetSignatureStatusesResult_n153(
	value: _MultiGetSignatureStatusesResult
): MultiGetSignatureStatusesResult {
	return from_candid_variant_n154(value);
}
function from_candid_MultiGetSignaturesForAddressResult_n169(
	value: _MultiGetSignaturesForAddressResult
): MultiGetSignaturesForAddressResult {
	return from_candid_variant_n170(value);
}
function from_candid_MultiGetSlotResult_n184(value: _MultiGetSlotResult): MultiGetSlotResult {
	return from_candid_variant_n185(value);
}
function from_candid_MultiGetTokenAccountBalanceResult_n192(
	value: _MultiGetTokenAccountBalanceResult
): MultiGetTokenAccountBalanceResult {
	return from_candid_variant_n193(value);
}
function from_candid_MultiGetTransactionResult_n201(
	value: _MultiGetTransactionResult
): MultiGetTransactionResult {
	return from_candid_variant_n202(value);
}
function from_candid_MultiRequestResult_n210(value: _MultiRequestResult): MultiRequestResult {
	return from_candid_variant_n211(value);
}
function from_candid_MultiSendTransactionResult_n219(
	value: _MultiSendTransactionResult
): MultiSendTransactionResult {
	return from_candid_variant_n220(value);
}
function from_candid_ProviderError_n38(value: _ProviderError): ProviderError {
	return from_candid_variant_n39(value);
}
function from_candid_RejectionCode_n43(value: _RejectionCode): RejectionCode {
	return from_candid_variant_n44(value);
}
function from_candid_RequestCostResult_n56(value: _RequestCostResult): RequestCostResult {
	return from_candid_variant_n57(value);
}
function from_candid_RequestResult_n212(value: _RequestResult): RequestResult {
	return from_candid_variant_n213(value);
}
function from_candid_Reward_n83(value: _Reward): Reward {
	return from_candid_record_n84(value);
}
function from_candid_RpcAccess_n134(value: _RpcAccess): RpcAccess {
	return from_candid_variant_n135(value);
}
function from_candid_RpcAuth_n137(value: _RpcAuth): RpcAuth {
	return from_candid_variant_n138(value);
}
function from_candid_RpcEndpoint_n51(value: _RpcEndpoint): RpcEndpoint {
	return from_candid_record_n52(value);
}
function from_candid_RpcError_n36(value: _RpcError): RpcError {
	return from_candid_variant_n37(value);
}
function from_candid_RpcProvider_n132(value: _RpcProvider): RpcProvider {
	return from_candid_record_n133(value);
}
function from_candid_RpcSource_n49(value: _RpcSource): RpcSource {
	return from_candid_variant_n50(value);
}
function from_candid_SendTransactionResult_n221(
	value: _SendTransactionResult
): SendTransactionResult {
	return from_candid_variant_n222(value);
}
function from_candid_SolanaCluster_n139(value: _SolanaCluster): SolanaCluster {
	return from_candid_variant_n140(value);
}
function from_candid_SupportedProvider_n54(value: _SupportedProvider): SupportedProvider {
	return from_candid_variant_n55(value);
}
function from_candid_TokenAmount_n105(value: _TokenAmount): TokenAmount {
	return from_candid_record_n106(value);
}
function from_candid_TransactionConfirmationStatus_n163(
	value: _TransactionConfirmationStatus
): TransactionConfirmationStatus {
	return from_candid_variant_n164(value);
}
function from_candid_TransactionError_n96(value: _TransactionError): TransactionError {
	return from_candid_variant_n97(value);
}
function from_candid_TransactionStatusMeta_n93(
	value: _TransactionStatusMeta
): TransactionStatusMeta {
	return from_candid_record_n94(value);
}
function from_candid_TransactionStatus_n159(value: _TransactionStatus): TransactionStatus {
	return from_candid_record_n160(value);
}
function from_candid_TransactionTokenBalance_n103(
	value: _TransactionTokenBalance
): TransactionTokenBalance {
	return from_candid_record_n104(value);
}
function from_candid_opt_n101(
	value: [] | [Array<_TransactionTokenBalance>]
): Array<TransactionTokenBalance> | null {
	return value.length === 0 ? null : from_candid_vec_n102(value[0]);
}
function from_candid_opt_n107(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n108(value: [] | [_Pubkey]): Pubkey | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n109(
	value: [] | [Array<_InnerInstructions>]
): Array<InnerInstructions> | null {
	return value.length === 0 ? null : from_candid_vec_n110(value[0]);
}
function from_candid_opt_n118(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n119(value: [] | [_LoadedAddresses]): LoadedAddresses | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n120(value: [] | [Array<string>]): Array<string> | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n121(
	value:
		| []
		| [
				{
					data: string;
					programId: _Pubkey;
				}
		  ]
): {
	data: string;
	programId: Pubkey;
} | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n126(
	value:
		| []
		| [
				| {
						legacy: null;
				  }
				| {
						number: number;
				  }
		  ]
):
	| {
			__kind__: 'legacy';
			legacy: null;
	  }
	| {
			__kind__: 'number';
			number: number;
	  }
	| null {
	return value.length === 0 ? null : from_candid_variant_n127(value[0]);
}
function from_candid_opt_n158(value: [] | [_TransactionStatus]): TransactionStatus | null {
	return value.length === 0 ? null : from_candid_TransactionStatus_n159(value[0]);
}
function from_candid_opt_n161(value: [] | [_TransactionError]): TransactionError | null {
	return value.length === 0 ? null : from_candid_TransactionError_n96(value[0]);
}
function from_candid_opt_n162(
	value: [] | [_TransactionConfirmationStatus]
): TransactionConfirmationStatus | null {
	return value.length === 0 ? null : from_candid_TransactionConfirmationStatus_n163(value[0]);
}
function from_candid_opt_n205(
	value: [] | [_EncodedConfirmedTransactionWithStatusMeta]
): EncodedConfirmedTransactionWithStatusMeta | null {
	return value.length === 0
		? null
		: from_candid_EncodedConfirmedTransactionWithStatusMeta_n206(value[0]);
}
function from_candid_opt_n28(value: [] | [_AccountInfo]): AccountInfo | null {
	return value.length === 0 ? null : from_candid_AccountInfo_n29(value[0]);
}
function from_candid_opt_n46(value: [] | [string]): string | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n53(value: [] | [Array<_HttpHeader>]): Array<HttpHeader> | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n75(value: [] | [_ConfirmedBlock]): ConfirmedBlock | null {
	return value.length === 0 ? null : from_candid_ConfirmedBlock_n76(value[0]);
}
function from_candid_opt_n78(value: [] | [bigint]): bigint | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n79(value: [] | [_Timestamp]): Timestamp | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n80(value: [] | [Array<_Signature>]): Array<Signature> | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n81(value: [] | [Array<_Reward>]): Array<Reward> | null {
	return value.length === 0 ? null : from_candid_vec_n82(value[0]);
}
function from_candid_opt_n85(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n86(
	value:
		| []
		| [
				| {
						fee: null;
				  }
				| {
						staking: null;
				  }
				| {
						rent: null;
				  }
				| {
						voting: null;
				  }
		  ]
): Variant_fee_staking_rent_voting | null {
	return value.length === 0 ? null : from_candid_variant_n87(value[0]);
}
function from_candid_opt_n88(
	value: [] | [Array<_EncodedTransactionWithStatusMeta>]
): Array<EncodedTransactionWithStatusMeta> | null {
	return value.length === 0 ? null : from_candid_vec_n89(value[0]);
}
function from_candid_opt_n92(value: [] | [_TransactionStatusMeta]): TransactionStatusMeta | null {
	return value.length === 0 ? null : from_candid_TransactionStatusMeta_n93(value[0]);
}
function from_candid_record_n104(value: {
	uiTokenAmount: _TokenAmount;
	owner: [] | [_Pubkey];
	accountIndex: number;
	mint: string;
	programId: [] | [_Pubkey];
}): {
	uiTokenAmount: TokenAmount;
	owner?: Pubkey;
	accountIndex: number;
	mint: string;
	programId?: Pubkey;
} {
	return {
		uiTokenAmount: from_candid_TokenAmount_n105(value.uiTokenAmount),
		owner: record_opt_to_undefined(from_candid_opt_n108(value.owner)),
		accountIndex: value.accountIndex,
		mint: value.mint,
		programId: record_opt_to_undefined(from_candid_opt_n108(value.programId))
	};
}
function from_candid_record_n106(value: {
	decimals: number;
	uiAmount: [] | [number];
	uiAmountString: string;
	amount: string;
}): {
	decimals: number;
	uiAmount?: number;
	uiAmountString: string;
	amount: string;
} {
	return {
		decimals: value.decimals,
		uiAmount: record_opt_to_undefined(from_candid_opt_n107(value.uiAmount)),
		uiAmountString: value.uiAmountString,
		amount: value.amount
	};
}
function from_candid_record_n112(value: { instructions: Array<_Instruction>; index: number }): {
	instructions: Array<Instruction>;
	index: number;
} {
	return {
		instructions: from_candid_vec_n113(value.instructions),
		index: value.index
	};
}
function from_candid_record_n117(value: {
	data: string;
	accounts: Uint8Array;
	programIdIndex: number;
	stackHeight: [] | [number];
}): {
	data: string;
	accounts: Uint8Array;
	programIdIndex: number;
	stackHeight?: number;
} {
	return {
		data: value.data,
		accounts: value.accounts,
		programIdIndex: value.programIdIndex,
		stackHeight: record_opt_to_undefined(from_candid_opt_n118(value.stackHeight))
	};
}
function from_candid_record_n133(value: { access: _RpcAccess; cluster: _SolanaCluster }): {
	access: RpcAccess;
	cluster: SolanaCluster;
} {
	return {
		access: from_candid_RpcAccess_n134(value.access),
		cluster: from_candid_SolanaCluster_n139(value.cluster)
	};
}
function from_candid_record_n136(value: { publicUrl: [] | [string]; auth: _RpcAuth }): {
	publicUrl?: string;
	auth: RpcAuth;
} {
	return {
		publicUrl: record_opt_to_undefined(from_candid_opt_n46(value.publicUrl)),
		auth: from_candid_RpcAuth_n137(value.auth)
	};
}
function from_candid_record_n160(value: {
	err: [] | [_TransactionError];
	status:
		| {
				Ok: null;
		  }
		| {
				Err: _TransactionError;
		  };
	confirmationStatus: [] | [_TransactionConfirmationStatus];
	slot: _Slot;
}): {
	err?: TransactionError;
	status:
		| {
				__kind__: 'Ok';
				Ok: null;
		  }
		| {
				__kind__: 'Err';
				Err: TransactionError;
		  };
	confirmationStatus?: TransactionConfirmationStatus;
	slot: Slot;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n161(value.err)),
		status: from_candid_variant_n95(value.status),
		confirmationStatus: record_opt_to_undefined(from_candid_opt_n162(value.confirmationStatus)),
		slot: value.slot
	};
}
function from_candid_record_n175(value: {
	err: [] | [_TransactionError];
	signature: _Signature;
	confirmationStatus: [] | [_TransactionConfirmationStatus];
	memo: [] | [string];
	slot: _Slot;
	blockTime: [] | [_Timestamp];
}): {
	err?: TransactionError;
	signature: Signature;
	confirmationStatus?: TransactionConfirmationStatus;
	memo?: string;
	slot: Slot;
	blockTime?: Timestamp;
} {
	return {
		err: record_opt_to_undefined(from_candid_opt_n161(value.err)),
		signature: value.signature,
		confirmationStatus: record_opt_to_undefined(from_candid_opt_n162(value.confirmationStatus)),
		memo: record_opt_to_undefined(from_candid_opt_n46(value.memo)),
		slot: value.slot,
		blockTime: record_opt_to_undefined(from_candid_opt_n79(value.blockTime))
	};
}
function from_candid_record_n207(value: {
	transaction: _EncodedTransactionWithStatusMeta;
	slot: _Slot;
	blockTime: [] | [_Timestamp];
}): {
	transaction: EncodedTransactionWithStatusMeta;
	slot: Slot;
	blockTime?: Timestamp;
} {
	return {
		transaction: from_candid_EncodedTransactionWithStatusMeta_n90(value.transaction),
		slot: value.slot,
		blockTime: record_opt_to_undefined(from_candid_opt_n79(value.blockTime))
	};
}
function from_candid_record_n30(value: {
	executable: boolean;
	owner: _Pubkey;
	lamports: bigint;
	data: _AccountData;
	space: bigint;
	rentEpoch: bigint;
}): {
	executable: boolean;
	owner: Pubkey;
	lamports: bigint;
	data: AccountData;
	space: bigint;
	rentEpoch: bigint;
} {
	return {
		executable: value.executable,
		owner: value.owner,
		lamports: value.lamports,
		data: from_candid_AccountData_n31(value.data),
		space: value.space,
		rentEpoch: value.rentEpoch
	};
}
function from_candid_record_n42(value: { code: _RejectionCode; message: string }): {
	code: RejectionCode;
	message: string;
} {
	return {
		code: from_candid_RejectionCode_n43(value.code),
		message: value.message
	};
}
function from_candid_record_n45(value: {
	status: number;
	body: string;
	parsingError: [] | [string];
}): {
	status: number;
	body: string;
	parsingError?: string;
} {
	return {
		status: value.status,
		body: value.body,
		parsingError: record_opt_to_undefined(from_candid_opt_n46(value.parsingError))
	};
}
function from_candid_record_n52(value: { url: string; headers: [] | [Array<_HttpHeader>] }): {
	url: string;
	headers?: Array<HttpHeader>;
} {
	return {
		url: value.url,
		headers: record_opt_to_undefined(from_candid_opt_n53(value.headers))
	};
}
function from_candid_record_n77(value: {
	numRewardPartition: [] | [bigint];
	blockTime: [] | [_Timestamp];
	blockhash: _Hash;
	blockHeight: [] | [bigint];
	signatures: [] | [Array<_Signature>];
	rewards: [] | [Array<_Reward>];
	transactions: [] | [Array<_EncodedTransactionWithStatusMeta>];
	previousBlockhash: _Hash;
	parentSlot: _Slot;
}): {
	numRewardPartition?: bigint;
	blockTime?: Timestamp;
	blockhash: Hash;
	blockHeight?: bigint;
	signatures?: Array<Signature>;
	rewards?: Array<Reward>;
	transactions?: Array<EncodedTransactionWithStatusMeta>;
	previousBlockhash: Hash;
	parentSlot: Slot;
} {
	return {
		numRewardPartition: record_opt_to_undefined(from_candid_opt_n78(value.numRewardPartition)),
		blockTime: record_opt_to_undefined(from_candid_opt_n79(value.blockTime)),
		blockhash: value.blockhash,
		blockHeight: record_opt_to_undefined(from_candid_opt_n78(value.blockHeight)),
		signatures: record_opt_to_undefined(from_candid_opt_n80(value.signatures)),
		rewards: record_opt_to_undefined(from_candid_opt_n81(value.rewards)),
		transactions: record_opt_to_undefined(from_candid_opt_n88(value.transactions)),
		previousBlockhash: value.previousBlockhash,
		parentSlot: value.parentSlot
	};
}
function from_candid_record_n84(value: {
	lamports: bigint;
	postBalance: bigint;
	commission: [] | [number];
	pubkey: _Pubkey;
	rewardType:
		| []
		| [
				| {
						fee: null;
				  }
				| {
						staking: null;
				  }
				| {
						rent: null;
				  }
				| {
						voting: null;
				  }
		  ];
}): {
	lamports: bigint;
	postBalance: bigint;
	commission?: number;
	pubkey: Pubkey;
	rewardType?: Variant_fee_staking_rent_voting;
} {
	return {
		lamports: value.lamports,
		postBalance: value.postBalance,
		commission: record_opt_to_undefined(from_candid_opt_n85(value.commission)),
		pubkey: value.pubkey,
		rewardType: record_opt_to_undefined(from_candid_opt_n86(value.rewardType))
	};
}
function from_candid_record_n91(value: {
	meta: [] | [_TransactionStatusMeta];
	transaction: _EncodedTransaction;
	version:
		| []
		| [
				| {
						legacy: null;
				  }
				| {
						number: number;
				  }
		  ];
}): {
	meta?: TransactionStatusMeta;
	transaction: EncodedTransaction;
	version?:
		| {
				__kind__: 'legacy';
				legacy: null;
		  }
		| {
				__kind__: 'number';
				number: number;
		  };
} {
	return {
		meta: record_opt_to_undefined(from_candid_opt_n92(value.meta)),
		transaction: from_candid_EncodedTransaction_n122(value.transaction),
		version: record_opt_to_undefined(from_candid_opt_n126(value.version))
	};
}
function from_candid_record_n94(value: {
	fee: bigint;
	status:
		| {
				Ok: null;
		  }
		| {
				Err: _TransactionError;
		  };
	preBalances: BigUint64Array;
	postTokenBalances: [] | [Array<_TransactionTokenBalance>];
	innerInstructions: [] | [Array<_InnerInstructions>];
	postBalances: BigUint64Array;
	loadedAddresses: [] | [_LoadedAddresses];
	rewards: [] | [Array<_Reward>];
	logMessages: [] | [Array<string>];
	returnData:
		| []
		| [
				{
					data: string;
					programId: _Pubkey;
				}
		  ];
	preTokenBalances: [] | [Array<_TransactionTokenBalance>];
	computeUnitsConsumed: [] | [bigint];
}): {
	fee: bigint;
	status:
		| {
				__kind__: 'Ok';
				Ok: null;
		  }
		| {
				__kind__: 'Err';
				Err: TransactionError;
		  };
	preBalances: BigUint64Array;
	postTokenBalances?: Array<TransactionTokenBalance>;
	innerInstructions?: Array<InnerInstructions>;
	postBalances: BigUint64Array;
	loadedAddresses?: LoadedAddresses;
	rewards?: Array<Reward>;
	logMessages?: Array<string>;
	returnData?: {
		data: string;
		programId: Pubkey;
	};
	preTokenBalances?: Array<TransactionTokenBalance>;
	computeUnitsConsumed?: bigint;
} {
	return {
		fee: value.fee,
		status: from_candid_variant_n95(value.status),
		preBalances: value.preBalances,
		postTokenBalances: record_opt_to_undefined(from_candid_opt_n101(value.postTokenBalances)),
		innerInstructions: record_opt_to_undefined(from_candid_opt_n109(value.innerInstructions)),
		postBalances: value.postBalances,
		loadedAddresses: record_opt_to_undefined(from_candid_opt_n119(value.loadedAddresses)),
		rewards: record_opt_to_undefined(from_candid_opt_n81(value.rewards)),
		logMessages: record_opt_to_undefined(from_candid_opt_n120(value.logMessages)),
		returnData: record_opt_to_undefined(from_candid_opt_n121(value.returnData)),
		preTokenBalances: record_opt_to_undefined(from_candid_opt_n101(value.preTokenBalances)),
		computeUnitsConsumed: record_opt_to_undefined(from_candid_opt_n78(value.computeUnitsConsumed))
	};
}
function from_candid_tuple_n124(
	value: [
		string,
		(
			| {
					base58: null;
			  }
			| {
					base64: null;
			  }
		)
	]
): [string, Variant_base58_base64] {
	return [value[0], from_candid_variant_n125(value[1])];
}
function from_candid_tuple_n129(value: [_RpcSource, _GetBlockResult]): [RpcSource, GetBlockResult] {
	return [from_candid_RpcSource_n49(value[0]), from_candid_GetBlockResult_n73(value[1])];
}
function from_candid_tuple_n131(
	value: [_SupportedProvider, _RpcProvider]
): [SupportedProvider, RpcProvider] {
	return [from_candid_SupportedProvider_n54(value[0]), from_candid_RpcProvider_n132(value[1])];
}
function from_candid_tuple_n150(
	value: [_RpcSource, _GetRecentPrioritizationFeesResult]
): [RpcSource, GetRecentPrioritizationFeesResult] {
	return [
		from_candid_RpcSource_n49(value[0]),
		from_candid_GetRecentPrioritizationFeesResult_n147(value[1])
	];
}
function from_candid_tuple_n166(
	value: [_RpcSource, _GetSignatureStatusesResult]
): [RpcSource, GetSignatureStatusesResult] {
	return [
		from_candid_RpcSource_n49(value[0]),
		from_candid_GetSignatureStatusesResult_n155(value[1])
	];
}
function from_candid_tuple_n177(
	value: [_RpcSource, _GetSignaturesForAddressResult]
): [RpcSource, GetSignaturesForAddressResult] {
	return [
		from_candid_RpcSource_n49(value[0]),
		from_candid_GetSignaturesForAddressResult_n171(value[1])
	];
}
function from_candid_tuple_n189(value: [_RpcSource, _GetSlotResult]): [RpcSource, GetSlotResult] {
	return [from_candid_RpcSource_n49(value[0]), from_candid_GetSlotResult_n186(value[1])];
}
function from_candid_tuple_n197(
	value: [_RpcSource, _GetTokenAccountBalanceResult]
): [RpcSource, GetTokenAccountBalanceResult] {
	return [
		from_candid_RpcSource_n49(value[0]),
		from_candid_GetTokenAccountBalanceResult_n194(value[1])
	];
}
function from_candid_tuple_n209(
	value: [_RpcSource, _GetTransactionResult]
): [RpcSource, GetTransactionResult] {
	return [from_candid_RpcSource_n49(value[0]), from_candid_GetTransactionResult_n203(value[1])];
}
function from_candid_tuple_n215(value: [_RpcSource, _RequestResult]): [RpcSource, RequestResult] {
	return [from_candid_RpcSource_n49(value[0]), from_candid_RequestResult_n212(value[1])];
}
function from_candid_tuple_n224(
	value: [_RpcSource, _SendTransactionResult]
): [RpcSource, SendTransactionResult] {
	return [from_candid_RpcSource_n49(value[0]), from_candid_SendTransactionResult_n221(value[1])];
}
function from_candid_tuple_n33(value: [string, _AccountEncoding]): [string, AccountEncoding] {
	return [value[0], from_candid_AccountEncoding_n34(value[1])];
}
function from_candid_tuple_n48(
	value: [_RpcSource, _GetAccountInfoResult]
): [RpcSource, GetAccountInfoResult] {
	return [from_candid_RpcSource_n49(value[0]), from_candid_GetAccountInfoResult_n26(value[1])];
}
function from_candid_tuple_n65(
	value: [_RpcSource, _GetBalanceResult]
): [RpcSource, GetBalanceResult] {
	return [from_candid_RpcSource_n49(value[0]), from_candid_GetBalanceResult_n62(value[1])];
}
function from_candid_tuple_n98(value: [number, _InstructionError]): [number, InstructionError] {
	return [value[0], from_candid_InstructionError_n99(value[1])];
}
function from_candid_variant_n100(
	value:
		| {
				ModifiedProgramId: null;
		  }
		| {
				CallDepth: null;
		  }
		| {
				Immutable: null;
		  }
		| {
				GenericError: null;
		  }
		| {
				ExecutableAccountNotRentExempt: null;
		  }
		| {
				IncorrectAuthority: null;
		  }
		| {
				PrivilegeEscalation: null;
		  }
		| {
				ReentrancyNotAllowed: null;
		  }
		| {
				InvalidInstructionData: null;
		  }
		| {
				RentEpochModified: null;
		  }
		| {
				IllegalOwner: null;
		  }
		| {
				ComputationalBudgetExceeded: null;
		  }
		| {
				ExecutableDataModified: null;
		  }
		| {
				ExecutableLamportChange: null;
		  }
		| {
				UnbalancedInstruction: null;
		  }
		| {
				ProgramEnvironmentSetupFailure: null;
		  }
		| {
				IncorrectProgramId: null;
		  }
		| {
				UnsupportedSysvar: null;
		  }
		| {
				UnsupportedProgramId: null;
		  }
		| {
				AccountDataTooSmall: null;
		  }
		| {
				NotEnoughAccountKeys: null;
		  }
		| {
				AccountBorrowFailed: null;
		  }
		| {
				InvalidRealloc: null;
		  }
		| {
				AccountNotExecutable: null;
		  }
		| {
				AccountNotRentExempt: null;
		  }
		| {
				Custom: number;
		  }
		| {
				AccountDataSizeChanged: null;
		  }
		| {
				MaxAccountsDataAllocationsExceeded: null;
		  }
		| {
				ExternalAccountLamportSpend: null;
		  }
		| {
				ExternalAccountDataModified: null;
		  }
		| {
				MissingAccount: null;
		  }
		| {
				ProgramFailedToComplete: null;
		  }
		| {
				MaxInstructionTraceLengthExceeded: null;
		  }
		| {
				InvalidAccountData: null;
		  }
		| {
				ProgramFailedToCompile: null;
		  }
		| {
				ExecutableModified: null;
		  }
		| {
				InvalidAccountOwner: null;
		  }
		| {
				MaxSeedLengthExceeded: null;
		  }
		| {
				AccountAlreadyInitialized: null;
		  }
		| {
				AccountBorrowOutstanding: null;
		  }
		| {
				ReadonlyDataModified: null;
		  }
		| {
				UninitializedAccount: null;
		  }
		| {
				InvalidArgument: null;
		  }
		| {
				BorshIoError: string;
		  }
		| {
				BuiltinProgramsMustConsumeComputeUnits: null;
		  }
		| {
				MissingRequiredSignature: null;
		  }
		| {
				DuplicateAccountOutOfSync: null;
		  }
		| {
				MaxAccountsExceeded: null;
		  }
		| {
				ArithmeticOverflow: null;
		  }
		| {
				InvalidError: null;
		  }
		| {
				InvalidSeeds: null;
		  }
		| {
				DuplicateAccountIndex: null;
		  }
		| {
				ReadonlyLamportChange: null;
		  }
		| {
				InsufficientFunds: null;
		  }
):
	| {
			__kind__: 'ModifiedProgramId';
			ModifiedProgramId: null;
	  }
	| {
			__kind__: 'CallDepth';
			CallDepth: null;
	  }
	| {
			__kind__: 'Immutable';
			Immutable: null;
	  }
	| {
			__kind__: 'GenericError';
			GenericError: null;
	  }
	| {
			__kind__: 'ExecutableAccountNotRentExempt';
			ExecutableAccountNotRentExempt: null;
	  }
	| {
			__kind__: 'IncorrectAuthority';
			IncorrectAuthority: null;
	  }
	| {
			__kind__: 'PrivilegeEscalation';
			PrivilegeEscalation: null;
	  }
	| {
			__kind__: 'ReentrancyNotAllowed';
			ReentrancyNotAllowed: null;
	  }
	| {
			__kind__: 'InvalidInstructionData';
			InvalidInstructionData: null;
	  }
	| {
			__kind__: 'RentEpochModified';
			RentEpochModified: null;
	  }
	| {
			__kind__: 'IllegalOwner';
			IllegalOwner: null;
	  }
	| {
			__kind__: 'ComputationalBudgetExceeded';
			ComputationalBudgetExceeded: null;
	  }
	| {
			__kind__: 'ExecutableDataModified';
			ExecutableDataModified: null;
	  }
	| {
			__kind__: 'ExecutableLamportChange';
			ExecutableLamportChange: null;
	  }
	| {
			__kind__: 'UnbalancedInstruction';
			UnbalancedInstruction: null;
	  }
	| {
			__kind__: 'ProgramEnvironmentSetupFailure';
			ProgramEnvironmentSetupFailure: null;
	  }
	| {
			__kind__: 'IncorrectProgramId';
			IncorrectProgramId: null;
	  }
	| {
			__kind__: 'UnsupportedSysvar';
			UnsupportedSysvar: null;
	  }
	| {
			__kind__: 'UnsupportedProgramId';
			UnsupportedProgramId: null;
	  }
	| {
			__kind__: 'AccountDataTooSmall';
			AccountDataTooSmall: null;
	  }
	| {
			__kind__: 'NotEnoughAccountKeys';
			NotEnoughAccountKeys: null;
	  }
	| {
			__kind__: 'AccountBorrowFailed';
			AccountBorrowFailed: null;
	  }
	| {
			__kind__: 'InvalidRealloc';
			InvalidRealloc: null;
	  }
	| {
			__kind__: 'AccountNotExecutable';
			AccountNotExecutable: null;
	  }
	| {
			__kind__: 'AccountNotRentExempt';
			AccountNotRentExempt: null;
	  }
	| {
			__kind__: 'Custom';
			Custom: number;
	  }
	| {
			__kind__: 'AccountDataSizeChanged';
			AccountDataSizeChanged: null;
	  }
	| {
			__kind__: 'MaxAccountsDataAllocationsExceeded';
			MaxAccountsDataAllocationsExceeded: null;
	  }
	| {
			__kind__: 'ExternalAccountLamportSpend';
			ExternalAccountLamportSpend: null;
	  }
	| {
			__kind__: 'ExternalAccountDataModified';
			ExternalAccountDataModified: null;
	  }
	| {
			__kind__: 'MissingAccount';
			MissingAccount: null;
	  }
	| {
			__kind__: 'ProgramFailedToComplete';
			ProgramFailedToComplete: null;
	  }
	| {
			__kind__: 'MaxInstructionTraceLengthExceeded';
			MaxInstructionTraceLengthExceeded: null;
	  }
	| {
			__kind__: 'InvalidAccountData';
			InvalidAccountData: null;
	  }
	| {
			__kind__: 'ProgramFailedToCompile';
			ProgramFailedToCompile: null;
	  }
	| {
			__kind__: 'ExecutableModified';
			ExecutableModified: null;
	  }
	| {
			__kind__: 'InvalidAccountOwner';
			InvalidAccountOwner: null;
	  }
	| {
			__kind__: 'MaxSeedLengthExceeded';
			MaxSeedLengthExceeded: null;
	  }
	| {
			__kind__: 'AccountAlreadyInitialized';
			AccountAlreadyInitialized: null;
	  }
	| {
			__kind__: 'AccountBorrowOutstanding';
			AccountBorrowOutstanding: null;
	  }
	| {
			__kind__: 'ReadonlyDataModified';
			ReadonlyDataModified: null;
	  }
	| {
			__kind__: 'UninitializedAccount';
			UninitializedAccount: null;
	  }
	| {
			__kind__: 'InvalidArgument';
			InvalidArgument: null;
	  }
	| {
			__kind__: 'BorshIoError';
			BorshIoError: string;
	  }
	| {
			__kind__: 'BuiltinProgramsMustConsumeComputeUnits';
			BuiltinProgramsMustConsumeComputeUnits: null;
	  }
	| {
			__kind__: 'MissingRequiredSignature';
			MissingRequiredSignature: null;
	  }
	| {
			__kind__: 'DuplicateAccountOutOfSync';
			DuplicateAccountOutOfSync: null;
	  }
	| {
			__kind__: 'MaxAccountsExceeded';
			MaxAccountsExceeded: null;
	  }
	| {
			__kind__: 'ArithmeticOverflow';
			ArithmeticOverflow: null;
	  }
	| {
			__kind__: 'InvalidError';
			InvalidError: null;
	  }
	| {
			__kind__: 'InvalidSeeds';
			InvalidSeeds: null;
	  }
	| {
			__kind__: 'DuplicateAccountIndex';
			DuplicateAccountIndex: null;
	  }
	| {
			__kind__: 'ReadonlyLamportChange';
			ReadonlyLamportChange: null;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: null;
	  } {
	return 'ModifiedProgramId' in value
		? {
				__kind__: 'ModifiedProgramId',
				ModifiedProgramId: value.ModifiedProgramId
			}
		: 'CallDepth' in value
			? {
					__kind__: 'CallDepth',
					CallDepth: value.CallDepth
				}
			: 'Immutable' in value
				? {
						__kind__: 'Immutable',
						Immutable: value.Immutable
					}
				: 'GenericError' in value
					? {
							__kind__: 'GenericError',
							GenericError: value.GenericError
						}
					: 'ExecutableAccountNotRentExempt' in value
						? {
								__kind__: 'ExecutableAccountNotRentExempt',
								ExecutableAccountNotRentExempt: value.ExecutableAccountNotRentExempt
							}
						: 'IncorrectAuthority' in value
							? {
									__kind__: 'IncorrectAuthority',
									IncorrectAuthority: value.IncorrectAuthority
								}
							: 'PrivilegeEscalation' in value
								? {
										__kind__: 'PrivilegeEscalation',
										PrivilegeEscalation: value.PrivilegeEscalation
									}
								: 'ReentrancyNotAllowed' in value
									? {
											__kind__: 'ReentrancyNotAllowed',
											ReentrancyNotAllowed: value.ReentrancyNotAllowed
										}
									: 'InvalidInstructionData' in value
										? {
												__kind__: 'InvalidInstructionData',
												InvalidInstructionData: value.InvalidInstructionData
											}
										: 'RentEpochModified' in value
											? {
													__kind__: 'RentEpochModified',
													RentEpochModified: value.RentEpochModified
												}
											: 'IllegalOwner' in value
												? {
														__kind__: 'IllegalOwner',
														IllegalOwner: value.IllegalOwner
													}
												: 'ComputationalBudgetExceeded' in value
													? {
															__kind__: 'ComputationalBudgetExceeded',
															ComputationalBudgetExceeded: value.ComputationalBudgetExceeded
														}
													: 'ExecutableDataModified' in value
														? {
																__kind__: 'ExecutableDataModified',
																ExecutableDataModified: value.ExecutableDataModified
															}
														: 'ExecutableLamportChange' in value
															? {
																	__kind__: 'ExecutableLamportChange',
																	ExecutableLamportChange: value.ExecutableLamportChange
																}
															: 'UnbalancedInstruction' in value
																? {
																		__kind__: 'UnbalancedInstruction',
																		UnbalancedInstruction: value.UnbalancedInstruction
																	}
																: 'ProgramEnvironmentSetupFailure' in value
																	? {
																			__kind__: 'ProgramEnvironmentSetupFailure',
																			ProgramEnvironmentSetupFailure:
																				value.ProgramEnvironmentSetupFailure
																		}
																	: 'IncorrectProgramId' in value
																		? {
																				__kind__: 'IncorrectProgramId',
																				IncorrectProgramId: value.IncorrectProgramId
																			}
																		: 'UnsupportedSysvar' in value
																			? {
																					__kind__: 'UnsupportedSysvar',
																					UnsupportedSysvar: value.UnsupportedSysvar
																				}
																			: 'UnsupportedProgramId' in value
																				? {
																						__kind__: 'UnsupportedProgramId',
																						UnsupportedProgramId: value.UnsupportedProgramId
																					}
																				: 'AccountDataTooSmall' in value
																					? {
																							__kind__: 'AccountDataTooSmall',
																							AccountDataTooSmall: value.AccountDataTooSmall
																						}
																					: 'NotEnoughAccountKeys' in value
																						? {
																								__kind__: 'NotEnoughAccountKeys',
																								NotEnoughAccountKeys: value.NotEnoughAccountKeys
																							}
																						: 'AccountBorrowFailed' in value
																							? {
																									__kind__: 'AccountBorrowFailed',
																									AccountBorrowFailed: value.AccountBorrowFailed
																								}
																							: 'InvalidRealloc' in value
																								? {
																										__kind__: 'InvalidRealloc',
																										InvalidRealloc: value.InvalidRealloc
																									}
																								: 'AccountNotExecutable' in value
																									? {
																											__kind__: 'AccountNotExecutable',
																											AccountNotExecutable:
																												value.AccountNotExecutable
																										}
																									: 'AccountNotRentExempt' in value
																										? {
																												__kind__: 'AccountNotRentExempt',
																												AccountNotRentExempt:
																													value.AccountNotRentExempt
																											}
																										: 'Custom' in value
																											? {
																													__kind__: 'Custom',
																													Custom: value.Custom
																												}
																											: 'AccountDataSizeChanged' in value
																												? {
																														__kind__: 'AccountDataSizeChanged',
																														AccountDataSizeChanged:
																															value.AccountDataSizeChanged
																													}
																												: 'MaxAccountsDataAllocationsExceeded' in
																													  value
																													? {
																															__kind__:
																																'MaxAccountsDataAllocationsExceeded',
																															MaxAccountsDataAllocationsExceeded:
																																value.MaxAccountsDataAllocationsExceeded
																														}
																													: 'ExternalAccountLamportSpend' in value
																														? {
																																__kind__:
																																	'ExternalAccountLamportSpend',
																																ExternalAccountLamportSpend:
																																	value.ExternalAccountLamportSpend
																															}
																														: 'ExternalAccountDataModified' in value
																															? {
																																	__kind__:
																																		'ExternalAccountDataModified',
																																	ExternalAccountDataModified:
																																		value.ExternalAccountDataModified
																																}
																															: 'MissingAccount' in value
																																? {
																																		__kind__: 'MissingAccount',
																																		MissingAccount:
																																			value.MissingAccount
																																	}
																																: 'ProgramFailedToComplete' in value
																																	? {
																																			__kind__:
																																				'ProgramFailedToComplete',
																																			ProgramFailedToComplete:
																																				value.ProgramFailedToComplete
																																		}
																																	: 'MaxInstructionTraceLengthExceeded' in
																																		  value
																																		? {
																																				__kind__:
																																					'MaxInstructionTraceLengthExceeded',
																																				MaxInstructionTraceLengthExceeded:
																																					value.MaxInstructionTraceLengthExceeded
																																			}
																																		: 'InvalidAccountData' in value
																																			? {
																																					__kind__:
																																						'InvalidAccountData',
																																					InvalidAccountData:
																																						value.InvalidAccountData
																																				}
																																			: 'ProgramFailedToCompile' in
																																				  value
																																				? {
																																						__kind__:
																																							'ProgramFailedToCompile',
																																						ProgramFailedToCompile:
																																							value.ProgramFailedToCompile
																																					}
																																				: 'ExecutableModified' in
																																					  value
																																					? {
																																							__kind__:
																																								'ExecutableModified',
																																							ExecutableModified:
																																								value.ExecutableModified
																																						}
																																					: 'InvalidAccountOwner' in
																																						  value
																																						? {
																																								__kind__:
																																									'InvalidAccountOwner',
																																								InvalidAccountOwner:
																																									value.InvalidAccountOwner
																																							}
																																						: 'MaxSeedLengthExceeded' in
																																							  value
																																							? {
																																									__kind__:
																																										'MaxSeedLengthExceeded',
																																									MaxSeedLengthExceeded:
																																										value.MaxSeedLengthExceeded
																																								}
																																							: 'AccountAlreadyInitialized' in
																																								  value
																																								? {
																																										__kind__:
																																											'AccountAlreadyInitialized',
																																										AccountAlreadyInitialized:
																																											value.AccountAlreadyInitialized
																																									}
																																								: 'AccountBorrowOutstanding' in
																																									  value
																																									? {
																																											__kind__:
																																												'AccountBorrowOutstanding',
																																											AccountBorrowOutstanding:
																																												value.AccountBorrowOutstanding
																																										}
																																									: 'ReadonlyDataModified' in
																																										  value
																																										? {
																																												__kind__:
																																													'ReadonlyDataModified',
																																												ReadonlyDataModified:
																																													value.ReadonlyDataModified
																																											}
																																										: 'UninitializedAccount' in
																																											  value
																																											? {
																																													__kind__:
																																														'UninitializedAccount',
																																													UninitializedAccount:
																																														value.UninitializedAccount
																																												}
																																											: 'InvalidArgument' in
																																												  value
																																												? {
																																														__kind__:
																																															'InvalidArgument',
																																														InvalidArgument:
																																															value.InvalidArgument
																																													}
																																												: 'BorshIoError' in
																																													  value
																																													? {
																																															__kind__:
																																																'BorshIoError',
																																															BorshIoError:
																																																value.BorshIoError
																																														}
																																													: 'BuiltinProgramsMustConsumeComputeUnits' in
																																														  value
																																														? {
																																																__kind__:
																																																	'BuiltinProgramsMustConsumeComputeUnits',
																																																BuiltinProgramsMustConsumeComputeUnits:
																																																	value.BuiltinProgramsMustConsumeComputeUnits
																																															}
																																														: 'MissingRequiredSignature' in
																																															  value
																																															? {
																																																	__kind__:
																																																		'MissingRequiredSignature',
																																																	MissingRequiredSignature:
																																																		value.MissingRequiredSignature
																																																}
																																															: 'DuplicateAccountOutOfSync' in
																																																  value
																																																? {
																																																		__kind__:
																																																			'DuplicateAccountOutOfSync',
																																																		DuplicateAccountOutOfSync:
																																																			value.DuplicateAccountOutOfSync
																																																	}
																																																: 'MaxAccountsExceeded' in
																																																	  value
																																																	? {
																																																			__kind__:
																																																				'MaxAccountsExceeded',
																																																			MaxAccountsExceeded:
																																																				value.MaxAccountsExceeded
																																																		}
																																																	: 'ArithmeticOverflow' in
																																																		  value
																																																		? {
																																																				__kind__:
																																																					'ArithmeticOverflow',
																																																				ArithmeticOverflow:
																																																					value.ArithmeticOverflow
																																																			}
																																																		: 'InvalidError' in
																																																			  value
																																																			? {
																																																					__kind__:
																																																						'InvalidError',
																																																					InvalidError:
																																																						value.InvalidError
																																																				}
																																																			: 'InvalidSeeds' in
																																																				  value
																																																				? {
																																																						__kind__:
																																																							'InvalidSeeds',
																																																						InvalidSeeds:
																																																							value.InvalidSeeds
																																																					}
																																																				: 'DuplicateAccountIndex' in
																																																					  value
																																																					? {
																																																							__kind__:
																																																								'DuplicateAccountIndex',
																																																							DuplicateAccountIndex:
																																																								value.DuplicateAccountIndex
																																																						}
																																																					: 'ReadonlyLamportChange' in
																																																						  value
																																																						? {
																																																								__kind__:
																																																									'ReadonlyLamportChange',
																																																								ReadonlyLamportChange:
																																																									value.ReadonlyLamportChange
																																																							}
																																																						: 'InsufficientFunds' in
																																																							  value
																																																							? {
																																																									__kind__:
																																																										'InsufficientFunds',
																																																									InsufficientFunds:
																																																										value.InsufficientFunds
																																																								}
																																																							: value;
}
function from_candid_variant_n115(value: { compiled: _CompiledInstruction }): {
	__kind__: 'compiled';
	compiled: CompiledInstruction;
} {
	return 'compiled' in value
		? {
				__kind__: 'compiled',
				compiled: from_candid_CompiledInstruction_n116(value.compiled)
			}
		: value;
}
function from_candid_variant_n123(
	value:
		| {
				legacyBinary: string;
		  }
		| {
				binary: [
					string,
					(
						| {
								base58: null;
						  }
						| {
								base64: null;
						  }
					)
				];
		  }
):
	| {
			__kind__: 'legacyBinary';
			legacyBinary: string;
	  }
	| {
			__kind__: 'binary';
			binary: [string, Variant_base58_base64];
	  } {
	return 'legacyBinary' in value
		? {
				__kind__: 'legacyBinary',
				legacyBinary: value.legacyBinary
			}
		: 'binary' in value
			? {
					__kind__: 'binary',
					binary: from_candid_tuple_n124(value.binary)
				}
			: value;
}
function from_candid_variant_n125(
	value:
		| {
				base58: null;
		  }
		| {
				base64: null;
		  }
): Variant_base58_base64 {
	return 'base58' in value
		? Variant_base58_base64.base58
		: 'base64' in value
			? Variant_base58_base64.base64
			: value;
}
function from_candid_variant_n127(
	value:
		| {
				legacy: null;
		  }
		| {
				number: number;
		  }
):
	| {
			__kind__: 'legacy';
			legacy: null;
	  }
	| {
			__kind__: 'number';
			number: number;
	  } {
	return 'legacy' in value
		? {
				__kind__: 'legacy',
				legacy: value.legacy
			}
		: 'number' in value
			? {
					__kind__: 'number',
					number: value.number
				}
			: value;
}
function from_candid_variant_n135(
	value:
		| {
				Authenticated: {
					publicUrl: [] | [string];
					auth: _RpcAuth;
				};
		  }
		| {
				Unauthenticated: {
					publicUrl: string;
				};
		  }
):
	| {
			__kind__: 'Authenticated';
			Authenticated: {
				publicUrl?: string;
				auth: RpcAuth;
			};
	  }
	| {
			__kind__: 'Unauthenticated';
			Unauthenticated: {
				publicUrl: string;
			};
	  } {
	return 'Authenticated' in value
		? {
				__kind__: 'Authenticated',
				Authenticated: from_candid_record_n136(value.Authenticated)
			}
		: 'Unauthenticated' in value
			? {
					__kind__: 'Unauthenticated',
					Unauthenticated: value.Unauthenticated
				}
			: value;
}
function from_candid_variant_n138(
	value:
		| {
				BearerToken: {
					url: string;
				};
		  }
		| {
				UrlParameter: {
					urlPattern: string;
				};
		  }
):
	| {
			__kind__: 'BearerToken';
			BearerToken: {
				url: string;
			};
	  }
	| {
			__kind__: 'UrlParameter';
			UrlParameter: {
				urlPattern: string;
			};
	  } {
	return 'BearerToken' in value
		? {
				__kind__: 'BearerToken',
				BearerToken: value.BearerToken
			}
		: 'UrlParameter' in value
			? {
					__kind__: 'UrlParameter',
					UrlParameter: value.UrlParameter
				}
			: value;
}
function from_candid_variant_n140(
	value:
		| {
				Mainnet: null;
		  }
		| {
				Testnet: null;
		  }
		| {
				Devnet: null;
		  }
): SolanaCluster {
	return 'Mainnet' in value
		? SolanaCluster.Mainnet
		: 'Testnet' in value
			? SolanaCluster.Testnet
			: 'Devnet' in value
				? SolanaCluster.Devnet
				: value;
}
function from_candid_variant_n146(
	value:
		| {
				Consistent: _GetRecentPrioritizationFeesResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetRecentPrioritizationFeesResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetRecentPrioritizationFeesResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetRecentPrioritizationFeesResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetRecentPrioritizationFeesResult_n147(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n149(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n148(
	value:
		| {
				Ok: Array<_PrioritizationFee>;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<PrioritizationFee>;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n154(
	value:
		| {
				Consistent: _GetSignatureStatusesResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetSignatureStatusesResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetSignatureStatusesResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetSignatureStatusesResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetSignatureStatusesResult_n155(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n165(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n156(
	value:
		| {
				Ok: Array<[] | [_TransactionStatus]>;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<TransactionStatus | null>;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_vec_n157(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n164(
	value:
		| {
				finalized: null;
		  }
		| {
				confirmed: null;
		  }
		| {
				processed: null;
		  }
): CommitmentLevel {
	return 'finalized' in value
		? CommitmentLevel.finalized
		: 'confirmed' in value
			? CommitmentLevel.confirmed
			: 'processed' in value
				? CommitmentLevel.processed
				: value;
}
function from_candid_variant_n170(
	value:
		| {
				Consistent: _GetSignaturesForAddressResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetSignaturesForAddressResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetSignaturesForAddressResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetSignaturesForAddressResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetSignaturesForAddressResult_n171(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n176(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n172(
	value:
		| {
				Ok: Array<_ConfirmedTransactionStatusWithSignature>;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<ConfirmedTransactionStatusWithSignature>;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_vec_n173(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n185(
	value:
		| {
				Consistent: _GetSlotResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetSlotResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetSlotResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetSlotResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetSlotResult_n186(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n188(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n187(
	value:
		| {
				Ok: _Slot;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Slot;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n193(
	value:
		| {
				Consistent: _GetTokenAccountBalanceResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetTokenAccountBalanceResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetTokenAccountBalanceResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetTokenAccountBalanceResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetTokenAccountBalanceResult_n194(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n196(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n195(
	value:
		| {
				Ok: _TokenAmount;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: TokenAmount;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_TokenAmount_n105(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n202(
	value:
		| {
				Consistent: _GetTransactionResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetTransactionResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetTransactionResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetTransactionResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetTransactionResult_n203(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n208(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n204(
	value:
		| {
				Ok: [] | [_EncodedConfirmedTransactionWithStatusMeta];
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: EncodedConfirmedTransactionWithStatusMeta | null;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_opt_n205(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n211(
	value:
		| {
				Consistent: _RequestResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _RequestResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: RequestResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, RequestResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_RequestResult_n212(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n214(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n213(
	value:
		| {
				Ok: string;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: string;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n220(
	value:
		| {
				Consistent: _SendTransactionResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _SendTransactionResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: SendTransactionResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, SendTransactionResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_SendTransactionResult_n221(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n223(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n222(
	value:
		| {
				Ok: _Signature;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Signature;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n25(
	value:
		| {
				Consistent: _GetAccountInfoResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetAccountInfoResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetAccountInfoResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetAccountInfoResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetAccountInfoResult_n26(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n47(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n27(
	value:
		| {
				Ok: [] | [_AccountInfo];
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: AccountInfo | null;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_opt_n28(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n32(
	value:
		| {
				json: _ParsedAccount;
		  }
		| {
				legacyBinary: string;
		  }
		| {
				binary: [string, _AccountEncoding];
		  }
):
	| {
			__kind__: 'json';
			json: ParsedAccount;
	  }
	| {
			__kind__: 'legacyBinary';
			legacyBinary: string;
	  }
	| {
			__kind__: 'binary';
			binary: [string, AccountEncoding];
	  } {
	return 'json' in value
		? {
				__kind__: 'json',
				json: value.json
			}
		: 'legacyBinary' in value
			? {
					__kind__: 'legacyBinary',
					legacyBinary: value.legacyBinary
				}
			: 'binary' in value
				? {
						__kind__: 'binary',
						binary: from_candid_tuple_n33(value.binary)
					}
				: value;
}
function from_candid_variant_n35(
	value:
		| {
				'base64+zstd': null;
		  }
		| {
				jsonParsed: null;
		  }
		| {
				base58: null;
		  }
		| {
				base64: null;
		  }
		| {
				binary: null;
		  }
): AccountEncoding {
	return 'base64+zstd' in value
		? AccountEncoding['base64+zstd']
		: 'jsonParsed' in value
			? AccountEncoding.jsonParsed
			: 'base58' in value
				? AccountEncoding.base58
				: 'base64' in value
					? AccountEncoding.base64
					: 'binary' in value
						? AccountEncoding.binary
						: value;
}
function from_candid_variant_n37(
	value:
		| {
				JsonRpcError: _JsonRpcError;
		  }
		| {
				ProviderError: _ProviderError;
		  }
		| {
				ValidationError: string;
		  }
		| {
				HttpOutcallError: _HttpOutcallError;
		  }
):
	| {
			__kind__: 'JsonRpcError';
			JsonRpcError: JsonRpcError;
	  }
	| {
			__kind__: 'ProviderError';
			ProviderError: ProviderError;
	  }
	| {
			__kind__: 'ValidationError';
			ValidationError: string;
	  }
	| {
			__kind__: 'HttpOutcallError';
			HttpOutcallError: HttpOutcallError;
	  } {
	return 'JsonRpcError' in value
		? {
				__kind__: 'JsonRpcError',
				JsonRpcError: value.JsonRpcError
			}
		: 'ProviderError' in value
			? {
					__kind__: 'ProviderError',
					ProviderError: from_candid_ProviderError_n38(value.ProviderError)
				}
			: 'ValidationError' in value
				? {
						__kind__: 'ValidationError',
						ValidationError: value.ValidationError
					}
				: 'HttpOutcallError' in value
					? {
							__kind__: 'HttpOutcallError',
							HttpOutcallError: from_candid_HttpOutcallError_n40(value.HttpOutcallError)
						}
					: value;
}
function from_candid_variant_n39(
	value:
		| {
				TooFewCycles: {
					expected: bigint;
					received: bigint;
				};
		  }
		| {
				InvalidRpcConfig: string;
		  }
		| {
				UnsupportedCluster: string;
		  }
):
	| {
			__kind__: 'TooFewCycles';
			TooFewCycles: {
				expected: bigint;
				received: bigint;
			};
	  }
	| {
			__kind__: 'InvalidRpcConfig';
			InvalidRpcConfig: string;
	  }
	| {
			__kind__: 'UnsupportedCluster';
			UnsupportedCluster: string;
	  } {
	return 'TooFewCycles' in value
		? {
				__kind__: 'TooFewCycles',
				TooFewCycles: value.TooFewCycles
			}
		: 'InvalidRpcConfig' in value
			? {
					__kind__: 'InvalidRpcConfig',
					InvalidRpcConfig: value.InvalidRpcConfig
				}
			: 'UnsupportedCluster' in value
				? {
						__kind__: 'UnsupportedCluster',
						UnsupportedCluster: value.UnsupportedCluster
					}
				: value;
}
function from_candid_variant_n41(
	value:
		| {
				IcError: {
					code: _RejectionCode;
					message: string;
				};
		  }
		| {
				InvalidHttpJsonRpcResponse: {
					status: number;
					body: string;
					parsingError: [] | [string];
				};
		  }
):
	| {
			__kind__: 'IcError';
			IcError: {
				code: RejectionCode;
				message: string;
			};
	  }
	| {
			__kind__: 'InvalidHttpJsonRpcResponse';
			InvalidHttpJsonRpcResponse: {
				status: number;
				body: string;
				parsingError?: string;
			};
	  } {
	return 'IcError' in value
		? {
				__kind__: 'IcError',
				IcError: from_candid_record_n42(value.IcError)
			}
		: 'InvalidHttpJsonRpcResponse' in value
			? {
					__kind__: 'InvalidHttpJsonRpcResponse',
					InvalidHttpJsonRpcResponse: from_candid_record_n45(value.InvalidHttpJsonRpcResponse)
				}
			: value;
}
function from_candid_variant_n44(
	value:
		| {
				NoError: null;
		  }
		| {
				CanisterError: null;
		  }
		| {
				SysTransient: null;
		  }
		| {
				DestinationInvalid: null;
		  }
		| {
				Unknown: null;
		  }
		| {
				SysFatal: null;
		  }
		| {
				CanisterReject: null;
		  }
): RejectionCode {
	return 'NoError' in value
		? RejectionCode.NoError
		: 'CanisterError' in value
			? RejectionCode.CanisterError
			: 'SysTransient' in value
				? RejectionCode.SysTransient
				: 'DestinationInvalid' in value
					? RejectionCode.DestinationInvalid
					: 'Unknown' in value
						? RejectionCode.Unknown
						: 'SysFatal' in value
							? RejectionCode.SysFatal
							: 'CanisterReject' in value
								? RejectionCode.CanisterReject
								: value;
}
function from_candid_variant_n50(
	value:
		| {
				Custom: _RpcEndpoint;
		  }
		| {
				Supported: _SupportedProvider;
		  }
):
	| {
			__kind__: 'Custom';
			Custom: RpcEndpoint;
	  }
	| {
			__kind__: 'Supported';
			Supported: SupportedProvider;
	  } {
	return 'Custom' in value
		? {
				__kind__: 'Custom',
				Custom: from_candid_RpcEndpoint_n51(value.Custom)
			}
		: 'Supported' in value
			? {
					__kind__: 'Supported',
					Supported: from_candid_SupportedProvider_n54(value.Supported)
				}
			: value;
}
function from_candid_variant_n55(
	value:
		| {
				AnkrMainnet: null;
		  }
		| {
				AlchemyDevnet: null;
		  }
		| {
				DrpcMainnet: null;
		  }
		| {
				ChainstackDevnet: null;
		  }
		| {
				AlchemyMainnet: null;
		  }
		| {
				HeliusDevnet: null;
		  }
		| {
				AnkrDevnet: null;
		  }
		| {
				DrpcDevnet: null;
		  }
		| {
				ChainstackMainnet: null;
		  }
		| {
				PublicNodeMainnet: null;
		  }
		| {
				HeliusMainnet: null;
		  }
): SupportedProvider {
	return 'AnkrMainnet' in value
		? SupportedProvider.AnkrMainnet
		: 'AlchemyDevnet' in value
			? SupportedProvider.AlchemyDevnet
			: 'DrpcMainnet' in value
				? SupportedProvider.DrpcMainnet
				: 'ChainstackDevnet' in value
					? SupportedProvider.ChainstackDevnet
					: 'AlchemyMainnet' in value
						? SupportedProvider.AlchemyMainnet
						: 'HeliusDevnet' in value
							? SupportedProvider.HeliusDevnet
							: 'AnkrDevnet' in value
								? SupportedProvider.AnkrDevnet
								: 'DrpcDevnet' in value
									? SupportedProvider.DrpcDevnet
									: 'ChainstackMainnet' in value
										? SupportedProvider.ChainstackMainnet
										: 'PublicNodeMainnet' in value
											? SupportedProvider.PublicNodeMainnet
											: 'HeliusMainnet' in value
												? SupportedProvider.HeliusMainnet
												: value;
}
function from_candid_variant_n57(
	value:
		| {
				Ok: bigint;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: bigint;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n61(
	value:
		| {
				Consistent: _GetBalanceResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetBalanceResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetBalanceResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetBalanceResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetBalanceResult_n62(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n64(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n63(
	value:
		| {
				Ok: _Lamport;
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Lamport;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n72(
	value:
		| {
				Consistent: _GetBlockResult;
		  }
		| {
				Inconsistent: Array<[_RpcSource, _GetBlockResult]>;
		  }
):
	| {
			__kind__: 'Consistent';
			Consistent: GetBlockResult;
	  }
	| {
			__kind__: 'Inconsistent';
			Inconsistent: Array<[RpcSource, GetBlockResult]>;
	  } {
	return 'Consistent' in value
		? {
				__kind__: 'Consistent',
				Consistent: from_candid_GetBlockResult_n73(value.Consistent)
			}
		: 'Inconsistent' in value
			? {
					__kind__: 'Inconsistent',
					Inconsistent: from_candid_vec_n128(value.Inconsistent)
				}
			: value;
}
function from_candid_variant_n74(
	value:
		| {
				Ok: [] | [_ConfirmedBlock];
		  }
		| {
				Err: _RpcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: ConfirmedBlock | null;
	  }
	| {
			__kind__: 'Err';
			Err: RpcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_opt_n75(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_RpcError_n36(value.Err)
				}
			: value;
}
function from_candid_variant_n87(
	value:
		| {
				fee: null;
		  }
		| {
				staking: null;
		  }
		| {
				rent: null;
		  }
		| {
				voting: null;
		  }
): Variant_fee_staking_rent_voting {
	return 'fee' in value
		? Variant_fee_staking_rent_voting.fee
		: 'staking' in value
			? Variant_fee_staking_rent_voting.staking
			: 'rent' in value
				? Variant_fee_staking_rent_voting.rent
				: 'voting' in value
					? Variant_fee_staking_rent_voting.voting
					: value;
}
function from_candid_variant_n95(
	value:
		| {
				Ok: null;
		  }
		| {
				Err: _TransactionError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: TransactionError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_TransactionError_n96(value.Err)
				}
			: value;
}
function from_candid_variant_n97(
	value:
		| {
				ProgramCacheHitMaxLimit: null;
		  }
		| {
				InvalidAccountForFee: null;
		  }
		| {
				AddressLookupTableNotFound: null;
		  }
		| {
				MissingSignatureForFee: null;
		  }
		| {
				WouldExceedAccountDataBlockLimit: null;
		  }
		| {
				AccountInUse: null;
		  }
		| {
				DuplicateInstruction: number;
		  }
		| {
				AccountNotFound: null;
		  }
		| {
				TooManyAccountLocks: null;
		  }
		| {
				InvalidAccountIndex: null;
		  }
		| {
				AlreadyProcessed: null;
		  }
		| {
				WouldExceedAccountDataTotalLimit: null;
		  }
		| {
				InvalidAddressLookupTableIndex: null;
		  }
		| {
				SanitizeFailure: null;
		  }
		| {
				ResanitizationNeeded: null;
		  }
		| {
				InvalidRentPayingAccount: null;
		  }
		| {
				MaxLoadedAccountsDataSizeExceeded: null;
		  }
		| {
				InvalidAddressLookupTableData: null;
		  }
		| {
				InvalidWritableAccount: null;
		  }
		| {
				WouldExceedMaxAccountCostLimit: null;
		  }
		| {
				InvalidLoadedAccountsDataSizeLimit: null;
		  }
		| {
				InvalidProgramForExecution: null;
		  }
		| {
				InstructionError: [number, _InstructionError];
		  }
		| {
				InsufficientFundsForRent: {
					account_index: number;
				};
		  }
		| {
				UnsupportedVersion: null;
		  }
		| {
				ClusterMaintenance: null;
		  }
		| {
				WouldExceedMaxVoteCostLimit: null;
		  }
		| {
				SignatureFailure: null;
		  }
		| {
				ProgramAccountNotFound: null;
		  }
		| {
				AccountLoadedTwice: null;
		  }
		| {
				ProgramExecutionTemporarilyRestricted: {
					account_index: number;
				};
		  }
		| {
				AccountBorrowOutstanding: null;
		  }
		| {
				WouldExceedMaxBlockCostLimit: null;
		  }
		| {
				InvalidAddressLookupTableOwner: null;
		  }
		| {
				InsufficientFundsForFee: null;
		  }
		| {
				CallChainTooDeep: null;
		  }
		| {
				UnbalancedTransaction: null;
		  }
		| {
				CommitCancelled: null;
		  }
		| {
				BlockhashNotFound: null;
		  }
):
	| {
			__kind__: 'ProgramCacheHitMaxLimit';
			ProgramCacheHitMaxLimit: null;
	  }
	| {
			__kind__: 'InvalidAccountForFee';
			InvalidAccountForFee: null;
	  }
	| {
			__kind__: 'AddressLookupTableNotFound';
			AddressLookupTableNotFound: null;
	  }
	| {
			__kind__: 'MissingSignatureForFee';
			MissingSignatureForFee: null;
	  }
	| {
			__kind__: 'WouldExceedAccountDataBlockLimit';
			WouldExceedAccountDataBlockLimit: null;
	  }
	| {
			__kind__: 'AccountInUse';
			AccountInUse: null;
	  }
	| {
			__kind__: 'DuplicateInstruction';
			DuplicateInstruction: number;
	  }
	| {
			__kind__: 'AccountNotFound';
			AccountNotFound: null;
	  }
	| {
			__kind__: 'TooManyAccountLocks';
			TooManyAccountLocks: null;
	  }
	| {
			__kind__: 'InvalidAccountIndex';
			InvalidAccountIndex: null;
	  }
	| {
			__kind__: 'AlreadyProcessed';
			AlreadyProcessed: null;
	  }
	| {
			__kind__: 'WouldExceedAccountDataTotalLimit';
			WouldExceedAccountDataTotalLimit: null;
	  }
	| {
			__kind__: 'InvalidAddressLookupTableIndex';
			InvalidAddressLookupTableIndex: null;
	  }
	| {
			__kind__: 'SanitizeFailure';
			SanitizeFailure: null;
	  }
	| {
			__kind__: 'ResanitizationNeeded';
			ResanitizationNeeded: null;
	  }
	| {
			__kind__: 'InvalidRentPayingAccount';
			InvalidRentPayingAccount: null;
	  }
	| {
			__kind__: 'MaxLoadedAccountsDataSizeExceeded';
			MaxLoadedAccountsDataSizeExceeded: null;
	  }
	| {
			__kind__: 'InvalidAddressLookupTableData';
			InvalidAddressLookupTableData: null;
	  }
	| {
			__kind__: 'InvalidWritableAccount';
			InvalidWritableAccount: null;
	  }
	| {
			__kind__: 'WouldExceedMaxAccountCostLimit';
			WouldExceedMaxAccountCostLimit: null;
	  }
	| {
			__kind__: 'InvalidLoadedAccountsDataSizeLimit';
			InvalidLoadedAccountsDataSizeLimit: null;
	  }
	| {
			__kind__: 'InvalidProgramForExecution';
			InvalidProgramForExecution: null;
	  }
	| {
			__kind__: 'InstructionError';
			InstructionError: [number, InstructionError];
	  }
	| {
			__kind__: 'InsufficientFundsForRent';
			InsufficientFundsForRent: {
				account_index: number;
			};
	  }
	| {
			__kind__: 'UnsupportedVersion';
			UnsupportedVersion: null;
	  }
	| {
			__kind__: 'ClusterMaintenance';
			ClusterMaintenance: null;
	  }
	| {
			__kind__: 'WouldExceedMaxVoteCostLimit';
			WouldExceedMaxVoteCostLimit: null;
	  }
	| {
			__kind__: 'SignatureFailure';
			SignatureFailure: null;
	  }
	| {
			__kind__: 'ProgramAccountNotFound';
			ProgramAccountNotFound: null;
	  }
	| {
			__kind__: 'AccountLoadedTwice';
			AccountLoadedTwice: null;
	  }
	| {
			__kind__: 'ProgramExecutionTemporarilyRestricted';
			ProgramExecutionTemporarilyRestricted: {
				account_index: number;
			};
	  }
	| {
			__kind__: 'AccountBorrowOutstanding';
			AccountBorrowOutstanding: null;
	  }
	| {
			__kind__: 'WouldExceedMaxBlockCostLimit';
			WouldExceedMaxBlockCostLimit: null;
	  }
	| {
			__kind__: 'InvalidAddressLookupTableOwner';
			InvalidAddressLookupTableOwner: null;
	  }
	| {
			__kind__: 'InsufficientFundsForFee';
			InsufficientFundsForFee: null;
	  }
	| {
			__kind__: 'CallChainTooDeep';
			CallChainTooDeep: null;
	  }
	| {
			__kind__: 'UnbalancedTransaction';
			UnbalancedTransaction: null;
	  }
	| {
			__kind__: 'CommitCancelled';
			CommitCancelled: null;
	  }
	| {
			__kind__: 'BlockhashNotFound';
			BlockhashNotFound: null;
	  } {
	return 'ProgramCacheHitMaxLimit' in value
		? {
				__kind__: 'ProgramCacheHitMaxLimit',
				ProgramCacheHitMaxLimit: value.ProgramCacheHitMaxLimit
			}
		: 'InvalidAccountForFee' in value
			? {
					__kind__: 'InvalidAccountForFee',
					InvalidAccountForFee: value.InvalidAccountForFee
				}
			: 'AddressLookupTableNotFound' in value
				? {
						__kind__: 'AddressLookupTableNotFound',
						AddressLookupTableNotFound: value.AddressLookupTableNotFound
					}
				: 'MissingSignatureForFee' in value
					? {
							__kind__: 'MissingSignatureForFee',
							MissingSignatureForFee: value.MissingSignatureForFee
						}
					: 'WouldExceedAccountDataBlockLimit' in value
						? {
								__kind__: 'WouldExceedAccountDataBlockLimit',
								WouldExceedAccountDataBlockLimit: value.WouldExceedAccountDataBlockLimit
							}
						: 'AccountInUse' in value
							? {
									__kind__: 'AccountInUse',
									AccountInUse: value.AccountInUse
								}
							: 'DuplicateInstruction' in value
								? {
										__kind__: 'DuplicateInstruction',
										DuplicateInstruction: value.DuplicateInstruction
									}
								: 'AccountNotFound' in value
									? {
											__kind__: 'AccountNotFound',
											AccountNotFound: value.AccountNotFound
										}
									: 'TooManyAccountLocks' in value
										? {
												__kind__: 'TooManyAccountLocks',
												TooManyAccountLocks: value.TooManyAccountLocks
											}
										: 'InvalidAccountIndex' in value
											? {
													__kind__: 'InvalidAccountIndex',
													InvalidAccountIndex: value.InvalidAccountIndex
												}
											: 'AlreadyProcessed' in value
												? {
														__kind__: 'AlreadyProcessed',
														AlreadyProcessed: value.AlreadyProcessed
													}
												: 'WouldExceedAccountDataTotalLimit' in value
													? {
															__kind__: 'WouldExceedAccountDataTotalLimit',
															WouldExceedAccountDataTotalLimit:
																value.WouldExceedAccountDataTotalLimit
														}
													: 'InvalidAddressLookupTableIndex' in value
														? {
																__kind__: 'InvalidAddressLookupTableIndex',
																InvalidAddressLookupTableIndex: value.InvalidAddressLookupTableIndex
															}
														: 'SanitizeFailure' in value
															? {
																	__kind__: 'SanitizeFailure',
																	SanitizeFailure: value.SanitizeFailure
																}
															: 'ResanitizationNeeded' in value
																? {
																		__kind__: 'ResanitizationNeeded',
																		ResanitizationNeeded: value.ResanitizationNeeded
																	}
																: 'InvalidRentPayingAccount' in value
																	? {
																			__kind__: 'InvalidRentPayingAccount',
																			InvalidRentPayingAccount: value.InvalidRentPayingAccount
																		}
																	: 'MaxLoadedAccountsDataSizeExceeded' in value
																		? {
																				__kind__: 'MaxLoadedAccountsDataSizeExceeded',
																				MaxLoadedAccountsDataSizeExceeded:
																					value.MaxLoadedAccountsDataSizeExceeded
																			}
																		: 'InvalidAddressLookupTableData' in value
																			? {
																					__kind__: 'InvalidAddressLookupTableData',
																					InvalidAddressLookupTableData:
																						value.InvalidAddressLookupTableData
																				}
																			: 'InvalidWritableAccount' in value
																				? {
																						__kind__: 'InvalidWritableAccount',
																						InvalidWritableAccount: value.InvalidWritableAccount
																					}
																				: 'WouldExceedMaxAccountCostLimit' in value
																					? {
																							__kind__: 'WouldExceedMaxAccountCostLimit',
																							WouldExceedMaxAccountCostLimit:
																								value.WouldExceedMaxAccountCostLimit
																						}
																					: 'InvalidLoadedAccountsDataSizeLimit' in value
																						? {
																								__kind__: 'InvalidLoadedAccountsDataSizeLimit',
																								InvalidLoadedAccountsDataSizeLimit:
																									value.InvalidLoadedAccountsDataSizeLimit
																							}
																						: 'InvalidProgramForExecution' in value
																							? {
																									__kind__: 'InvalidProgramForExecution',
																									InvalidProgramForExecution:
																										value.InvalidProgramForExecution
																								}
																							: 'InstructionError' in value
																								? {
																										__kind__: 'InstructionError',
																										InstructionError: from_candid_tuple_n98(
																											value.InstructionError
																										)
																									}
																								: 'InsufficientFundsForRent' in value
																									? {
																											__kind__: 'InsufficientFundsForRent',
																											InsufficientFundsForRent:
																												value.InsufficientFundsForRent
																										}
																									: 'UnsupportedVersion' in value
																										? {
																												__kind__: 'UnsupportedVersion',
																												UnsupportedVersion: value.UnsupportedVersion
																											}
																										: 'ClusterMaintenance' in value
																											? {
																													__kind__: 'ClusterMaintenance',
																													ClusterMaintenance:
																														value.ClusterMaintenance
																												}
																											: 'WouldExceedMaxVoteCostLimit' in value
																												? {
																														__kind__: 'WouldExceedMaxVoteCostLimit',
																														WouldExceedMaxVoteCostLimit:
																															value.WouldExceedMaxVoteCostLimit
																													}
																												: 'SignatureFailure' in value
																													? {
																															__kind__: 'SignatureFailure',
																															SignatureFailure:
																																value.SignatureFailure
																														}
																													: 'ProgramAccountNotFound' in value
																														? {
																																__kind__: 'ProgramAccountNotFound',
																																ProgramAccountNotFound:
																																	value.ProgramAccountNotFound
																															}
																														: 'AccountLoadedTwice' in value
																															? {
																																	__kind__: 'AccountLoadedTwice',
																																	AccountLoadedTwice:
																																		value.AccountLoadedTwice
																																}
																															: 'ProgramExecutionTemporarilyRestricted' in
																																  value
																																? {
																																		__kind__:
																																			'ProgramExecutionTemporarilyRestricted',
																																		ProgramExecutionTemporarilyRestricted:
																																			value.ProgramExecutionTemporarilyRestricted
																																	}
																																: 'AccountBorrowOutstanding' in
																																	  value
																																	? {
																																			__kind__:
																																				'AccountBorrowOutstanding',
																																			AccountBorrowOutstanding:
																																				value.AccountBorrowOutstanding
																																		}
																																	: 'WouldExceedMaxBlockCostLimit' in
																																		  value
																																		? {
																																				__kind__:
																																					'WouldExceedMaxBlockCostLimit',
																																				WouldExceedMaxBlockCostLimit:
																																					value.WouldExceedMaxBlockCostLimit
																																			}
																																		: 'InvalidAddressLookupTableOwner' in
																																			  value
																																			? {
																																					__kind__:
																																						'InvalidAddressLookupTableOwner',
																																					InvalidAddressLookupTableOwner:
																																						value.InvalidAddressLookupTableOwner
																																				}
																																			: 'InsufficientFundsForFee' in
																																				  value
																																				? {
																																						__kind__:
																																							'InsufficientFundsForFee',
																																						InsufficientFundsForFee:
																																							value.InsufficientFundsForFee
																																					}
																																				: 'CallChainTooDeep' in
																																					  value
																																					? {
																																							__kind__:
																																								'CallChainTooDeep',
																																							CallChainTooDeep:
																																								value.CallChainTooDeep
																																						}
																																					: 'UnbalancedTransaction' in
																																						  value
																																						? {
																																								__kind__:
																																									'UnbalancedTransaction',
																																								UnbalancedTransaction:
																																									value.UnbalancedTransaction
																																							}
																																						: 'CommitCancelled' in
																																							  value
																																							? {
																																									__kind__:
																																										'CommitCancelled',
																																									CommitCancelled:
																																										value.CommitCancelled
																																								}
																																							: 'BlockhashNotFound' in
																																								  value
																																								? {
																																										__kind__:
																																											'BlockhashNotFound',
																																										BlockhashNotFound:
																																											value.BlockhashNotFound
																																									}
																																								: value;
}
function from_candid_vec_n102(
	value: Array<_TransactionTokenBalance>
): Array<TransactionTokenBalance> {
	return value.map((x) => from_candid_TransactionTokenBalance_n103(x));
}
function from_candid_vec_n110(value: Array<_InnerInstructions>): Array<InnerInstructions> {
	return value.map((x) => from_candid_InnerInstructions_n111(x));
}
function from_candid_vec_n113(value: Array<_Instruction>): Array<Instruction> {
	return value.map((x) => from_candid_Instruction_n114(x));
}
function from_candid_vec_n128(
	value: Array<[_RpcSource, _GetBlockResult]>
): Array<[RpcSource, GetBlockResult]> {
	return value.map((x) => from_candid_tuple_n129(x));
}
function from_candid_vec_n130(
	value: Array<[_SupportedProvider, _RpcProvider]>
): Array<[SupportedProvider, RpcProvider]> {
	return value.map((x) => from_candid_tuple_n131(x));
}
function from_candid_vec_n149(
	value: Array<[_RpcSource, _GetRecentPrioritizationFeesResult]>
): Array<[RpcSource, GetRecentPrioritizationFeesResult]> {
	return value.map((x) => from_candid_tuple_n150(x));
}
function from_candid_vec_n157(
	value: Array<[] | [_TransactionStatus]>
): Array<TransactionStatus | null> {
	return value.map((x) => from_candid_opt_n158(x));
}
function from_candid_vec_n165(
	value: Array<[_RpcSource, _GetSignatureStatusesResult]>
): Array<[RpcSource, GetSignatureStatusesResult]> {
	return value.map((x) => from_candid_tuple_n166(x));
}
function from_candid_vec_n173(
	value: Array<_ConfirmedTransactionStatusWithSignature>
): Array<ConfirmedTransactionStatusWithSignature> {
	return value.map((x) => from_candid_ConfirmedTransactionStatusWithSignature_n174(x));
}
function from_candid_vec_n176(
	value: Array<[_RpcSource, _GetSignaturesForAddressResult]>
): Array<[RpcSource, GetSignaturesForAddressResult]> {
	return value.map((x) => from_candid_tuple_n177(x));
}
function from_candid_vec_n188(
	value: Array<[_RpcSource, _GetSlotResult]>
): Array<[RpcSource, GetSlotResult]> {
	return value.map((x) => from_candid_tuple_n189(x));
}
function from_candid_vec_n196(
	value: Array<[_RpcSource, _GetTokenAccountBalanceResult]>
): Array<[RpcSource, GetTokenAccountBalanceResult]> {
	return value.map((x) => from_candid_tuple_n197(x));
}
function from_candid_vec_n208(
	value: Array<[_RpcSource, _GetTransactionResult]>
): Array<[RpcSource, GetTransactionResult]> {
	return value.map((x) => from_candid_tuple_n209(x));
}
function from_candid_vec_n214(
	value: Array<[_RpcSource, _RequestResult]>
): Array<[RpcSource, RequestResult]> {
	return value.map((x) => from_candid_tuple_n215(x));
}
function from_candid_vec_n223(
	value: Array<[_RpcSource, _SendTransactionResult]>
): Array<[RpcSource, SendTransactionResult]> {
	return value.map((x) => from_candid_tuple_n224(x));
}
function from_candid_vec_n47(
	value: Array<[_RpcSource, _GetAccountInfoResult]>
): Array<[RpcSource, GetAccountInfoResult]> {
	return value.map((x) => from_candid_tuple_n48(x));
}
function from_candid_vec_n64(
	value: Array<[_RpcSource, _GetBalanceResult]>
): Array<[RpcSource, GetBalanceResult]> {
	return value.map((x) => from_candid_tuple_n65(x));
}
function from_candid_vec_n82(value: Array<_Reward>): Array<Reward> {
	return value.map((x) => from_candid_Reward_n83(x));
}
function from_candid_vec_n89(
	value: Array<_EncodedTransactionWithStatusMeta>
): Array<EncodedTransactionWithStatusMeta> {
	return value.map((x) => from_candid_EncodedTransactionWithStatusMeta_n90(x));
}
function to_candid_CommitmentLevel_n22(value: CommitmentLevel): _CommitmentLevel {
	return to_candid_variant_n23(value);
}
function to_candid_ConsensusStrategy_n15(value: ConsensusStrategy): _ConsensusStrategy {
	return to_candid_variant_n16(value);
}
function to_candid_GetAccountInfoEncoding_n20(
	value: GetAccountInfoEncoding
): _GetAccountInfoEncoding {
	return to_candid_variant_n21(value);
}
function to_candid_GetAccountInfoParams_n18(value: GetAccountInfoParams): _GetAccountInfoParams {
	return to_candid_record_n19(value);
}
function to_candid_GetBalanceParams_n58(value: GetBalanceParams): _GetBalanceParams {
	return to_candid_record_n59(value);
}
function to_candid_GetBlockParams_n66(value: GetBlockParams): _GetBlockParams {
	return to_candid_record_n67(value);
}
function to_candid_GetRecentPrioritizationFeesRpcConfig_n142(
	value: GetRecentPrioritizationFeesRpcConfig
): _GetRecentPrioritizationFeesRpcConfig {
	return to_candid_record_n143(value);
}
function to_candid_GetSignatureStatusesParams_n151(
	value: GetSignatureStatusesParams
): _GetSignatureStatusesParams {
	return to_candid_record_n152(value);
}
function to_candid_GetSignaturesForAddressParams_n167(
	value: GetSignaturesForAddressParams
): _GetSignaturesForAddressParams {
	return to_candid_record_n168(value);
}
function to_candid_GetSlotParams_n182(value: GetSlotParams): _GetSlotParams {
	return to_candid_record_n183(value);
}
function to_candid_GetSlotRpcConfig_n179(value: GetSlotRpcConfig): _GetSlotRpcConfig {
	return to_candid_record_n180(value);
}
function to_candid_GetTokenAccountBalanceParams_n190(
	value: GetTokenAccountBalanceParams
): _GetTokenAccountBalanceParams {
	return to_candid_record_n191(value);
}
function to_candid_GetTransactionParams_n198(value: GetTransactionParams): _GetTransactionParams {
	return to_candid_record_n199(value);
}
function to_candid_RpcConfig_n13(value: RpcConfig): _RpcConfig {
	return to_candid_record_n14(value);
}
function to_candid_RpcEndpoint_n8(value: RpcEndpoint): _RpcEndpoint {
	return to_candid_record_n9(value);
}
function to_candid_RpcSource_n4(value: RpcSource): _RpcSource {
	return to_candid_variant_n5(value);
}
function to_candid_RpcSources_n1(value: RpcSources): _RpcSources {
	return to_candid_variant_n2(value);
}
function to_candid_SendTransactionEncoding_n218(
	value: SendTransactionEncoding
): _SendTransactionEncoding {
	return to_candid_variant_n200(value);
}
function to_candid_SendTransactionParams_n216(
	value: SendTransactionParams
): _SendTransactionParams {
	return to_candid_record_n217(value);
}
function to_candid_SolanaCluster_n10(value: SolanaCluster): _SolanaCluster {
	return to_candid_variant_n11(value);
}
function to_candid_SupportedProvider_n6(value: SupportedProvider): _SupportedProvider {
	return to_candid_variant_n7(value);
}
function to_candid_TransactionDetails_n68(value: TransactionDetails): _TransactionDetails {
	return to_candid_variant_n69(value);
}
function to_candid_opt_n12(value: RpcConfig | null): [] | [_RpcConfig] {
	return value === null ? candid_none() : candid_some(to_candid_RpcConfig_n13(value));
}
function to_candid_opt_n141(
	value: GetRecentPrioritizationFeesRpcConfig | null
): [] | [_GetRecentPrioritizationFeesRpcConfig] {
	return value === null
		? candid_none()
		: candid_some(to_candid_GetRecentPrioritizationFeesRpcConfig_n142(value));
}
function to_candid_opt_n144(
	value: GetRecentPrioritizationFeesParams | null
): [] | [_GetRecentPrioritizationFeesParams] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_opt_n178(value: GetSlotRpcConfig | null): [] | [_GetSlotRpcConfig] {
	return value === null ? candid_none() : candid_some(to_candid_GetSlotRpcConfig_n179(value));
}
function to_candid_opt_n181(value: GetSlotParams | null): [] | [_GetSlotParams] {
	return value === null ? candid_none() : candid_some(to_candid_GetSlotParams_n182(value));
}
function to_candid_opt_n227(value: string | null): [] | [string] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_record_n14(value: {
	responseConsensus?: ConsensusStrategy;
	responseSizeEstimate?: bigint;
}): {
	responseConsensus: [] | [_ConsensusStrategy];
	responseSizeEstimate: [] | [bigint];
} {
	return {
		responseConsensus: value.responseConsensus
			? candid_some(to_candid_ConsensusStrategy_n15(value.responseConsensus))
			: candid_none(),
		responseSizeEstimate: value.responseSizeEstimate
			? candid_some(value.responseSizeEstimate)
			: candid_none()
	};
}
function to_candid_record_n143(value: {
	responseConsensus?: ConsensusStrategy;
	maxSlotRoundingError?: RoundingError;
	responseSizeEstimate?: bigint;
	maxLength?: number;
}): {
	responseConsensus: [] | [_ConsensusStrategy];
	maxSlotRoundingError: [] | [_RoundingError];
	responseSizeEstimate: [] | [bigint];
	maxLength: [] | [number];
} {
	return {
		responseConsensus: value.responseConsensus
			? candid_some(to_candid_ConsensusStrategy_n15(value.responseConsensus))
			: candid_none(),
		maxSlotRoundingError: value.maxSlotRoundingError
			? candid_some(value.maxSlotRoundingError)
			: candid_none(),
		responseSizeEstimate: value.responseSizeEstimate
			? candid_some(value.responseSizeEstimate)
			: candid_none(),
		maxLength: value.maxLength ? candid_some(value.maxLength) : candid_none()
	};
}
function to_candid_record_n152(value: {
	searchTransactionHistory?: boolean;
	signatures: Array<Signature>;
}): {
	searchTransactionHistory: [] | [boolean];
	signatures: Array<_Signature>;
} {
	return {
		searchTransactionHistory: value.searchTransactionHistory
			? candid_some(value.searchTransactionHistory)
			: candid_none(),
		signatures: value.signatures
	};
}
function to_candid_record_n168(value: {
	pubkey: Pubkey;
	limit?: number;
	before?: Signature;
	until?: Signature;
	minContextSlot?: Slot;
	commitment?: CommitmentLevel;
}): {
	pubkey: _Pubkey;
	limit: [] | [number];
	before: [] | [_Signature];
	until: [] | [_Signature];
	minContextSlot: [] | [_Slot];
	commitment: [] | [_CommitmentLevel];
} {
	return {
		pubkey: value.pubkey,
		limit: value.limit ? candid_some(value.limit) : candid_none(),
		before: value.before ? candid_some(value.before) : candid_none(),
		until: value.until ? candid_some(value.until) : candid_none(),
		minContextSlot: value.minContextSlot ? candid_some(value.minContextSlot) : candid_none(),
		commitment: value.commitment
			? candid_some(to_candid_CommitmentLevel_n22(value.commitment))
			: candid_none()
	};
}
function to_candid_record_n17(value: { min: number; total?: number }): {
	min: number;
	total: [] | [number];
} {
	return {
		min: value.min,
		total: value.total ? candid_some(value.total) : candid_none()
	};
}
function to_candid_record_n180(value: {
	roundingError?: RoundingError;
	responseConsensus?: ConsensusStrategy;
	responseSizeEstimate?: bigint;
}): {
	roundingError: [] | [_RoundingError];
	responseConsensus: [] | [_ConsensusStrategy];
	responseSizeEstimate: [] | [bigint];
} {
	return {
		roundingError: value.roundingError ? candid_some(value.roundingError) : candid_none(),
		responseConsensus: value.responseConsensus
			? candid_some(to_candid_ConsensusStrategy_n15(value.responseConsensus))
			: candid_none(),
		responseSizeEstimate: value.responseSizeEstimate
			? candid_some(value.responseSizeEstimate)
			: candid_none()
	};
}
function to_candid_record_n183(value: { minContextSlot?: Slot; commitment?: CommitmentLevel }): {
	minContextSlot: [] | [_Slot];
	commitment: [] | [_CommitmentLevel];
} {
	return {
		minContextSlot: value.minContextSlot ? candid_some(value.minContextSlot) : candid_none(),
		commitment: value.commitment
			? candid_some(to_candid_CommitmentLevel_n22(value.commitment))
			: candid_none()
	};
}
function to_candid_record_n19(value: {
	encoding?: GetAccountInfoEncoding;
	pubkey: Pubkey;
	dataSlice?: DataSlice;
	minContextSlot?: Slot;
	commitment?: CommitmentLevel;
}): {
	encoding: [] | [_GetAccountInfoEncoding];
	pubkey: _Pubkey;
	dataSlice: [] | [_DataSlice];
	minContextSlot: [] | [_Slot];
	commitment: [] | [_CommitmentLevel];
} {
	return {
		encoding: value.encoding
			? candid_some(to_candid_GetAccountInfoEncoding_n20(value.encoding))
			: candid_none(),
		pubkey: value.pubkey,
		dataSlice: value.dataSlice ? candid_some(value.dataSlice) : candid_none(),
		minContextSlot: value.minContextSlot ? candid_some(value.minContextSlot) : candid_none(),
		commitment: value.commitment
			? candid_some(to_candid_CommitmentLevel_n22(value.commitment))
			: candid_none()
	};
}
function to_candid_record_n191(value: { pubkey: Pubkey; commitment?: CommitmentLevel }): {
	pubkey: _Pubkey;
	commitment: [] | [_CommitmentLevel];
} {
	return {
		pubkey: value.pubkey,
		commitment: value.commitment
			? candid_some(to_candid_CommitmentLevel_n22(value.commitment))
			: candid_none()
	};
}
function to_candid_record_n199(value: {
	signature: Signature;
	maxSupportedTransactionVersion?: number;
	encoding?: Variant_base58_base64;
	commitment?: CommitmentLevel;
}): {
	signature: _Signature;
	maxSupportedTransactionVersion: [] | [number];
	encoding:
		| []
		| [
				| {
						base58: null;
				  }
				| {
						base64: null;
				  }
		  ];
	commitment: [] | [_CommitmentLevel];
} {
	return {
		signature: value.signature,
		maxSupportedTransactionVersion: value.maxSupportedTransactionVersion
			? candid_some(value.maxSupportedTransactionVersion)
			: candid_none(),
		encoding: value.encoding ? candid_some(to_candid_variant_n200(value.encoding)) : candid_none(),
		commitment: value.commitment
			? candid_some(to_candid_CommitmentLevel_n22(value.commitment))
			: candid_none()
	};
}
function to_candid_record_n217(value: {
	encoding?: SendTransactionEncoding;
	preflightCommitment?: CommitmentLevel;
	transaction: string;
	maxRetries?: number;
	minContextSlot?: Slot;
	skipPreflight?: boolean;
}): {
	encoding: [] | [_SendTransactionEncoding];
	preflightCommitment: [] | [_CommitmentLevel];
	transaction: string;
	maxRetries: [] | [number];
	minContextSlot: [] | [_Slot];
	skipPreflight: [] | [boolean];
} {
	return {
		encoding: value.encoding
			? candid_some(to_candid_SendTransactionEncoding_n218(value.encoding))
			: candid_none(),
		preflightCommitment: value.preflightCommitment
			? candid_some(to_candid_CommitmentLevel_n22(value.preflightCommitment))
			: candid_none(),
		transaction: value.transaction,
		maxRetries: value.maxRetries ? candid_some(value.maxRetries) : candid_none(),
		minContextSlot: value.minContextSlot ? candid_some(value.minContextSlot) : candid_none(),
		skipPreflight: value.skipPreflight ? candid_some(value.skipPreflight) : candid_none()
	};
}
function to_candid_record_n59(value: {
	pubkey: Pubkey;
	minContextSlot?: Slot;
	commitment?: CommitmentLevel;
}): {
	pubkey: _Pubkey;
	minContextSlot: [] | [_Slot];
	commitment: [] | [_CommitmentLevel];
} {
	return {
		pubkey: value.pubkey,
		minContextSlot: value.minContextSlot ? candid_some(value.minContextSlot) : candid_none(),
		commitment: value.commitment
			? candid_some(to_candid_CommitmentLevel_n22(value.commitment))
			: candid_none()
	};
}
function to_candid_record_n67(value: {
	maxSupportedTransactionVersion?: number;
	transactionDetails?: TransactionDetails;
	slot: Slot;
	rewards?: boolean;
	commitment?: Variant_finalized_confirmed;
}): {
	maxSupportedTransactionVersion: [] | [number];
	transactionDetails: [] | [_TransactionDetails];
	slot: _Slot;
	rewards: [] | [boolean];
	commitment:
		| []
		| [
				| {
						finalized: null;
				  }
				| {
						confirmed: null;
				  }
		  ];
} {
	return {
		maxSupportedTransactionVersion: value.maxSupportedTransactionVersion
			? candid_some(value.maxSupportedTransactionVersion)
			: candid_none(),
		transactionDetails: value.transactionDetails
			? candid_some(to_candid_TransactionDetails_n68(value.transactionDetails))
			: candid_none(),
		slot: value.slot,
		rewards: value.rewards ? candid_some(value.rewards) : candid_none(),
		commitment: value.commitment
			? candid_some(to_candid_variant_n70(value.commitment))
			: candid_none()
	};
}
function to_candid_record_n9(value: { url: string; headers?: Array<HttpHeader> }): {
	url: string;
	headers: [] | [Array<_HttpHeader>];
} {
	return {
		url: value.url,
		headers: value.headers ? candid_some(value.headers) : candid_none()
	};
}
function to_candid_tuple_n226(
	value: [SupportedProvider, string | null]
): [_SupportedProvider, [] | [string]] {
	return [to_candid_SupportedProvider_n6(value[0]), to_candid_opt_n227(value[1])];
}
function to_candid_variant_n11(value: SolanaCluster):
	| {
			Mainnet: null;
	  }
	| {
			Testnet: null;
	  }
	| {
			Devnet: null;
	  } {
	return value == SolanaCluster.Mainnet
		? {
				Mainnet: null
			}
		: value == SolanaCluster.Testnet
			? {
					Testnet: null
				}
			: value == SolanaCluster.Devnet
				? {
						Devnet: null
					}
				: value;
}
function to_candid_variant_n16(
	value:
		| {
				__kind__: 'Equality';
				Equality: null;
		  }
		| {
				__kind__: 'Threshold';
				Threshold: {
					min: number;
					total?: number;
				};
		  }
):
	| {
			Equality: null;
	  }
	| {
			Threshold: {
				min: number;
				total: [] | [number];
			};
	  } {
	return value.__kind__ === 'Equality'
		? {
				Equality: value.Equality
			}
		: value.__kind__ === 'Threshold'
			? {
					Threshold: to_candid_record_n17(value.Threshold)
				}
			: value;
}
function to_candid_variant_n2(
	value:
		| {
				__kind__: 'Default';
				Default: SolanaCluster;
		  }
		| {
				__kind__: 'Custom';
				Custom: Array<RpcSource>;
		  }
):
	| {
			Default: _SolanaCluster;
	  }
	| {
			Custom: Array<_RpcSource>;
	  } {
	return value.__kind__ === 'Default'
		? {
				Default: to_candid_SolanaCluster_n10(value.Default)
			}
		: value.__kind__ === 'Custom'
			? {
					Custom: to_candid_vec_n3(value.Custom)
				}
			: value;
}
function to_candid_variant_n200(value: Variant_base58_base64):
	| {
			base58: null;
	  }
	| {
			base64: null;
	  } {
	return value == Variant_base58_base64.base58
		? {
				base58: null
			}
		: value == Variant_base58_base64.base64
			? {
					base64: null
				}
			: value;
}
function to_candid_variant_n21(value: GetAccountInfoEncoding):
	| {
			'base64+zstd': null;
	  }
	| {
			jsonParsed: null;
	  }
	| {
			base58: null;
	  }
	| {
			base64: null;
	  } {
	return value == GetAccountInfoEncoding['base64+zstd']
		? {
				'base64+zstd': null
			}
		: value == GetAccountInfoEncoding.jsonParsed
			? {
					jsonParsed: null
				}
			: value == GetAccountInfoEncoding.base58
				? {
						base58: null
					}
				: value == GetAccountInfoEncoding.base64
					? {
							base64: null
						}
					: value;
}
function to_candid_variant_n23(value: CommitmentLevel):
	| {
			finalized: null;
	  }
	| {
			confirmed: null;
	  }
	| {
			processed: null;
	  } {
	return value == CommitmentLevel.finalized
		? {
				finalized: null
			}
		: value == CommitmentLevel.confirmed
			? {
					confirmed: null
				}
			: value == CommitmentLevel.processed
				? {
						processed: null
					}
				: value;
}
function to_candid_variant_n5(
	value:
		| {
				__kind__: 'Custom';
				Custom: RpcEndpoint;
		  }
		| {
				__kind__: 'Supported';
				Supported: SupportedProvider;
		  }
):
	| {
			Custom: _RpcEndpoint;
	  }
	| {
			Supported: _SupportedProvider;
	  } {
	return value.__kind__ === 'Custom'
		? {
				Custom: to_candid_RpcEndpoint_n8(value.Custom)
			}
		: value.__kind__ === 'Supported'
			? {
					Supported: to_candid_SupportedProvider_n6(value.Supported)
				}
			: value;
}
function to_candid_variant_n69(value: TransactionDetails):
	| {
			none: null;
	  }
	| {
			accounts: null;
	  }
	| {
			signatures: null;
	  } {
	return value == TransactionDetails.none
		? {
				none: null
			}
		: value == TransactionDetails.accounts
			? {
					accounts: null
				}
			: value == TransactionDetails.signatures
				? {
						signatures: null
					}
				: value;
}
function to_candid_variant_n7(value: SupportedProvider):
	| {
			AnkrMainnet: null;
	  }
	| {
			AlchemyDevnet: null;
	  }
	| {
			DrpcMainnet: null;
	  }
	| {
			ChainstackDevnet: null;
	  }
	| {
			AlchemyMainnet: null;
	  }
	| {
			HeliusDevnet: null;
	  }
	| {
			AnkrDevnet: null;
	  }
	| {
			DrpcDevnet: null;
	  }
	| {
			ChainstackMainnet: null;
	  }
	| {
			PublicNodeMainnet: null;
	  }
	| {
			HeliusMainnet: null;
	  } {
	return value == SupportedProvider.AnkrMainnet
		? {
				AnkrMainnet: null
			}
		: value == SupportedProvider.AlchemyDevnet
			? {
					AlchemyDevnet: null
				}
			: value == SupportedProvider.DrpcMainnet
				? {
						DrpcMainnet: null
					}
				: value == SupportedProvider.ChainstackDevnet
					? {
							ChainstackDevnet: null
						}
					: value == SupportedProvider.AlchemyMainnet
						? {
								AlchemyMainnet: null
							}
						: value == SupportedProvider.HeliusDevnet
							? {
									HeliusDevnet: null
								}
							: value == SupportedProvider.AnkrDevnet
								? {
										AnkrDevnet: null
									}
								: value == SupportedProvider.DrpcDevnet
									? {
											DrpcDevnet: null
										}
									: value == SupportedProvider.ChainstackMainnet
										? {
												ChainstackMainnet: null
											}
										: value == SupportedProvider.PublicNodeMainnet
											? {
													PublicNodeMainnet: null
												}
											: value == SupportedProvider.HeliusMainnet
												? {
														HeliusMainnet: null
													}
												: value;
}
function to_candid_variant_n70(value: Variant_finalized_confirmed):
	| {
			finalized: null;
	  }
	| {
			confirmed: null;
	  } {
	return value == Variant_finalized_confirmed.finalized
		? {
				finalized: null
			}
		: value == Variant_finalized_confirmed.confirmed
			? {
					confirmed: null
				}
			: value;
}
function to_candid_vec_n225(
	value: Array<[SupportedProvider, string | null]>
): Array<[_SupportedProvider, [] | [string]]> {
	return value.map((x) => to_candid_tuple_n226(x));
}
function to_candid_vec_n3(value: Array<RpcSource>): Array<_RpcSource> {
	return value.map((x) => to_candid_RpcSource_n4(x));
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(canisterId: string, options: CreateActorOptions = {}): Sol_rpc {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Sol_rpc(actor);
}
