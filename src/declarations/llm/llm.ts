/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import type { Principal } from '@icp-sdk/core/principal';
import { idlFactory, type _SERVICE } from './declarations/llm.did';
import type {
	assistant_message as _assistant_message,
	chat_message_v0 as _chat_message_v0,
	chat_message_v1 as _chat_message_v1,
	chat_request_v0 as _chat_request_v0,
	chat_request_v1 as _chat_request_v1,
	chat_response_v1 as _chat_response_v1,
	parameters as _parameters,
	property as _property,
	tool as _tool,
	tool_call_argument as _tool_call_argument
} from './declarations/llm.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export interface tool_call_argument {
	value: string;
	name: string;
}
export interface chat_request_v0 {
	model: string;
	messages: Array<chat_message_v0>;
}
export interface config {
	workers_whitelist:
		| {
				__kind__: 'all';
				all: null;
		  }
		| {
				__kind__: 'some';
				some: Array<Principal>;
		  };
	api_disabled: boolean;
}
export type tool = {
	__kind__: 'function';
	function: {
		name: string;
		parameters?: parameters;
		description?: string;
	};
};
export interface property {
	enum?: Array<string>;
	name: string;
	type: string;
	description?: string;
}
export interface parameters {
	type: string;
	properties?: Array<property>;
	required?: Array<string>;
}
export interface chat_request_v1 {
	model: string;
	tools?: Array<tool>;
	messages: Array<chat_message_v1>;
}
export type chat_message_v1 =
	| {
			__kind__: 'tool';
			tool: {
				content: string;
				tool_call_id: string;
			};
	  }
	| {
			__kind__: 'user';
			user: {
				content: string;
			};
	  }
	| {
			__kind__: 'assistant';
			assistant: assistant_message;
	  }
	| {
			__kind__: 'system';
			system: {
				content: string;
			};
	  };
export interface chat_response_v1 {
	message: assistant_message;
}
export interface chat_message_v0 {
	content: string;
	role: Variant_user_assistant_system;
}
export interface assistant_message {
	content?: string;
	tool_calls: Array<{
		id: string;
		function: {
			name: string;
			arguments: Array<tool_call_argument>;
		};
	}>;
}
export type backend_config =
	| {
			__kind__: 'worker';
			worker: null;
	  }
	| {
			__kind__: 'ollama';
			ollama: null;
	  }
	| {
			__kind__: 'openrouter';
			openrouter: {
				api_key: string;
			};
	  };
export enum Variant_user_assistant_system {
	user = 'user',
	assistant = 'assistant',
	system = 'system'
}
export interface llmInterface {
	v0_chat(arg0: chat_request_v0): Promise<string>;
	v1_chat(arg0: chat_request_v1): Promise<chat_response_v1>;
}
export class Llm implements llmInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async v0_chat(arg0: chat_request_v0): Promise<string> {
		const result = await this.actor.v0_chat(to_candid_chat_request_v0_n1(arg0));
		return result;
	}
	async v1_chat(arg0: chat_request_v1): Promise<chat_response_v1> {
		const result = await this.actor.v1_chat(to_candid_chat_request_v1_n7(arg0));
		return from_candid_chat_response_v1_n23(result);
	}
}
function from_candid_assistant_message_n25(value: _assistant_message): assistant_message {
	return from_candid_record_n26(value);
}
function from_candid_chat_response_v1_n23(value: _chat_response_v1): chat_response_v1 {
	return from_candid_record_n24(value);
}
function from_candid_opt_n27(value: [] | [string]): string | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_record_n24(value: { message: _assistant_message }): {
	message: assistant_message;
} {
	return {
		message: from_candid_assistant_message_n25(value.message)
	};
}
function from_candid_record_n26(value: {
	content: [] | [string];
	tool_calls: Array<{
		id: string;
		function: {
			name: string;
			arguments: Array<_tool_call_argument>;
		};
	}>;
}): {
	content?: string;
	tool_calls: Array<{
		id: string;
		function: {
			name: string;
			arguments: Array<tool_call_argument>;
		};
	}>;
} {
	return {
		content: record_opt_to_undefined(from_candid_opt_n27(value.content)),
		tool_calls: value.tool_calls
	};
}
function to_candid_assistant_message_n21(value: assistant_message): _assistant_message {
	return to_candid_record_n22(value);
}
function to_candid_chat_message_v0_n4(value: chat_message_v0): _chat_message_v0 {
	return to_candid_record_n5(value);
}
function to_candid_chat_message_v1_n19(value: chat_message_v1): _chat_message_v1 {
	return to_candid_variant_n20(value);
}
function to_candid_chat_request_v0_n1(value: chat_request_v0): _chat_request_v0 {
	return to_candid_record_n2(value);
}
function to_candid_chat_request_v1_n7(value: chat_request_v1): _chat_request_v1 {
	return to_candid_record_n8(value);
}
function to_candid_parameters_n13(value: parameters): _parameters {
	return to_candid_record_n14(value);
}
function to_candid_property_n16(value: property): _property {
	return to_candid_record_n17(value);
}
function to_candid_record_n12(value: {
	name: string;
	parameters?: parameters;
	description?: string;
}): {
	name: string;
	parameters: [] | [_parameters];
	description: [] | [string];
} {
	return {
		name: value.name,
		parameters: value.parameters
			? candid_some(to_candid_parameters_n13(value.parameters))
			: candid_none(),
		description: value.description ? candid_some(value.description) : candid_none()
	};
}
function to_candid_record_n14(value: {
	type: string;
	properties?: Array<property>;
	required?: Array<string>;
}): {
	type: string;
	properties: [] | [Array<_property>];
	required: [] | [Array<string>];
} {
	return {
		type: value.type,
		properties: value.properties ? candid_some(to_candid_vec_n15(value.properties)) : candid_none(),
		required: value.required ? candid_some(value.required) : candid_none()
	};
}
function to_candid_record_n17(value: {
	enum?: Array<string>;
	name: string;
	type: string;
	description?: string;
}): {
	enum: [] | [Array<string>];
	name: string;
	type: string;
	description: [] | [string];
} {
	return {
		enum: value.enum ? candid_some(value.enum) : candid_none(),
		name: value.name,
		type: value.type,
		description: value.description ? candid_some(value.description) : candid_none()
	};
}
function to_candid_record_n2(value: { model: string; messages: Array<chat_message_v0> }): {
	model: string;
	messages: Array<_chat_message_v0>;
} {
	return {
		model: value.model,
		messages: to_candid_vec_n3(value.messages)
	};
}
function to_candid_record_n22(value: {
	content?: string;
	tool_calls: Array<{
		id: string;
		function: {
			name: string;
			arguments: Array<tool_call_argument>;
		};
	}>;
}): {
	content: [] | [string];
	tool_calls: Array<{
		id: string;
		function: {
			name: string;
			arguments: Array<_tool_call_argument>;
		};
	}>;
} {
	return {
		content: value.content ? candid_some(value.content) : candid_none(),
		tool_calls: value.tool_calls
	};
}
function to_candid_record_n5(value: { content: string; role: Variant_user_assistant_system }): {
	content: string;
	role:
		| {
				user: null;
		  }
		| {
				assistant: null;
		  }
		| {
				system: null;
		  };
} {
	return {
		content: value.content,
		role: to_candid_variant_n6(value.role)
	};
}
function to_candid_record_n8(value: {
	model: string;
	tools?: Array<tool>;
	messages: Array<chat_message_v1>;
}): {
	model: string;
	tools: [] | [Array<_tool>];
	messages: Array<_chat_message_v1>;
} {
	return {
		model: value.model,
		tools: value.tools ? candid_some(to_candid_vec_n9(value.tools)) : candid_none(),
		messages: to_candid_vec_n18(value.messages)
	};
}
function to_candid_tool_n10(value: tool): _tool {
	return to_candid_variant_n11(value);
}
function to_candid_variant_n11(value: {
	__kind__: 'function';
	function: {
		name: string;
		parameters?: parameters;
		description?: string;
	};
}): {
	function: {
		name: string;
		parameters: [] | [_parameters];
		description: [] | [string];
	};
} {
	return value.__kind__ === 'function'
		? {
				function: to_candid_record_n12(value.function)
			}
		: value;
}
function to_candid_variant_n20(
	value:
		| {
				__kind__: 'tool';
				tool: {
					content: string;
					tool_call_id: string;
				};
		  }
		| {
				__kind__: 'user';
				user: {
					content: string;
				};
		  }
		| {
				__kind__: 'assistant';
				assistant: assistant_message;
		  }
		| {
				__kind__: 'system';
				system: {
					content: string;
				};
		  }
):
	| {
			tool: {
				content: string;
				tool_call_id: string;
			};
	  }
	| {
			user: {
				content: string;
			};
	  }
	| {
			assistant: _assistant_message;
	  }
	| {
			system: {
				content: string;
			};
	  } {
	return value.__kind__ === 'tool'
		? {
				tool: value.tool
			}
		: value.__kind__ === 'user'
			? {
					user: value.user
				}
			: value.__kind__ === 'assistant'
				? {
						assistant: to_candid_assistant_message_n21(value.assistant)
					}
				: value.__kind__ === 'system'
					? {
							system: value.system
						}
					: value;
}
function to_candid_variant_n6(value: Variant_user_assistant_system):
	| {
			user: null;
	  }
	| {
			assistant: null;
	  }
	| {
			system: null;
	  } {
	return value == Variant_user_assistant_system.user
		? {
				user: null
			}
		: value == Variant_user_assistant_system.assistant
			? {
					assistant: null
				}
			: value == Variant_user_assistant_system.system
				? {
						system: null
					}
				: value;
}
function to_candid_vec_n15(value: Array<property>): Array<_property> {
	return value.map((x) => to_candid_property_n16(x));
}
function to_candid_vec_n18(value: Array<chat_message_v1>): Array<_chat_message_v1> {
	return value.map((x) => to_candid_chat_message_v1_n19(x));
}
function to_candid_vec_n3(value: Array<chat_message_v0>): Array<_chat_message_v0> {
	return value.map((x) => to_candid_chat_message_v0_n4(x));
}
function to_candid_vec_n9(value: Array<tool>): Array<_tool> {
	return value.map((x) => to_candid_tool_n10(x));
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(canisterId: string, options: CreateActorOptions = {}): Llm {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Llm(actor);
}
