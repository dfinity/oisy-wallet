/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import { idlFactory, type _SERVICE } from './declarations/kong_backend.did';
import type {
	AddLiquiditAmountsResult as _AddLiquiditAmountsResult,
	AddLiquidityAmountsReply as _AddLiquidityAmountsReply,
	AddLiquidityArgs as _AddLiquidityArgs,
	AddLiquidityAsyncResult as _AddLiquidityAsyncResult,
	AddLiquidityReply as _AddLiquidityReply,
	AddLiquidityResult as _AddLiquidityResult,
	AddPoolArgs as _AddPoolArgs,
	AddPoolReply as _AddPoolReply,
	AddPoolResult as _AddPoolResult,
	AddTokenReply as _AddTokenReply,
	AddTokenResult as _AddTokenResult,
	CheckPoolsReply as _CheckPoolsReply,
	CheckPoolsResult as _CheckPoolsResult,
	ClaimReply as _ClaimReply,
	ClaimResult as _ClaimResult,
	ClaimsReply as _ClaimsReply,
	ClaimsResult as _ClaimsResult,
	ICTokenReply as _ICTokenReply,
	ICTransferReply as _ICTransferReply,
	LPBalancesReply as _LPBalancesReply,
	LPTokenReply as _LPTokenReply,
	PoolReply as _PoolReply,
	PoolsResult as _PoolsResult,
	RemoveLiquidityAmountsReply as _RemoveLiquidityAmountsReply,
	RemoveLiquidityAmountsResult as _RemoveLiquidityAmountsResult,
	RemoveLiquidityArgs as _RemoveLiquidityArgs,
	RemoveLiquidityAsyncResult as _RemoveLiquidityAsyncResult,
	RemoveLiquidityReply as _RemoveLiquidityReply,
	RemoveLiquidityResult as _RemoveLiquidityResult,
	RequestReply as _RequestReply,
	RequestRequest as _RequestRequest,
	RequestsReply as _RequestsReply,
	RequestsResult as _RequestsResult,
	SendReply as _SendReply,
	SendResult as _SendResult,
	SwapAmountsReply as _SwapAmountsReply,
	SwapAmountsResult as _SwapAmountsResult,
	SwapArgs as _SwapArgs,
	SwapAsyncResult as _SwapAsyncResult,
	SwapReply as _SwapReply,
	SwapResult as _SwapResult,
	SwapTxReply as _SwapTxReply,
	TokenReply as _TokenReply,
	TokensResult as _TokensResult,
	TransferIdReply as _TransferIdReply,
	TransferReply as _TransferReply,
	TxId as _TxId,
	UpdateTokenReply as _UpdateTokenReply,
	UpdateTokenResult as _UpdateTokenResult,
	UserBalancesReply as _UserBalancesReply,
	UserBalancesResult as _UserBalancesResult,
	UserReply as _UserReply,
	UserResult as _UserResult,
	ValidateAddLiquidityResult as _ValidateAddLiquidityResult,
	ValidateRemoveLiquidityResult as _ValidateRemoveLiquidityResult,
	icrc21_consent_info as _icrc21_consent_info,
	icrc21_consent_message as _icrc21_consent_message,
	icrc21_consent_message_metadata as _icrc21_consent_message_metadata,
	icrc21_consent_message_request as _icrc21_consent_message_request,
	icrc21_consent_message_response as _icrc21_consent_message_response,
	icrc21_consent_message_spec as _icrc21_consent_message_spec,
	icrc21_error as _icrc21_error,
	icrc21_error_info as _icrc21_error_info
} from './declarations/kong_backend.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export interface AddTokenArgs {
	token: string;
}
export type CheckPoolsResult =
	| {
			__kind__: 'Ok';
			Ok: Array<CheckPoolsReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface RemoveLiquidityArgs {
	token_0: string;
	token_1: string;
	remove_lp_token_amount: bigint;
}
export interface icrc21_consent_message_spec {
	/**
	 * Metadata of the consent message.
	 */
	metadata: icrc21_consent_message_metadata;
	/**
	 * Information about the device responsible for presenting the consent message to the user.
	 * If absent in the request, the canister should fallback to one of the values defined in this spec (ICRC-21).
	 */
	device_spec?:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  };
}
export type UpdateTokenReply = {
	__kind__: 'IC';
	IC: ICTokenReply;
};
export interface Icrc28TrustedOriginsResponse {
	trusted_origins: Array<string>;
}
export type TxId =
	| {
			__kind__: 'TransactionId';
			TransactionId: string;
	  }
	| {
			__kind__: 'BlockIndex';
			BlockIndex: bigint;
	  };
export interface PoolReply {
	lp_token_symbol: string;
	name: string;
	lp_fee_0: bigint;
	lp_fee_1: bigint;
	balance_0: bigint;
	balance_1: bigint;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	pool_id: number;
	price: number;
	chain_0: string;
	chain_1: string;
	is_removed: boolean;
	symbol: string;
	lp_fee_bps: number;
}
export interface TransferIdReply {
	transfer_id: bigint;
	transfer: TransferReply;
}
export interface LPBalancesReply {
	ts: bigint;
	usd_balance: number;
	balance: number;
	name: string;
	amount_0: number;
	amount_1: number;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	usd_amount_0: number;
	usd_amount_1: number;
	chain_0: string;
	chain_1: string;
	symbol: string;
	lp_token_id: bigint;
}
export type icrc21_consent_message =
	| {
			__kind__: 'LineDisplayMessage';
			/**
			 * Message for a simple display able to handle pages with multiple lines of text with a fixed maximum number of
			 * characters per line.
			 * Multiple pages can be used if the text does no fit on a single page.
			 * Uses plain text, without any embedded formatting elements.
			 */
			LineDisplayMessage: {
				pages: Array<{
					/**
					 * Lines of text to be displayed on a single page.
					 * Must not have more entries (lines) than specified in the icrc21_consent_message_spec.
					 * Lines must not exceed the number of characters per line specified in the icrc21_consent_message_spec.
					 */
					lines: Array<string>;
				}>;
			};
	  }
	| {
			__kind__: 'GenericDisplayMessage';
			/**
			 * Message for a generic display able to handle large documents and do proper line wrapping and pagination / scrolling.
			 * Uses Markdown formatting, no external resources (e.g. images) are allowed.
			 */
			GenericDisplayMessage: string;
	  };
export type TxsReply =
	| {
			__kind__: 'AddLiquidity';
			AddLiquidity: AddLiquidityReply;
	  }
	| {
			__kind__: 'Swap';
			Swap: SwapReply;
	  }
	| {
			__kind__: 'AddPool';
			AddPool: AddPoolReply;
	  }
	| {
			__kind__: 'RemoveLiquidity';
			RemoveLiquidity: RemoveLiquidityReply;
	  };
export type UpdateTokenResult =
	| {
			__kind__: 'Ok';
			Ok: UpdateTokenReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type ValidateAddLiquidityResult =
	| {
			__kind__: 'Ok';
			Ok: string;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface RemoveLiquidityReply {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	transfer_ids: Array<TransferIdReply>;
	lp_fee_0: bigint;
	lp_fee_1: bigint;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	chain_0: string;
	chain_1: string;
	remove_lp_token_amount: bigint;
	symbol: string;
}
export type RequestReply =
	| {
			__kind__: 'AddLiquidity';
			AddLiquidity: AddLiquidityReply;
	  }
	| {
			__kind__: 'Swap';
			Swap: SwapReply;
	  }
	| {
			__kind__: 'AddPool';
			AddPool: AddPoolReply;
	  }
	| {
			__kind__: 'RemoveLiquidity';
			RemoveLiquidity: RemoveLiquidityReply;
	  }
	| {
			__kind__: 'Pending';
			Pending: null;
	  };
export interface SwapAmountsTxReply {
	receive_chain: string;
	pay_amount: bigint;
	receive_amount: bigint;
	pay_symbol: string;
	receive_symbol: string;
	receive_address: string;
	pool_symbol: string;
	pay_address: string;
	price: number;
	pay_chain: string;
	lp_fee: bigint;
	gas_fee: bigint;
}
export interface SwapTxReply {
	ts: bigint;
	receive_chain: string;
	pay_amount: bigint;
	receive_amount: bigint;
	pay_symbol: string;
	receive_symbol: string;
	receive_address: string;
	pool_symbol: string;
	pay_address: string;
	price: number;
	pay_chain: string;
	lp_fee: bigint;
	gas_fee: bigint;
}
export interface ClaimsReply {
	ts: bigint;
	fee: bigint;
	status: string;
	claim_id: bigint;
	desc: string;
	chain: string;
	canister_id?: string;
	to_address: string;
	amount: bigint;
	symbol: string;
}
export type ClaimsResult =
	| {
			__kind__: 'Ok';
			Ok: Array<ClaimsReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface ExpectedBalance {
	balance: bigint;
	pool_balances: Array<PoolExpectedBalance>;
	unclaimed_claims: bigint;
}
export type SendResult =
	| {
			__kind__: 'OK';
			OK: SendReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type ValidateRemoveLiquidityResult =
	| {
			__kind__: 'Ok';
			Ok: string;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface SendArgs {
	token: string;
	to_address: string;
	amount: bigint;
}
export type TransfersResult =
	| {
			__kind__: 'Ok';
			Ok: Array<TransferIdReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface SwapArgs {
	receive_token: string;
	max_slippage?: number;
	pay_amount: bigint;
	referred_by?: string;
	receive_amount?: bigint;
	receive_address?: string;
	pay_token: string;
	pay_tx_id?: TxId;
}
export type AddTokenResult =
	| {
			__kind__: 'Ok';
			Ok: AddTokenReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface SendReply {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	chain: string;
	to_address: string;
	amount: bigint;
	symbol: string;
}
export interface RequestsReply {
	ts: bigint;
	request_id: bigint;
	request: RequestRequest;
	statuses: Array<string>;
	reply: RequestReply;
}
export type PoolsResult =
	| {
			__kind__: 'Ok';
			Ok: Array<PoolReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type TxsResult =
	| {
			__kind__: 'Ok';
			Ok: Array<TxsReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface AddLiquidityAmountsReply {
	add_lp_token_amount: bigint;
	amount_0: bigint;
	amount_1: bigint;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	chain_0: string;
	chain_1: string;
	symbol: string;
	fee_0: bigint;
	fee_1: bigint;
}
export type RemoveLiquidityResult =
	| {
			__kind__: 'Ok';
			Ok: RemoveLiquidityReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface ICTransferReply {
	is_send: boolean;
	block_index: bigint;
	chain: string;
	canister_id: string;
	amount: bigint;
	symbol: string;
}
export interface AddLiquidityArgs {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0?: TxId;
	tx_id_1?: TxId;
}
export interface MessagesReply {
	ts: bigint;
	title: string;
	message: string;
	message_id: bigint;
}
export type UserBalancesResult =
	| {
			__kind__: 'Ok';
			Ok: Array<UserBalancesReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface AddPoolReply {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	lp_token_symbol: string;
	add_lp_token_amount: bigint;
	transfer_ids: Array<TransferIdReply>;
	name: string;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	pool_id: number;
	chain_0: string;
	chain_1: string;
	is_removed: boolean;
	symbol: string;
	lp_fee_bps: number;
}
export type TransferReply = {
	__kind__: 'IC';
	IC: ICTransferReply;
};
export type UserResult =
	| {
			__kind__: 'Ok';
			Ok: UserReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface icrc21_consent_message_request {
	/**
	 * Argument of the canister call.
	 */
	arg: Uint8Array;
	/**
	 * Method name of the canister call.
	 */
	method: string;
	/**
	 * User preferences with regards to the consent message presented to the end-user.
	 */
	user_preferences: icrc21_consent_message_spec;
}
export type UserBalancesReply = {
	__kind__: 'LP';
	LP: LPBalancesReply;
};
export interface UpdateTokenArgs {
	token: string;
}
export interface SwapReply {
	ts: bigint;
	txs: Array<SwapTxReply>;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	transfer_ids: Array<TransferIdReply>;
	receive_chain: string;
	mid_price: number;
	pay_amount: bigint;
	receive_amount: bigint;
	claim_ids: BigUint64Array;
	pay_symbol: string;
	receive_symbol: string;
	receive_address: string;
	pay_address: string;
	price: number;
	pay_chain: string;
	slippage: number;
}
export interface SwapAmountsReply {
	txs: Array<SwapAmountsTxReply>;
	receive_chain: string;
	mid_price: number;
	pay_amount: bigint;
	receive_amount: bigint;
	pay_symbol: string;
	receive_symbol: string;
	receive_address: string;
	pay_address: string;
	price: number;
	pay_chain: string;
	slippage: number;
}
export interface icrc21_consent_message_metadata {
	/**
	 * The users local timezone offset in minutes from UTC.
	 * Applicable when converting timestamps to human-readable format.
	 *
	 * If absent in the request, the canister should fallback to the UTC timezone when creating the consent message.
	 * If absent in the response, the canister is indicating that the consent message is not timezone sensitive.
	 */
	utc_offset_minutes?: number;
	/**
	 * BCP-47 language tag. See https://www.rfc-editor.org/rfc/bcp/bcp47.txt
	 */
	language: string;
}
export type RequestsResult =
	| {
			__kind__: 'Ok';
			Ok: Array<RequestsReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type AddTokenReply = {
	__kind__: 'IC';
	IC: ICTokenReply;
};
export type SwapAsyncResult =
	| {
			__kind__: 'Ok';
			Ok: bigint;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type ClaimResult =
	| {
			__kind__: 'Ok';
			Ok: ClaimReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface RemoveLiquidityAmountsReply {
	lp_fee_0: bigint;
	lp_fee_1: bigint;
	amount_0: bigint;
	amount_1: bigint;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	chain_0: string;
	chain_1: string;
	remove_lp_token_amount: bigint;
	symbol: string;
}
export type SwapAmountsResult =
	| {
			__kind__: 'Ok';
			Ok: SwapAmountsReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface AddPoolArgs {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0?: TxId;
	tx_id_1?: TxId;
	lp_fee_bps?: number;
}
export interface ClaimReply {
	ts: bigint;
	fee: bigint;
	status: string;
	claim_id: bigint;
	transfer_ids: Array<TransferIdReply>;
	desc: string;
	chain: string;
	canister_id?: string;
	to_address: string;
	amount: bigint;
	symbol: string;
}
export interface Icrc10SupportedStandards {
	url: string;
	name: string;
}
export type icrc21_consent_message_response =
	| {
			__kind__: 'Ok';
			/**
			 * The call is ok, consent message is provided.
			 */
			Ok: icrc21_consent_info;
	  }
	| {
			__kind__: 'Err';
			/**
			 * The call is not ok, error is provided.
			 */
			Err: icrc21_error;
	  };
export interface icrc21_consent_info {
	/**
	 * Metadata of the consent_message.
	 */
	metadata: icrc21_consent_message_metadata;
	/**
	 * Consent message describing in a human-readable format what the call will do.
	 *
	 * The message should adhere as close as possible to the user_preferences specified in the consent_message_spec
	 * of the icrc21_consent_message_request.
	 * If the message is not available for the given user_preferences any fallback message should be used. Providing a
	 * message should be preferred over sending an icrc21_error.
	 * The metadata must match the consent_message provided.
	 *
	 * The message should be short and concise.
	 * It should only contain information that is:
	 * * relevant to the user
	 * * relevant given the canister call argument
	 *
	 * The message must fit the following context shown to
	 * the user on the signer UI:
	 * ┌─────────────────────────────────┐
	 * │  Approve the following action?  │
	 * │  ┌───────────────────────────┐  │
	 * │  │    <consent_message>      │  │
	 * │  └───────────────────────────┘  │
	 * │  ┌───────────┐   ┌───────────┐  │
	 * │  │  Reject   │   │  Approve  │  │
	 * │  └───────────┘   └───────────┘  │
	 * └─────────────────────────────────┘
	 */
	consent_message: icrc21_consent_message;
}
export interface ICTokenReply {
	fee: bigint;
	decimals: number;
	token_id: number;
	chain: string;
	name: string;
	canister_id: string;
	icrc1: boolean;
	icrc2: boolean;
	icrc3: boolean;
	is_removed: boolean;
	symbol: string;
}
export interface PoolExpectedBalance {
	balance: bigint;
	kong_fee: bigint;
	pool_symbol: string;
	lp_fee: bigint;
}
export interface icrc21_error_info {
	/**
	 * Human readable technical description of the error intended for developers, not the end-user.
	 */
	description: string;
}
export interface LPTokenReply {
	fee: bigint;
	decimals: number;
	token_id: number;
	chain: string;
	name: string;
	address: string;
	pool_id_of: number;
	is_removed: boolean;
	total_supply: bigint;
	symbol: string;
}
export type RequestRequest =
	| {
			__kind__: 'AddLiquidity';
			AddLiquidity: AddLiquidityArgs;
	  }
	| {
			__kind__: 'Swap';
			Swap: SwapArgs;
	  }
	| {
			__kind__: 'AddPool';
			AddPool: AddPoolArgs;
	  }
	| {
			__kind__: 'RemoveLiquidity';
			RemoveLiquidity: RemoveLiquidityArgs;
	  };
export type TokensResult =
	| {
			__kind__: 'Ok';
			Ok: Array<TokenReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface UserReply {
	account_id: string;
	fee_level_expires_at?: bigint;
	referred_by?: string;
	user_id: number;
	fee_level: number;
	principal_id: string;
	referred_by_expires_at?: bigint;
	my_referral_code: string;
}
export type AddLiquidityAsyncResult =
	| {
			__kind__: 'Ok';
			Ok: bigint;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type RemoveLiquidityAsyncResult =
	| {
			__kind__: 'Ok';
			Ok: bigint;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type AddPoolResult =
	| {
			__kind__: 'Ok';
			Ok: AddPoolReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface AddLiquidityReply {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	add_lp_token_amount: bigint;
	transfer_ids: Array<TransferIdReply>;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	chain_0: string;
	chain_1: string;
	symbol: string;
}
export interface CheckPoolsReply {
	expected_balance: ExpectedBalance;
	diff_balance: bigint;
	actual_balance: bigint;
	symbol: string;
}
export type SwapResult =
	| {
			__kind__: 'Ok';
			Ok: SwapReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type TokenReply =
	| {
			__kind__: 'IC';
			IC: ICTokenReply;
	  }
	| {
			__kind__: 'LP';
			LP: LPTokenReply;
	  };
export type AddLiquidityResult =
	| {
			__kind__: 'Ok';
			Ok: AddLiquidityReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type icrc21_error =
	| {
			__kind__: 'GenericError';
			/**
			 * Any error not covered by the above variants.
			 */
			GenericError: {
				/**
				 * Human readable technical description of the error intended for developers, not the end-user.
				 */
				description: string;
				/**
				 * Machine parsable error. Can be chosen by the target canister but should indicate the error category.
				 */
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'InsufficientPayment';
			/**
			 * The canister did not provide a consent message for because payment was missing or insufficient.
			 *
			 * This error is used to account for payment extensions to be added in the future:
			 * While small consent messages are easy and cheap to provide, this might not generally be the case for all consent
			 * messages. To avoid future breaking changes, when introducing a payment flow, this error is already introduced
			 * even though there no standardized payment flow yet.
			 */
			InsufficientPayment: icrc21_error_info;
	  }
	| {
			__kind__: 'UnsupportedCanisterCall';
			/**
			 * The canister does not support this call (i.e. it will lead to a rejection or error response).
			 * Reasons might be (non-exhaustive list):
			 * * the canister call is malformed (e.g. wrong method name, argument cannot be decoded)
			 * * the arguments exceed certain bounds
			 *
			 * The developer should provide more information about the error using the description in icrc21_error_info.
			 */
			UnsupportedCanisterCall: icrc21_error_info;
	  }
	| {
			__kind__: 'ConsentMessageUnavailable';
			/**
			 * The canister cannot produce a consent message for this call.
			 * Reasons might be (non-exhaustive list):
			 * * it is an internal call not intended for end-users
			 * * the canister developer has not yet implemented a consent message for this call
			 *
			 * The developer should provide more information about the error using the description in icrc21_error_info.
			 */
			ConsentMessageUnavailable: icrc21_error_info;
	  };
export type RemoveLiquidityAmountsResult =
	| {
			__kind__: 'Ok';
			Ok: RemoveLiquidityAmountsReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type AddLiquiditAmountsResult =
	| {
			__kind__: 'Ok';
			Ok: AddLiquidityAmountsReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type MessagesResult =
	| {
			__kind__: 'Ok';
			Ok: Array<MessagesReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export interface kong_backendInterface {
	/**
	 * adds token_0 and token_1 to the liqudity pool in return for LP tokens
	 * - add_liquidity() has 2 variations:
	 * 1) 2 x icrc2_approve + icrc2_transfer_from - user must icrc2_approve the amount_0+gas of token_0, amount_1+gas of token_1 and then call add_liquidity() where the canister will then icrc2_transfer_from
	 * 2) 2 x icrc1_transfer - user must icrc1_transfer the amount_0 of token_0, amount_1 of token_1 and then call add_liquidity() with the block index (tx_id_0 and tx_id_1)
	 */
	add_liquidity(arg0: AddLiquidityArgs): Promise<AddLiquidityResult>;
	/**
	 * add_liquidity_amounts(token_0, amount_0, token_1)
	 * token_0, token_1 - format Symbol, Chain.Symbol, CanisterId or Chain.CanisterId ie. ckBTC, IC.ckBTC, or IC.ryjl3-tyaaa-aaaaa-aaaba-cai
	 * amount_0, amount_1 - Nat numbers with corresponding decimal precision as defined in ledger canister
	 * - calculates the required amount_1 to add liquidity to pool
	 * - results of add_liquidity_amounts() are then pass to add_liquidity() for execution
	 */
	add_liquidity_amounts(
		arg0: string,
		arg1: bigint,
		arg2: string
	): Promise<AddLiquiditAmountsResult>;
	/**
	 * asnychronous version of add_liquidity()
	 * request_id will be returned by add_liquidity_async() and poll requests(request_id) to get updated status
	 */
	add_liquidity_async(arg0: AddLiquidityArgs): Promise<AddLiquidityAsyncResult>;
	/**
	 * add a new liquidity pool and token
	 */
	add_pool(arg0: AddPoolArgs): Promise<AddPoolResult>;
	/**
	 * add a new token
	 */
	add_token(arg0: AddTokenArgs): Promise<AddTokenResult>;
	/**
	 * admin functions
	 */
	check_pools(): Promise<CheckPoolsResult>;
	/**
	 * claim(claim_id) - claim claim_id
	 */
	claim(arg0: bigint): Promise<ClaimResult>;
	/**
	 * claims(principal_id) - return list of claims for user
	 */
	claims(arg0: string): Promise<ClaimsResult>;
	/**
	 * user() - returns user information
	 */
	get_user(): Promise<UserResult>;
	icrc10_supported_standards(): Promise<Array<Icrc10SupportedStandards>>;
	/**
	 * icrc1 standards
	 */
	icrc1_name(): Promise<string>;
	icrc21_canister_call_consent_message(
		arg0: icrc21_consent_message_request
	): Promise<icrc21_consent_message_response>;
	icrc28_trusted_origins(): Promise<Icrc28TrustedOriginsResponse>;
	/**
	 * pools(opt wildcard) - returns all pools or wildcard search
	 */
	pools(arg0: string | null): Promise<PoolsResult>;
	/**
	 * redeems remove_lp_token_amount of LP tokens to the pool and receives token_0 and token_1 in return
	 */
	remove_liquidity(arg0: RemoveLiquidityArgs): Promise<RemoveLiquidityResult>;
	/**
	 * remove_liquidity_amounts(token_0, token_1, remove_lp_token_amount)
	 * calcalates the expected token_0 and token_1 to be received from redeeming remove_lp_token_amount of LP tokens to the pool
	 */
	remove_liquidity_amounts(
		arg0: string,
		arg1: string,
		arg2: bigint
	): Promise<RemoveLiquidityAmountsResult>;
	/**
	 * asnychronous version of remove_liquidity()
	 * request_id will be returned by remove_liquidity_async() and poll requests(request_id) to get updated status
	 */
	remove_liquidity_async(arg0: RemoveLiquidityArgs): Promise<RemoveLiquidityAsyncResult>;
	/**
	 * requests(opt request_id) - return specific request_id
	 */
	requests(arg0: bigint | null): Promise<RequestsResult>;
	/**
	 * send LP tokens to another user
	 */
	send(arg0: SendArgs): Promise<SendResult>;
	/**
	 * swap()
	 * pay_token, receive_token - format Symbol, Chain.Symbol, CanisterId or Chain.CanisterId ie. ckBTC, IC.ckBTC, or IC.ryjl3-tyaaa-aaaaa-aaaba-cai
	 * pay_amount, receive_amount - Nat numbers with corresponding decimal precision as defined in ledger canister
	 * - swaps pay_amount of pay_token into receive_amount of receive_token
	 * - swap() has 2 variations:
	 * 1) icrc2_approve + icrc2_transfer_from - user must icrc2_approve the pay_amount+gas of pay_token and then call swap() where the canister will then icrc2_transfer_from
	 * 2) icrc1_transfer - user must icrc1_transfer the pay_amount of pay_token and then call swap() with the block index
	 */
	swap(arg0: SwapArgs): Promise<SwapResult>;
	/**
	 * swap_amounts(pay_token, pay_amount, receive_token)
	 * pay_token, receive_token - format Symbol, Chain.Symbol, CanisterId or Chain.CanisterId ie. ckBTC, IC.ckBTC, or IC.ryjl3-tyaaa-aaaaa-aaaba-cai
	 * pay_amount, receive_amount - Nat numbers with corresponding decimal precision as defined in ledger canister
	 * - calculates the expected receive_amount and price of the swap
	 * - results of swap_amounts() are then pass to swap() for execution
	 */
	swap_amounts(arg0: string, arg1: bigint, arg2: string): Promise<SwapAmountsResult>;
	/**
	 * asnychronous version of swap()
	 * request_id will be returned by swap_async() and poll requests(request_id) to get updated status
	 */
	swap_async(arg0: SwapArgs): Promise<SwapAsyncResult>;
	/**
	 * tokens(opt wildcard) - returns all tokens or wildcard search
	 */
	tokens(arg0: string | null): Promise<TokensResult>;
	/**
	 * update token details
	 */
	update_token(arg0: UpdateTokenArgs): Promise<UpdateTokenResult>;
	/**
	 * user_balances(principal_id) - return user's LP balances
	 */
	user_balances(arg0: string): Promise<UserBalancesResult>;
	/**
	 * validate add_liquidity for SNS proposals
	 */
	validate_add_liquidity(): Promise<ValidateAddLiquidityResult>;
	/**
	 * validate remove_liquidity for SNS proposals
	 */
	validate_remove_liquidity(): Promise<ValidateRemoveLiquidityResult>;
}
export class Kong_backend implements kong_backendInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async add_liquidity(arg0: AddLiquidityArgs): Promise<AddLiquidityResult> {
		const result = await this.actor.add_liquidity(to_candid_AddLiquidityArgs_n1(arg0));
		return from_candid_AddLiquidityResult_n5(result);
	}
	async add_liquidity_amounts(
		arg0: string,
		arg1: bigint,
		arg2: string
	): Promise<AddLiquiditAmountsResult> {
		const result = await this.actor.add_liquidity_amounts(arg0, arg1, arg2);
		return from_candid_AddLiquiditAmountsResult_n14(result);
	}
	async add_liquidity_async(arg0: AddLiquidityArgs): Promise<AddLiquidityAsyncResult> {
		const result = await this.actor.add_liquidity_async(to_candid_AddLiquidityArgs_n1(arg0));
		return from_candid_AddLiquidityAsyncResult_n16(result);
	}
	async add_pool(arg0: AddPoolArgs): Promise<AddPoolResult> {
		const result = await this.actor.add_pool(to_candid_AddPoolArgs_n18(arg0));
		return from_candid_AddPoolResult_n20(result);
	}
	async add_token(arg0: AddTokenArgs): Promise<AddTokenResult> {
		const result = await this.actor.add_token(arg0);
		return from_candid_AddTokenResult_n24(result);
	}
	async check_pools(): Promise<CheckPoolsResult> {
		const result = await this.actor.check_pools();
		return from_candid_CheckPoolsResult_n28(result);
	}
	async claim(arg0: bigint): Promise<ClaimResult> {
		const result = await this.actor.claim(arg0);
		return from_candid_ClaimResult_n30(result);
	}
	async claims(arg0: string): Promise<ClaimsResult> {
		const result = await this.actor.claims(arg0);
		return from_candid_ClaimsResult_n35(result);
	}
	async get_user(): Promise<UserResult> {
		const result = await this.actor.get_user();
		return from_candid_UserResult_n40(result);
	}
	async icrc10_supported_standards(): Promise<Array<Icrc10SupportedStandards>> {
		const result = await this.actor.icrc10_supported_standards();
		return result;
	}
	async icrc1_name(): Promise<string> {
		const result = await this.actor.icrc1_name();
		return result;
	}
	async icrc21_canister_call_consent_message(
		arg0: icrc21_consent_message_request
	): Promise<icrc21_consent_message_response> {
		const result = await this.actor.icrc21_canister_call_consent_message(
			to_candid_icrc21_consent_message_request_n45(arg0)
		);
		return from_candid_icrc21_consent_message_response_n52(result);
	}
	async icrc28_trusted_origins(): Promise<Icrc28TrustedOriginsResponse> {
		const result = await this.actor.icrc28_trusted_origins();
		return result;
	}
	async pools(arg0: string | null): Promise<PoolsResult> {
		const result = await this.actor.pools(to_candid_opt_n63(arg0));
		return from_candid_PoolsResult_n64(result);
	}
	async remove_liquidity(arg0: RemoveLiquidityArgs): Promise<RemoveLiquidityResult> {
		const result = await this.actor.remove_liquidity(arg0);
		return from_candid_RemoveLiquidityResult_n66(result);
	}
	async remove_liquidity_amounts(
		arg0: string,
		arg1: string,
		arg2: bigint
	): Promise<RemoveLiquidityAmountsResult> {
		const result = await this.actor.remove_liquidity_amounts(arg0, arg1, arg2);
		return from_candid_RemoveLiquidityAmountsResult_n70(result);
	}
	async remove_liquidity_async(arg0: RemoveLiquidityArgs): Promise<RemoveLiquidityAsyncResult> {
		const result = await this.actor.remove_liquidity_async(arg0);
		return from_candid_RemoveLiquidityAsyncResult_n72(result);
	}
	async requests(arg0: bigint | null): Promise<RequestsResult> {
		const result = await this.actor.requests(to_candid_opt_n73(arg0));
		return from_candid_RequestsResult_n74(result);
	}
	async send(arg0: SendArgs): Promise<SendResult> {
		const result = await this.actor.send(arg0);
		return from_candid_SendResult_n97(result);
	}
	async swap(arg0: SwapArgs): Promise<SwapResult> {
		const result = await this.actor.swap(to_candid_SwapArgs_n99(arg0));
		return from_candid_SwapResult_n101(result);
	}
	async swap_amounts(arg0: string, arg1: bigint, arg2: string): Promise<SwapAmountsResult> {
		const result = await this.actor.swap_amounts(arg0, arg1, arg2);
		return from_candid_SwapAmountsResult_n103(result);
	}
	async swap_async(arg0: SwapArgs): Promise<SwapAsyncResult> {
		const result = await this.actor.swap_async(to_candid_SwapArgs_n99(arg0));
		return from_candid_SwapAsyncResult_n105(result);
	}
	async tokens(arg0: string | null): Promise<TokensResult> {
		const result = await this.actor.tokens(to_candid_opt_n63(arg0));
		return from_candid_TokensResult_n106(result);
	}
	async update_token(arg0: UpdateTokenArgs): Promise<UpdateTokenResult> {
		const result = await this.actor.update_token(arg0);
		return from_candid_UpdateTokenResult_n111(result);
	}
	async user_balances(arg0: string): Promise<UserBalancesResult> {
		const result = await this.actor.user_balances(arg0);
		return from_candid_UserBalancesResult_n114(result);
	}
	async validate_add_liquidity(): Promise<ValidateAddLiquidityResult> {
		const result = await this.actor.validate_add_liquidity();
		return from_candid_ValidateAddLiquidityResult_n119(result);
	}
	async validate_remove_liquidity(): Promise<ValidateRemoveLiquidityResult> {
		const result = await this.actor.validate_remove_liquidity();
		return from_candid_ValidateRemoveLiquidityResult_n121(result);
	}
}
function from_candid_AddLiquiditAmountsResult_n14(
	value: _AddLiquiditAmountsResult
): AddLiquiditAmountsResult {
	return from_candid_variant_n15(value);
}
function from_candid_AddLiquidityArgs_n81(value: _AddLiquidityArgs): AddLiquidityArgs {
	return from_candid_record_n82(value);
}
function from_candid_AddLiquidityAsyncResult_n16(
	value: _AddLiquidityAsyncResult
): AddLiquidityAsyncResult {
	return from_candid_variant_n17(value);
}
function from_candid_AddLiquidityReply_n7(value: _AddLiquidityReply): AddLiquidityReply {
	return from_candid_record_n8(value);
}
function from_candid_AddLiquidityResult_n5(value: _AddLiquidityResult): AddLiquidityResult {
	return from_candid_variant_n6(value);
}
function from_candid_AddPoolArgs_n90(value: _AddPoolArgs): AddPoolArgs {
	return from_candid_record_n91(value);
}
function from_candid_AddPoolReply_n22(value: _AddPoolReply): AddPoolReply {
	return from_candid_record_n23(value);
}
function from_candid_AddPoolResult_n20(value: _AddPoolResult): AddPoolResult {
	return from_candid_variant_n21(value);
}
function from_candid_AddTokenReply_n26(value: _AddTokenReply): AddTokenReply {
	return from_candid_variant_n27(value);
}
function from_candid_AddTokenResult_n24(value: _AddTokenResult): AddTokenResult {
	return from_candid_variant_n25(value);
}
function from_candid_CheckPoolsResult_n28(value: _CheckPoolsResult): CheckPoolsResult {
	return from_candid_variant_n29(value);
}
function from_candid_ClaimReply_n32(value: _ClaimReply): ClaimReply {
	return from_candid_record_n33(value);
}
function from_candid_ClaimResult_n30(value: _ClaimResult): ClaimResult {
	return from_candid_variant_n31(value);
}
function from_candid_ClaimsReply_n38(value: _ClaimsReply): ClaimsReply {
	return from_candid_record_n39(value);
}
function from_candid_ClaimsResult_n35(value: _ClaimsResult): ClaimsResult {
	return from_candid_variant_n36(value);
}
function from_candid_PoolsResult_n64(value: _PoolsResult): PoolsResult {
	return from_candid_variant_n65(value);
}
function from_candid_RemoveLiquidityAmountsResult_n70(
	value: _RemoveLiquidityAmountsResult
): RemoveLiquidityAmountsResult {
	return from_candid_variant_n71(value);
}
function from_candid_RemoveLiquidityAsyncResult_n72(
	value: _RemoveLiquidityAsyncResult
): RemoveLiquidityAsyncResult {
	return from_candid_variant_n17(value);
}
function from_candid_RemoveLiquidityReply_n68(value: _RemoveLiquidityReply): RemoveLiquidityReply {
	return from_candid_record_n69(value);
}
function from_candid_RemoveLiquidityResult_n66(
	value: _RemoveLiquidityResult
): RemoveLiquidityResult {
	return from_candid_variant_n67(value);
}
function from_candid_RequestReply_n93(value: _RequestReply): RequestReply {
	return from_candid_variant_n94(value);
}
function from_candid_RequestRequest_n79(value: _RequestRequest): RequestRequest {
	return from_candid_variant_n80(value);
}
function from_candid_RequestsReply_n77(value: _RequestsReply): RequestsReply {
	return from_candid_record_n78(value);
}
function from_candid_RequestsResult_n74(value: _RequestsResult): RequestsResult {
	return from_candid_variant_n75(value);
}
function from_candid_SendResult_n97(value: _SendResult): SendResult {
	return from_candid_variant_n98(value);
}
function from_candid_SwapAmountsResult_n103(value: _SwapAmountsResult): SwapAmountsResult {
	return from_candid_variant_n104(value);
}
function from_candid_SwapArgs_n86(value: _SwapArgs): SwapArgs {
	return from_candid_record_n87(value);
}
function from_candid_SwapAsyncResult_n105(value: _SwapAsyncResult): SwapAsyncResult {
	return from_candid_variant_n17(value);
}
function from_candid_SwapReply_n95(value: _SwapReply): SwapReply {
	return from_candid_record_n96(value);
}
function from_candid_SwapResult_n101(value: _SwapResult): SwapResult {
	return from_candid_variant_n102(value);
}
function from_candid_TokenReply_n109(value: _TokenReply): TokenReply {
	return from_candid_variant_n110(value);
}
function from_candid_TokensResult_n106(value: _TokensResult): TokensResult {
	return from_candid_variant_n107(value);
}
function from_candid_TransferIdReply_n10(value: _TransferIdReply): TransferIdReply {
	return from_candid_record_n11(value);
}
function from_candid_TransferReply_n12(value: _TransferReply): TransferReply {
	return from_candid_variant_n13(value);
}
function from_candid_TxId_n84(value: _TxId): TxId {
	return from_candid_variant_n85(value);
}
function from_candid_UpdateTokenReply_n113(value: _UpdateTokenReply): UpdateTokenReply {
	return from_candid_variant_n27(value);
}
function from_candid_UpdateTokenResult_n111(value: _UpdateTokenResult): UpdateTokenResult {
	return from_candid_variant_n112(value);
}
function from_candid_UserBalancesReply_n117(value: _UserBalancesReply): UserBalancesReply {
	return from_candid_variant_n118(value);
}
function from_candid_UserBalancesResult_n114(value: _UserBalancesResult): UserBalancesResult {
	return from_candid_variant_n115(value);
}
function from_candid_UserReply_n42(value: _UserReply): UserReply {
	return from_candid_record_n43(value);
}
function from_candid_UserResult_n40(value: _UserResult): UserResult {
	return from_candid_variant_n41(value);
}
function from_candid_ValidateAddLiquidityResult_n119(
	value: _ValidateAddLiquidityResult
): ValidateAddLiquidityResult {
	return from_candid_variant_n120(value);
}
function from_candid_ValidateRemoveLiquidityResult_n121(
	value: _ValidateRemoveLiquidityResult
): ValidateRemoveLiquidityResult {
	return from_candid_variant_n120(value);
}
function from_candid_icrc21_consent_info_n54(value: _icrc21_consent_info): icrc21_consent_info {
	return from_candid_record_n55(value);
}
function from_candid_icrc21_consent_message_metadata_n56(
	value: _icrc21_consent_message_metadata
): icrc21_consent_message_metadata {
	return from_candid_record_n57(value);
}
function from_candid_icrc21_consent_message_n59(
	value: _icrc21_consent_message
): icrc21_consent_message {
	return from_candid_variant_n60(value);
}
function from_candid_icrc21_consent_message_response_n52(
	value: _icrc21_consent_message_response
): icrc21_consent_message_response {
	return from_candid_variant_n53(value);
}
function from_candid_icrc21_error_n61(value: _icrc21_error): icrc21_error {
	return from_candid_variant_n62(value);
}
function from_candid_opt_n34(value: [] | [string]): string | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n44(value: [] | [bigint]): bigint | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n58(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n83(value: [] | [_TxId]): TxId | null {
	return value.length === 0 ? null : from_candid_TxId_n84(value[0]);
}
function from_candid_opt_n88(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n89(value: [] | [bigint]): bigint | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n92(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_record_n11(value: { transfer_id: bigint; transfer: _TransferReply }): {
	transfer_id: bigint;
	transfer: TransferReply;
} {
	return {
		transfer_id: value.transfer_id,
		transfer: from_candid_TransferReply_n12(value.transfer)
	};
}
function from_candid_record_n23(value: {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	lp_token_symbol: string;
	add_lp_token_amount: bigint;
	transfer_ids: Array<_TransferIdReply>;
	name: string;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	pool_id: number;
	chain_0: string;
	chain_1: string;
	is_removed: boolean;
	symbol: string;
	lp_fee_bps: number;
}): {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	lp_token_symbol: string;
	add_lp_token_amount: bigint;
	transfer_ids: Array<TransferIdReply>;
	name: string;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	pool_id: number;
	chain_0: string;
	chain_1: string;
	is_removed: boolean;
	symbol: string;
	lp_fee_bps: number;
} {
	return {
		ts: value.ts,
		request_id: value.request_id,
		status: value.status,
		tx_id: value.tx_id,
		lp_token_symbol: value.lp_token_symbol,
		add_lp_token_amount: value.add_lp_token_amount,
		transfer_ids: from_candid_vec_n9(value.transfer_ids),
		name: value.name,
		amount_0: value.amount_0,
		amount_1: value.amount_1,
		claim_ids: value.claim_ids,
		address_0: value.address_0,
		address_1: value.address_1,
		symbol_0: value.symbol_0,
		symbol_1: value.symbol_1,
		pool_id: value.pool_id,
		chain_0: value.chain_0,
		chain_1: value.chain_1,
		is_removed: value.is_removed,
		symbol: value.symbol,
		lp_fee_bps: value.lp_fee_bps
	};
}
function from_candid_record_n33(value: {
	ts: bigint;
	fee: bigint;
	status: string;
	claim_id: bigint;
	transfer_ids: Array<_TransferIdReply>;
	desc: string;
	chain: string;
	canister_id: [] | [string];
	to_address: string;
	amount: bigint;
	symbol: string;
}): {
	ts: bigint;
	fee: bigint;
	status: string;
	claim_id: bigint;
	transfer_ids: Array<TransferIdReply>;
	desc: string;
	chain: string;
	canister_id?: string;
	to_address: string;
	amount: bigint;
	symbol: string;
} {
	return {
		ts: value.ts,
		fee: value.fee,
		status: value.status,
		claim_id: value.claim_id,
		transfer_ids: from_candid_vec_n9(value.transfer_ids),
		desc: value.desc,
		chain: value.chain,
		canister_id: record_opt_to_undefined(from_candid_opt_n34(value.canister_id)),
		to_address: value.to_address,
		amount: value.amount,
		symbol: value.symbol
	};
}
function from_candid_record_n39(value: {
	ts: bigint;
	fee: bigint;
	status: string;
	claim_id: bigint;
	desc: string;
	chain: string;
	canister_id: [] | [string];
	to_address: string;
	amount: bigint;
	symbol: string;
}): {
	ts: bigint;
	fee: bigint;
	status: string;
	claim_id: bigint;
	desc: string;
	chain: string;
	canister_id?: string;
	to_address: string;
	amount: bigint;
	symbol: string;
} {
	return {
		ts: value.ts,
		fee: value.fee,
		status: value.status,
		claim_id: value.claim_id,
		desc: value.desc,
		chain: value.chain,
		canister_id: record_opt_to_undefined(from_candid_opt_n34(value.canister_id)),
		to_address: value.to_address,
		amount: value.amount,
		symbol: value.symbol
	};
}
function from_candid_record_n43(value: {
	account_id: string;
	fee_level_expires_at: [] | [bigint];
	referred_by: [] | [string];
	user_id: number;
	fee_level: number;
	principal_id: string;
	referred_by_expires_at: [] | [bigint];
	my_referral_code: string;
}): {
	account_id: string;
	fee_level_expires_at?: bigint;
	referred_by?: string;
	user_id: number;
	fee_level: number;
	principal_id: string;
	referred_by_expires_at?: bigint;
	my_referral_code: string;
} {
	return {
		account_id: value.account_id,
		fee_level_expires_at: record_opt_to_undefined(from_candid_opt_n44(value.fee_level_expires_at)),
		referred_by: record_opt_to_undefined(from_candid_opt_n34(value.referred_by)),
		user_id: value.user_id,
		fee_level: value.fee_level,
		principal_id: value.principal_id,
		referred_by_expires_at: record_opt_to_undefined(
			from_candid_opt_n44(value.referred_by_expires_at)
		),
		my_referral_code: value.my_referral_code
	};
}
function from_candid_record_n55(value: {
	metadata: _icrc21_consent_message_metadata;
	consent_message: _icrc21_consent_message;
}): {
	metadata: icrc21_consent_message_metadata;
	consent_message: icrc21_consent_message;
} {
	return {
		metadata: from_candid_icrc21_consent_message_metadata_n56(value.metadata),
		consent_message: from_candid_icrc21_consent_message_n59(value.consent_message)
	};
}
function from_candid_record_n57(value: { utc_offset_minutes: [] | [number]; language: string }): {
	utc_offset_minutes?: number;
	language: string;
} {
	return {
		utc_offset_minutes: record_opt_to_undefined(from_candid_opt_n58(value.utc_offset_minutes)),
		language: value.language
	};
}
function from_candid_record_n69(value: {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	transfer_ids: Array<_TransferIdReply>;
	lp_fee_0: bigint;
	lp_fee_1: bigint;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	chain_0: string;
	chain_1: string;
	remove_lp_token_amount: bigint;
	symbol: string;
}): {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	transfer_ids: Array<TransferIdReply>;
	lp_fee_0: bigint;
	lp_fee_1: bigint;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	chain_0: string;
	chain_1: string;
	remove_lp_token_amount: bigint;
	symbol: string;
} {
	return {
		ts: value.ts,
		request_id: value.request_id,
		status: value.status,
		tx_id: value.tx_id,
		transfer_ids: from_candid_vec_n9(value.transfer_ids),
		lp_fee_0: value.lp_fee_0,
		lp_fee_1: value.lp_fee_1,
		amount_0: value.amount_0,
		amount_1: value.amount_1,
		claim_ids: value.claim_ids,
		address_0: value.address_0,
		address_1: value.address_1,
		symbol_0: value.symbol_0,
		symbol_1: value.symbol_1,
		chain_0: value.chain_0,
		chain_1: value.chain_1,
		remove_lp_token_amount: value.remove_lp_token_amount,
		symbol: value.symbol
	};
}
function from_candid_record_n78(value: {
	ts: bigint;
	request_id: bigint;
	request: _RequestRequest;
	statuses: Array<string>;
	reply: _RequestReply;
}): {
	ts: bigint;
	request_id: bigint;
	request: RequestRequest;
	statuses: Array<string>;
	reply: RequestReply;
} {
	return {
		ts: value.ts,
		request_id: value.request_id,
		request: from_candid_RequestRequest_n79(value.request),
		statuses: value.statuses,
		reply: from_candid_RequestReply_n93(value.reply)
	};
}
function from_candid_record_n8(value: {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	add_lp_token_amount: bigint;
	transfer_ids: Array<_TransferIdReply>;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	chain_0: string;
	chain_1: string;
	symbol: string;
}): {
	ts: bigint;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	add_lp_token_amount: bigint;
	transfer_ids: Array<TransferIdReply>;
	amount_0: bigint;
	amount_1: bigint;
	claim_ids: BigUint64Array;
	address_0: string;
	address_1: string;
	symbol_0: string;
	symbol_1: string;
	chain_0: string;
	chain_1: string;
	symbol: string;
} {
	return {
		ts: value.ts,
		request_id: value.request_id,
		status: value.status,
		tx_id: value.tx_id,
		add_lp_token_amount: value.add_lp_token_amount,
		transfer_ids: from_candid_vec_n9(value.transfer_ids),
		amount_0: value.amount_0,
		amount_1: value.amount_1,
		claim_ids: value.claim_ids,
		address_0: value.address_0,
		address_1: value.address_1,
		symbol_0: value.symbol_0,
		symbol_1: value.symbol_1,
		chain_0: value.chain_0,
		chain_1: value.chain_1,
		symbol: value.symbol
	};
}
function from_candid_record_n82(value: {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0: [] | [_TxId];
	tx_id_1: [] | [_TxId];
}): {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0?: TxId;
	tx_id_1?: TxId;
} {
	return {
		token_0: value.token_0,
		token_1: value.token_1,
		amount_0: value.amount_0,
		amount_1: value.amount_1,
		tx_id_0: record_opt_to_undefined(from_candid_opt_n83(value.tx_id_0)),
		tx_id_1: record_opt_to_undefined(from_candid_opt_n83(value.tx_id_1))
	};
}
function from_candid_record_n87(value: {
	receive_token: string;
	max_slippage: [] | [number];
	pay_amount: bigint;
	referred_by: [] | [string];
	receive_amount: [] | [bigint];
	receive_address: [] | [string];
	pay_token: string;
	pay_tx_id: [] | [_TxId];
}): {
	receive_token: string;
	max_slippage?: number;
	pay_amount: bigint;
	referred_by?: string;
	receive_amount?: bigint;
	receive_address?: string;
	pay_token: string;
	pay_tx_id?: TxId;
} {
	return {
		receive_token: value.receive_token,
		max_slippage: record_opt_to_undefined(from_candid_opt_n88(value.max_slippage)),
		pay_amount: value.pay_amount,
		referred_by: record_opt_to_undefined(from_candid_opt_n34(value.referred_by)),
		receive_amount: record_opt_to_undefined(from_candid_opt_n89(value.receive_amount)),
		receive_address: record_opt_to_undefined(from_candid_opt_n34(value.receive_address)),
		pay_token: value.pay_token,
		pay_tx_id: record_opt_to_undefined(from_candid_opt_n83(value.pay_tx_id))
	};
}
function from_candid_record_n91(value: {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0: [] | [_TxId];
	tx_id_1: [] | [_TxId];
	lp_fee_bps: [] | [number];
}): {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0?: TxId;
	tx_id_1?: TxId;
	lp_fee_bps?: number;
} {
	return {
		token_0: value.token_0,
		token_1: value.token_1,
		amount_0: value.amount_0,
		amount_1: value.amount_1,
		tx_id_0: record_opt_to_undefined(from_candid_opt_n83(value.tx_id_0)),
		tx_id_1: record_opt_to_undefined(from_candid_opt_n83(value.tx_id_1)),
		lp_fee_bps: record_opt_to_undefined(from_candid_opt_n92(value.lp_fee_bps))
	};
}
function from_candid_record_n96(value: {
	ts: bigint;
	txs: Array<_SwapTxReply>;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	transfer_ids: Array<_TransferIdReply>;
	receive_chain: string;
	mid_price: number;
	pay_amount: bigint;
	receive_amount: bigint;
	claim_ids: BigUint64Array;
	pay_symbol: string;
	receive_symbol: string;
	receive_address: string;
	pay_address: string;
	price: number;
	pay_chain: string;
	slippage: number;
}): {
	ts: bigint;
	txs: Array<SwapTxReply>;
	request_id: bigint;
	status: string;
	tx_id: bigint;
	transfer_ids: Array<TransferIdReply>;
	receive_chain: string;
	mid_price: number;
	pay_amount: bigint;
	receive_amount: bigint;
	claim_ids: BigUint64Array;
	pay_symbol: string;
	receive_symbol: string;
	receive_address: string;
	pay_address: string;
	price: number;
	pay_chain: string;
	slippage: number;
} {
	return {
		ts: value.ts,
		txs: value.txs,
		request_id: value.request_id,
		status: value.status,
		tx_id: value.tx_id,
		transfer_ids: from_candid_vec_n9(value.transfer_ids),
		receive_chain: value.receive_chain,
		mid_price: value.mid_price,
		pay_amount: value.pay_amount,
		receive_amount: value.receive_amount,
		claim_ids: value.claim_ids,
		pay_symbol: value.pay_symbol,
		receive_symbol: value.receive_symbol,
		receive_address: value.receive_address,
		pay_address: value.pay_address,
		price: value.price,
		pay_chain: value.pay_chain,
		slippage: value.slippage
	};
}
function from_candid_variant_n102(
	value:
		| {
				Ok: _SwapReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: SwapReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_SwapReply_n95(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n104(
	value:
		| {
				Ok: _SwapAmountsReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: SwapAmountsReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n107(
	value:
		| {
				Ok: Array<_TokenReply>;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<TokenReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_vec_n108(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n110(
	value:
		| {
				IC: _ICTokenReply;
		  }
		| {
				LP: _LPTokenReply;
		  }
):
	| {
			__kind__: 'IC';
			IC: ICTokenReply;
	  }
	| {
			__kind__: 'LP';
			LP: LPTokenReply;
	  } {
	return 'IC' in value
		? {
				__kind__: 'IC',
				IC: value.IC
			}
		: 'LP' in value
			? {
					__kind__: 'LP',
					LP: value.LP
				}
			: value;
}
function from_candid_variant_n112(
	value:
		| {
				Ok: _UpdateTokenReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: UpdateTokenReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_UpdateTokenReply_n113(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n115(
	value:
		| {
				Ok: Array<_UserBalancesReply>;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<UserBalancesReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_vec_n116(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n118(value: { LP: _LPBalancesReply }): {
	__kind__: 'LP';
	LP: LPBalancesReply;
} {
	return 'LP' in value
		? {
				__kind__: 'LP',
				LP: value.LP
			}
		: value;
}
function from_candid_variant_n120(
	value:
		| {
				Ok: string;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: string;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n13(value: { IC: _ICTransferReply }): {
	__kind__: 'IC';
	IC: ICTransferReply;
} {
	return 'IC' in value
		? {
				__kind__: 'IC',
				IC: value.IC
			}
		: value;
}
function from_candid_variant_n15(
	value:
		| {
				Ok: _AddLiquidityAmountsReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: AddLiquidityAmountsReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n17(
	value:
		| {
				Ok: bigint;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: bigint;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n21(
	value:
		| {
				Ok: _AddPoolReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: AddPoolReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_AddPoolReply_n22(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n25(
	value:
		| {
				Ok: _AddTokenReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: AddTokenReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_AddTokenReply_n26(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n27(value: { IC: _ICTokenReply }): {
	__kind__: 'IC';
	IC: ICTokenReply;
} {
	return 'IC' in value
		? {
				__kind__: 'IC',
				IC: value.IC
			}
		: value;
}
function from_candid_variant_n29(
	value:
		| {
				Ok: Array<_CheckPoolsReply>;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<CheckPoolsReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n31(
	value:
		| {
				Ok: _ClaimReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: ClaimReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_ClaimReply_n32(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n36(
	value:
		| {
				Ok: Array<_ClaimsReply>;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<ClaimsReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_vec_n37(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n41(
	value:
		| {
				Ok: _UserReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: UserReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_UserReply_n42(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n53(
	value:
		| {
				Ok: _icrc21_consent_info;
		  }
		| {
				Err: _icrc21_error;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: icrc21_consent_info;
	  }
	| {
			__kind__: 'Err';
			Err: icrc21_error;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_icrc21_consent_info_n54(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_icrc21_error_n61(value.Err)
				}
			: value;
}
function from_candid_variant_n6(
	value:
		| {
				Ok: _AddLiquidityReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: AddLiquidityReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_AddLiquidityReply_n7(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n60(
	value:
		| {
				LineDisplayMessage: {
					pages: Array<{
						lines: Array<string>;
					}>;
				};
		  }
		| {
				GenericDisplayMessage: string;
		  }
):
	| {
			__kind__: 'LineDisplayMessage';
			LineDisplayMessage: {
				pages: Array<{
					lines: Array<string>;
				}>;
			};
	  }
	| {
			__kind__: 'GenericDisplayMessage';
			GenericDisplayMessage: string;
	  } {
	return 'LineDisplayMessage' in value
		? {
				__kind__: 'LineDisplayMessage',
				LineDisplayMessage: value.LineDisplayMessage
			}
		: 'GenericDisplayMessage' in value
			? {
					__kind__: 'GenericDisplayMessage',
					GenericDisplayMessage: value.GenericDisplayMessage
				}
			: value;
}
function from_candid_variant_n62(
	value:
		| {
				GenericError: {
					description: string;
					error_code: bigint;
				};
		  }
		| {
				InsufficientPayment: _icrc21_error_info;
		  }
		| {
				UnsupportedCanisterCall: _icrc21_error_info;
		  }
		| {
				ConsentMessageUnavailable: _icrc21_error_info;
		  }
):
	| {
			__kind__: 'GenericError';
			GenericError: {
				description: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'InsufficientPayment';
			InsufficientPayment: icrc21_error_info;
	  }
	| {
			__kind__: 'UnsupportedCanisterCall';
			UnsupportedCanisterCall: icrc21_error_info;
	  }
	| {
			__kind__: 'ConsentMessageUnavailable';
			ConsentMessageUnavailable: icrc21_error_info;
	  } {
	return 'GenericError' in value
		? {
				__kind__: 'GenericError',
				GenericError: value.GenericError
			}
		: 'InsufficientPayment' in value
			? {
					__kind__: 'InsufficientPayment',
					InsufficientPayment: value.InsufficientPayment
				}
			: 'UnsupportedCanisterCall' in value
				? {
						__kind__: 'UnsupportedCanisterCall',
						UnsupportedCanisterCall: value.UnsupportedCanisterCall
					}
				: 'ConsentMessageUnavailable' in value
					? {
							__kind__: 'ConsentMessageUnavailable',
							ConsentMessageUnavailable: value.ConsentMessageUnavailable
						}
					: value;
}
function from_candid_variant_n65(
	value:
		| {
				Ok: Array<_PoolReply>;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<PoolReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n67(
	value:
		| {
				Ok: _RemoveLiquidityReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: RemoveLiquidityReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_RemoveLiquidityReply_n68(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n71(
	value:
		| {
				Ok: _RemoveLiquidityAmountsReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: RemoveLiquidityAmountsReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n75(
	value:
		| {
				Ok: Array<_RequestsReply>;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<RequestsReply>;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_vec_n76(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_variant_n80(
	value:
		| {
				AddLiquidity: _AddLiquidityArgs;
		  }
		| {
				Swap: _SwapArgs;
		  }
		| {
				AddPool: _AddPoolArgs;
		  }
		| {
				RemoveLiquidity: _RemoveLiquidityArgs;
		  }
):
	| {
			__kind__: 'AddLiquidity';
			AddLiquidity: AddLiquidityArgs;
	  }
	| {
			__kind__: 'Swap';
			Swap: SwapArgs;
	  }
	| {
			__kind__: 'AddPool';
			AddPool: AddPoolArgs;
	  }
	| {
			__kind__: 'RemoveLiquidity';
			RemoveLiquidity: RemoveLiquidityArgs;
	  } {
	return 'AddLiquidity' in value
		? {
				__kind__: 'AddLiquidity',
				AddLiquidity: from_candid_AddLiquidityArgs_n81(value.AddLiquidity)
			}
		: 'Swap' in value
			? {
					__kind__: 'Swap',
					Swap: from_candid_SwapArgs_n86(value.Swap)
				}
			: 'AddPool' in value
				? {
						__kind__: 'AddPool',
						AddPool: from_candid_AddPoolArgs_n90(value.AddPool)
					}
				: 'RemoveLiquidity' in value
					? {
							__kind__: 'RemoveLiquidity',
							RemoveLiquidity: value.RemoveLiquidity
						}
					: value;
}
function from_candid_variant_n85(
	value:
		| {
				TransactionId: string;
		  }
		| {
				BlockIndex: bigint;
		  }
):
	| {
			__kind__: 'TransactionId';
			TransactionId: string;
	  }
	| {
			__kind__: 'BlockIndex';
			BlockIndex: bigint;
	  } {
	return 'TransactionId' in value
		? {
				__kind__: 'TransactionId',
				TransactionId: value.TransactionId
			}
		: 'BlockIndex' in value
			? {
					__kind__: 'BlockIndex',
					BlockIndex: value.BlockIndex
				}
			: value;
}
function from_candid_variant_n94(
	value:
		| {
				AddLiquidity: _AddLiquidityReply;
		  }
		| {
				Swap: _SwapReply;
		  }
		| {
				AddPool: _AddPoolReply;
		  }
		| {
				RemoveLiquidity: _RemoveLiquidityReply;
		  }
		| {
				Pending: null;
		  }
):
	| {
			__kind__: 'AddLiquidity';
			AddLiquidity: AddLiquidityReply;
	  }
	| {
			__kind__: 'Swap';
			Swap: SwapReply;
	  }
	| {
			__kind__: 'AddPool';
			AddPool: AddPoolReply;
	  }
	| {
			__kind__: 'RemoveLiquidity';
			RemoveLiquidity: RemoveLiquidityReply;
	  }
	| {
			__kind__: 'Pending';
			Pending: null;
	  } {
	return 'AddLiquidity' in value
		? {
				__kind__: 'AddLiquidity',
				AddLiquidity: from_candid_AddLiquidityReply_n7(value.AddLiquidity)
			}
		: 'Swap' in value
			? {
					__kind__: 'Swap',
					Swap: from_candid_SwapReply_n95(value.Swap)
				}
			: 'AddPool' in value
				? {
						__kind__: 'AddPool',
						AddPool: from_candid_AddPoolReply_n22(value.AddPool)
					}
				: 'RemoveLiquidity' in value
					? {
							__kind__: 'RemoveLiquidity',
							RemoveLiquidity: from_candid_RemoveLiquidityReply_n68(value.RemoveLiquidity)
						}
					: 'Pending' in value
						? {
								__kind__: 'Pending',
								Pending: value.Pending
							}
						: value;
}
function from_candid_variant_n98(
	value:
		| {
				OK: _SendReply;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'OK';
			OK: SendReply;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'OK' in value
		? {
				__kind__: 'OK',
				OK: value.OK
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_vec_n108(value: Array<_TokenReply>): Array<TokenReply> {
	return value.map((x) => from_candid_TokenReply_n109(x));
}
function from_candid_vec_n116(value: Array<_UserBalancesReply>): Array<UserBalancesReply> {
	return value.map((x) => from_candid_UserBalancesReply_n117(x));
}
function from_candid_vec_n37(value: Array<_ClaimsReply>): Array<ClaimsReply> {
	return value.map((x) => from_candid_ClaimsReply_n38(x));
}
function from_candid_vec_n76(value: Array<_RequestsReply>): Array<RequestsReply> {
	return value.map((x) => from_candid_RequestsReply_n77(x));
}
function from_candid_vec_n9(value: Array<_TransferIdReply>): Array<TransferIdReply> {
	return value.map((x) => from_candid_TransferIdReply_n10(x));
}
function to_candid_AddLiquidityArgs_n1(value: AddLiquidityArgs): _AddLiquidityArgs {
	return to_candid_record_n2(value);
}
function to_candid_AddPoolArgs_n18(value: AddPoolArgs): _AddPoolArgs {
	return to_candid_record_n19(value);
}
function to_candid_SwapArgs_n99(value: SwapArgs): _SwapArgs {
	return to_candid_record_n100(value);
}
function to_candid_TxId_n3(value: TxId): _TxId {
	return to_candid_variant_n4(value);
}
function to_candid_icrc21_consent_message_metadata_n49(
	value: icrc21_consent_message_metadata
): _icrc21_consent_message_metadata {
	return to_candid_record_n50(value);
}
function to_candid_icrc21_consent_message_request_n45(
	value: icrc21_consent_message_request
): _icrc21_consent_message_request {
	return to_candid_record_n46(value);
}
function to_candid_icrc21_consent_message_spec_n47(
	value: icrc21_consent_message_spec
): _icrc21_consent_message_spec {
	return to_candid_record_n48(value);
}
function to_candid_opt_n63(value: string | null): [] | [string] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_opt_n73(value: bigint | null): [] | [bigint] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_record_n100(value: {
	receive_token: string;
	max_slippage?: number;
	pay_amount: bigint;
	referred_by?: string;
	receive_amount?: bigint;
	receive_address?: string;
	pay_token: string;
	pay_tx_id?: TxId;
}): {
	receive_token: string;
	max_slippage: [] | [number];
	pay_amount: bigint;
	referred_by: [] | [string];
	receive_amount: [] | [bigint];
	receive_address: [] | [string];
	pay_token: string;
	pay_tx_id: [] | [_TxId];
} {
	return {
		receive_token: value.receive_token,
		max_slippage: value.max_slippage ? candid_some(value.max_slippage) : candid_none(),
		pay_amount: value.pay_amount,
		referred_by: value.referred_by ? candid_some(value.referred_by) : candid_none(),
		receive_amount: value.receive_amount ? candid_some(value.receive_amount) : candid_none(),
		receive_address: value.receive_address ? candid_some(value.receive_address) : candid_none(),
		pay_token: value.pay_token,
		pay_tx_id: value.pay_tx_id ? candid_some(to_candid_TxId_n3(value.pay_tx_id)) : candid_none()
	};
}
function to_candid_record_n19(value: {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0?: TxId;
	tx_id_1?: TxId;
	lp_fee_bps?: number;
}): {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0: [] | [_TxId];
	tx_id_1: [] | [_TxId];
	lp_fee_bps: [] | [number];
} {
	return {
		token_0: value.token_0,
		token_1: value.token_1,
		amount_0: value.amount_0,
		amount_1: value.amount_1,
		tx_id_0: value.tx_id_0 ? candid_some(to_candid_TxId_n3(value.tx_id_0)) : candid_none(),
		tx_id_1: value.tx_id_1 ? candid_some(to_candid_TxId_n3(value.tx_id_1)) : candid_none(),
		lp_fee_bps: value.lp_fee_bps ? candid_some(value.lp_fee_bps) : candid_none()
	};
}
function to_candid_record_n2(value: {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0?: TxId;
	tx_id_1?: TxId;
}): {
	token_0: string;
	token_1: string;
	amount_0: bigint;
	amount_1: bigint;
	tx_id_0: [] | [_TxId];
	tx_id_1: [] | [_TxId];
} {
	return {
		token_0: value.token_0,
		token_1: value.token_1,
		amount_0: value.amount_0,
		amount_1: value.amount_1,
		tx_id_0: value.tx_id_0 ? candid_some(to_candid_TxId_n3(value.tx_id_0)) : candid_none(),
		tx_id_1: value.tx_id_1 ? candid_some(to_candid_TxId_n3(value.tx_id_1)) : candid_none()
	};
}
function to_candid_record_n46(value: {
	arg: Uint8Array;
	method: string;
	user_preferences: icrc21_consent_message_spec;
}): {
	arg: Uint8Array;
	method: string;
	user_preferences: _icrc21_consent_message_spec;
} {
	return {
		arg: value.arg,
		method: value.method,
		user_preferences: to_candid_icrc21_consent_message_spec_n47(value.user_preferences)
	};
}
function to_candid_record_n48(value: {
	metadata: icrc21_consent_message_metadata;
	device_spec?:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  };
}): {
	metadata: _icrc21_consent_message_metadata;
	device_spec:
		| []
		| [
				| {
						GenericDisplay: null;
				  }
				| {
						LineDisplay: {
							characters_per_line: number;
							lines_per_page: number;
						};
				  }
		  ];
} {
	return {
		metadata: to_candid_icrc21_consent_message_metadata_n49(value.metadata),
		device_spec: value.device_spec
			? candid_some(to_candid_variant_n51(value.device_spec))
			: candid_none()
	};
}
function to_candid_record_n50(value: { utc_offset_minutes?: number; language: string }): {
	utc_offset_minutes: [] | [number];
	language: string;
} {
	return {
		utc_offset_minutes: value.utc_offset_minutes
			? candid_some(value.utc_offset_minutes)
			: candid_none(),
		language: value.language
	};
}
function to_candid_variant_n4(
	value:
		| {
				__kind__: 'TransactionId';
				TransactionId: string;
		  }
		| {
				__kind__: 'BlockIndex';
				BlockIndex: bigint;
		  }
):
	| {
			TransactionId: string;
	  }
	| {
			BlockIndex: bigint;
	  } {
	return value.__kind__ === 'TransactionId'
		? {
				TransactionId: value.TransactionId
			}
		: value.__kind__ === 'BlockIndex'
			? {
					BlockIndex: value.BlockIndex
				}
			: value;
}
function to_candid_variant_n51(
	value:
		| {
				__kind__: 'GenericDisplay';
				GenericDisplay: null;
		  }
		| {
				__kind__: 'LineDisplay';
				LineDisplay: {
					characters_per_line: number;
					lines_per_page: number;
				};
		  }
):
	| {
			GenericDisplay: null;
	  }
	| {
			LineDisplay: {
				characters_per_line: number;
				lines_per_page: number;
			};
	  } {
	return value.__kind__ === 'GenericDisplay'
		? {
				GenericDisplay: value.GenericDisplay
			}
		: value.__kind__ === 'LineDisplay'
			? {
					LineDisplay: value.LineDisplay
				}
			: value;
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(canisterId: string, options: CreateActorOptions = {}): Kong_backend {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Kong_backend(actor);
}
