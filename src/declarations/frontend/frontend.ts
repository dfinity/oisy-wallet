/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import type { Principal } from '@icp-sdk/core/principal';
import { idlFactory, type _SERVICE } from './declarations/frontend.did';
import type {
	BatchId as _BatchId,
	BatchOperationKind as _BatchOperationKind,
	ChunkId as _ChunkId,
	ClearArguments as _ClearArguments,
	CommitBatchArguments as _CommitBatchArguments,
	ComputeEvidenceArguments as _ComputeEvidenceArguments,
	ConfigurationResponse as _ConfigurationResponse,
	ConfigureArguments as _ConfigureArguments,
	CreateAssetArguments as _CreateAssetArguments,
	DeleteAssetArguments as _DeleteAssetArguments,
	GrantPermission as _GrantPermission,
	HeaderField as _HeaderField,
	HttpRequest as _HttpRequest,
	HttpResponse as _HttpResponse,
	Key as _Key,
	ListPermitted as _ListPermitted,
	Permission as _Permission,
	RevokePermission as _RevokePermission,
	SetAssetContentArguments as _SetAssetContentArguments,
	SetAssetPropertiesArguments as _SetAssetPropertiesArguments,
	StreamingCallbackHttpResponse as _StreamingCallbackHttpResponse,
	StreamingCallbackToken as _StreamingCallbackToken,
	StreamingStrategy as _StreamingStrategy,
	Time as _Time,
	UnsetAssetContentArguments as _UnsetAssetContentArguments,
	ValidationResult as _ValidationResult
} from './declarations/frontend.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export interface ConfigureArguments {
	max_batches?: bigint | null;
	max_bytes?: bigint | null;
	max_chunks?: bigint | null;
}
export interface UpgradeArgs {
	set_permissions?: SetPermissions;
}
export interface DeleteBatchArguments {
	batch_id: BatchId;
}
export type Time = bigint;
export type Key = string;
export interface CreateAssetArguments {
	key: Key;
	content_type: string;
	headers?: Array<HeaderField>;
	allow_raw_access?: boolean;
	max_age?: bigint;
	enable_aliasing?: boolean;
}
export interface UnsetAssetContentArguments {
	key: Key;
	content_encoding: string;
}
export interface GrantPermission {
	permission: Permission;
	to_principal: Principal;
}
export type ChunkId = bigint;
export type BatchId = bigint;
export interface ClearArguments {}
export interface SetAssetPropertiesArguments {
	key: Key;
	headers?: Array<HeaderField> | null;
	is_aliased?: boolean | null;
	allow_raw_access?: boolean | null;
	max_age?: bigint | null;
}
export interface CommitBatchArguments {
	batch_id: BatchId;
	operations: Array<BatchOperationKind>;
}
export interface SetPermissions {
	prepare: Array<Principal>;
	commit: Array<Principal>;
	manage_permissions: Array<Principal>;
}
export interface StreamingCallbackToken {
	key: Key;
	sha256?: Uint8Array;
	index: bigint;
	content_encoding: string;
}
export interface ListPermitted {
	permission: Permission;
}
export interface CommitProposedBatchArguments {
	batch_id: BatchId;
	evidence: Uint8Array;
}
export interface RevokePermission {
	permission: Permission;
	of_principal: Principal;
}
export interface SetAssetContentArguments {
	key: Key;
	sha256?: Uint8Array;
	chunk_ids: Array<ChunkId>;
	content_encoding: string;
}
export interface ComputeEvidenceArguments {
	batch_id: BatchId;
	max_iterations?: number;
}
export interface ConfigurationResponse {
	max_batches?: bigint;
	max_bytes?: bigint;
	max_chunks?: bigint;
}
export interface DeleteAssetArguments {
	key: Key;
}
export interface StreamingCallbackHttpResponse {
	token?: StreamingCallbackToken;
	body: Uint8Array;
}
export type StreamingStrategy = {
	__kind__: 'Callback';
	Callback: {
		token: StreamingCallbackToken;
		callback: [Principal, string];
	};
};
export type BatchOperationKind =
	| {
			__kind__: 'SetAssetProperties';
			SetAssetProperties: SetAssetPropertiesArguments;
	  }
	| {
			__kind__: 'CreateAsset';
			CreateAsset: CreateAssetArguments;
	  }
	| {
			__kind__: 'UnsetAssetContent';
			UnsetAssetContent: UnsetAssetContentArguments;
	  }
	| {
			__kind__: 'DeleteAsset';
			DeleteAsset: DeleteAssetArguments;
	  }
	| {
			__kind__: 'SetAssetContent';
			SetAssetContent: SetAssetContentArguments;
	  }
	| {
			__kind__: 'Clear';
			Clear: ClearArguments;
	  };
export interface HttpResponse {
	body: Uint8Array;
	headers: Array<HeaderField>;
	streaming_strategy?: StreamingStrategy;
	status_code: number;
}
export interface InitArgs {}
export type ValidationResult =
	| {
			__kind__: 'Ok';
			Ok: string;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  };
export type HeaderField = [string, string];
export interface HttpRequest {
	url: string;
	method: string;
	body: Uint8Array;
	headers: Array<HeaderField>;
	certificate_version?: number;
}
export type AssetCanisterArgs =
	| {
			__kind__: 'Upgrade';
			Upgrade: UpgradeArgs;
	  }
	| {
			__kind__: 'Init';
			Init: InitArgs;
	  };
export enum Permission {
	Prepare = 'Prepare',
	ManagePermissions = 'ManagePermissions',
	Commit = 'Commit'
}
export interface frontendInterface {
	api_version(): Promise<number>;
	authorize(arg0: Principal): Promise<void>;
	certified_tree(arg0: {}): Promise<{
		certificate: Uint8Array;
		tree: Uint8Array;
	}>;
	clear(arg0: ClearArguments): Promise<void>;
	commit_batch(arg0: CommitBatchArguments): Promise<void>;
	commit_proposed_batch(arg0: CommitProposedBatchArguments): Promise<void>;
	compute_evidence(arg0: ComputeEvidenceArguments): Promise<Uint8Array | null>;
	configure(arg0: ConfigureArguments): Promise<void>;
	create_asset(arg0: CreateAssetArguments): Promise<void>;
	create_batch(arg0: {}): Promise<{
		batch_id: BatchId;
	}>;
	create_chunk(arg0: { content: Uint8Array; batch_id: BatchId }): Promise<{
		chunk_id: ChunkId;
	}>;
	deauthorize(arg0: Principal): Promise<void>;
	delete_asset(arg0: DeleteAssetArguments): Promise<void>;
	delete_batch(arg0: DeleteBatchArguments): Promise<void>;
	get(arg0: { key: Key; accept_encodings: Array<string> }): Promise<{
		content: Uint8Array;
		sha256?: Uint8Array;
		content_type: string;
		content_encoding: string;
		total_length: bigint;
	}>;
	get_asset_properties(key: Key): Promise<{
		headers?: Array<HeaderField>;
		is_aliased?: boolean;
		allow_raw_access?: boolean;
		max_age?: bigint;
	}>;
	get_chunk(arg0: {
		key: Key;
		sha256?: Uint8Array;
		index: bigint;
		content_encoding: string;
	}): Promise<{
		content: Uint8Array;
	}>;
	get_configuration(): Promise<ConfigurationResponse>;
	grant_permission(arg0: GrantPermission): Promise<void>;
	http_request(request: HttpRequest): Promise<HttpResponse>;
	http_request_streaming_callback(
		token: StreamingCallbackToken
	): Promise<StreamingCallbackHttpResponse | null>;
	list(arg0: {}): Promise<
		Array<{
			key: Key;
			encodings: Array<{
				modified: Time;
				sha256?: Uint8Array;
				length: bigint;
				content_encoding: string;
			}>;
			content_type: string;
		}>
	>;
	list_authorized(): Promise<Array<Principal>>;
	list_permitted(arg0: ListPermitted): Promise<Array<Principal>>;
	propose_commit_batch(arg0: CommitBatchArguments): Promise<void>;
	revoke_permission(arg0: RevokePermission): Promise<void>;
	set_asset_content(arg0: SetAssetContentArguments): Promise<void>;
	set_asset_properties(arg0: SetAssetPropertiesArguments): Promise<void>;
	store(arg0: {
		key: Key;
		content: Uint8Array;
		sha256?: Uint8Array;
		content_type: string;
		content_encoding: string;
	}): Promise<void>;
	take_ownership(): Promise<void>;
	unset_asset_content(arg0: UnsetAssetContentArguments): Promise<void>;
	validate_commit_proposed_batch(arg0: CommitProposedBatchArguments): Promise<ValidationResult>;
	validate_configure(arg0: ConfigureArguments): Promise<ValidationResult>;
	validate_grant_permission(arg0: GrantPermission): Promise<ValidationResult>;
	validate_revoke_permission(arg0: RevokePermission): Promise<ValidationResult>;
	validate_take_ownership(): Promise<ValidationResult>;
}
export class Frontend implements frontendInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async api_version(): Promise<number> {
		const result = await this.actor.api_version();
		return result;
	}
	async authorize(arg0: Principal): Promise<void> {
		const result = await this.actor.authorize(arg0);
		return result;
	}
	async certified_tree(arg0: {}): Promise<{
		certificate: Uint8Array;
		tree: Uint8Array;
	}> {
		const result = await this.actor.certified_tree(arg0);
		return result;
	}
	async clear(arg0: ClearArguments): Promise<void> {
		const result = await this.actor.clear(arg0);
		return result;
	}
	async commit_batch(arg0: CommitBatchArguments): Promise<void> {
		const result = await this.actor.commit_batch(to_candid_CommitBatchArguments_n1(arg0));
		return result;
	}
	async commit_proposed_batch(arg0: CommitProposedBatchArguments): Promise<void> {
		const result = await this.actor.commit_proposed_batch(arg0);
		return result;
	}
	async compute_evidence(arg0: ComputeEvidenceArguments): Promise<Uint8Array | null> {
		const result = await this.actor.compute_evidence(to_candid_ComputeEvidenceArguments_n15(arg0));
		return from_candid_opt_n17(result);
	}
	async configure(arg0: ConfigureArguments): Promise<void> {
		const result = await this.actor.configure(to_candid_ConfigureArguments_n18(arg0));
		return result;
	}
	async create_asset(arg0: CreateAssetArguments): Promise<void> {
		const result = await this.actor.create_asset(to_candid_CreateAssetArguments_n8(arg0));
		return result;
	}
	async create_batch(arg0: {}): Promise<{
		batch_id: BatchId;
	}> {
		const result = await this.actor.create_batch(arg0);
		return result;
	}
	async create_chunk(arg0: { content: Uint8Array; batch_id: BatchId }): Promise<{
		chunk_id: ChunkId;
	}> {
		const result = await this.actor.create_chunk(arg0);
		return result;
	}
	async deauthorize(arg0: Principal): Promise<void> {
		const result = await this.actor.deauthorize(arg0);
		return result;
	}
	async delete_asset(arg0: DeleteAssetArguments): Promise<void> {
		const result = await this.actor.delete_asset(arg0);
		return result;
	}
	async delete_batch(arg0: DeleteBatchArguments): Promise<void> {
		const result = await this.actor.delete_batch(arg0);
		return result;
	}
	async get(arg0: { key: Key; accept_encodings: Array<string> }): Promise<{
		content: Uint8Array;
		sha256?: Uint8Array;
		content_type: string;
		content_encoding: string;
		total_length: bigint;
	}> {
		const result = await this.actor.get(arg0);
		return from_candid_record_n20(result);
	}
	async get_asset_properties(arg0: Key): Promise<{
		headers?: Array<HeaderField>;
		is_aliased?: boolean;
		allow_raw_access?: boolean;
		max_age?: bigint;
	}> {
		const result = await this.actor.get_asset_properties(arg0);
		return from_candid_record_n21(result);
	}
	async get_chunk(arg0: {
		key: Key;
		sha256?: Uint8Array;
		index: bigint;
		content_encoding: string;
	}): Promise<{
		content: Uint8Array;
	}> {
		const result = await this.actor.get_chunk(to_candid_record_n25(arg0));
		return result;
	}
	async get_configuration(): Promise<ConfigurationResponse> {
		const result = await this.actor.get_configuration();
		return from_candid_ConfigurationResponse_n26(result);
	}
	async grant_permission(arg0: GrantPermission): Promise<void> {
		const result = await this.actor.grant_permission(to_candid_GrantPermission_n28(arg0));
		return result;
	}
	async http_request(arg0: HttpRequest): Promise<HttpResponse> {
		const result = await this.actor.http_request(to_candid_HttpRequest_n32(arg0));
		return from_candid_HttpResponse_n34(result);
	}
	async http_request_streaming_callback(
		arg0: StreamingCallbackToken
	): Promise<StreamingCallbackHttpResponse | null> {
		const result = await this.actor.http_request_streaming_callback(
			to_candid_StreamingCallbackToken_n42(arg0)
		);
		return from_candid_opt_n43(result);
	}
	async list(arg0: {}): Promise<
		Array<{
			key: Key;
			encodings: Array<{
				modified: Time;
				sha256?: Uint8Array;
				length: bigint;
				content_encoding: string;
			}>;
			content_type: string;
		}>
	> {
		const result = await this.actor.list(arg0);
		return from_candid_vec_n47(result);
	}
	async list_authorized(): Promise<Array<Principal>> {
		const result = await this.actor.list_authorized();
		return result;
	}
	async list_permitted(arg0: ListPermitted): Promise<Array<Principal>> {
		const result = await this.actor.list_permitted(to_candid_ListPermitted_n51(arg0));
		return result;
	}
	async propose_commit_batch(arg0: CommitBatchArguments): Promise<void> {
		const result = await this.actor.propose_commit_batch(to_candid_CommitBatchArguments_n1(arg0));
		return result;
	}
	async revoke_permission(arg0: RevokePermission): Promise<void> {
		const result = await this.actor.revoke_permission(to_candid_RevokePermission_n53(arg0));
		return result;
	}
	async set_asset_content(arg0: SetAssetContentArguments): Promise<void> {
		const result = await this.actor.set_asset_content(to_candid_SetAssetContentArguments_n6(arg0));
		return result;
	}
	async set_asset_properties(arg0: SetAssetPropertiesArguments): Promise<void> {
		const result = await this.actor.set_asset_properties(
			to_candid_SetAssetPropertiesArguments_n10(arg0)
		);
		return result;
	}
	async store(arg0: {
		key: Key;
		content: Uint8Array;
		sha256?: Uint8Array;
		content_type: string;
		content_encoding: string;
	}): Promise<void> {
		const result = await this.actor.store(to_candid_record_n55(arg0));
		return result;
	}
	async take_ownership(): Promise<void> {
		const result = await this.actor.take_ownership();
		return result;
	}
	async unset_asset_content(arg0: UnsetAssetContentArguments): Promise<void> {
		const result = await this.actor.unset_asset_content(arg0);
		return result;
	}
	async validate_commit_proposed_batch(
		arg0: CommitProposedBatchArguments
	): Promise<ValidationResult> {
		const result = await this.actor.validate_commit_proposed_batch(arg0);
		return from_candid_ValidationResult_n56(result);
	}
	async validate_configure(arg0: ConfigureArguments): Promise<ValidationResult> {
		const result = await this.actor.validate_configure(to_candid_ConfigureArguments_n18(arg0));
		return from_candid_ValidationResult_n56(result);
	}
	async validate_grant_permission(arg0: GrantPermission): Promise<ValidationResult> {
		const result = await this.actor.validate_grant_permission(to_candid_GrantPermission_n28(arg0));
		return from_candid_ValidationResult_n56(result);
	}
	async validate_revoke_permission(arg0: RevokePermission): Promise<ValidationResult> {
		const result = await this.actor.validate_revoke_permission(
			to_candid_RevokePermission_n53(arg0)
		);
		return from_candid_ValidationResult_n56(result);
	}
	async validate_take_ownership(): Promise<ValidationResult> {
		const result = await this.actor.validate_take_ownership();
		return from_candid_ValidationResult_n56(result);
	}
}
function from_candid_ConfigurationResponse_n26(
	value: _ConfigurationResponse
): ConfigurationResponse {
	return from_candid_record_n27(value);
}
function from_candid_HttpResponse_n34(value: _HttpResponse): HttpResponse {
	return from_candid_record_n35(value);
}
function from_candid_StreamingCallbackHttpResponse_n44(
	value: _StreamingCallbackHttpResponse
): StreamingCallbackHttpResponse {
	return from_candid_record_n45(value);
}
function from_candid_StreamingCallbackToken_n40(
	value: _StreamingCallbackToken
): StreamingCallbackToken {
	return from_candid_record_n41(value);
}
function from_candid_StreamingStrategy_n37(value: _StreamingStrategy): StreamingStrategy {
	return from_candid_variant_n38(value);
}
function from_candid_ValidationResult_n56(value: _ValidationResult): ValidationResult {
	return from_candid_variant_n57(value);
}
function from_candid_opt_n17(value: [] | [Uint8Array]): Uint8Array | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n22(value: [] | [Array<_HeaderField>]): Array<HeaderField> | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n23(value: [] | [boolean]): boolean | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n24(value: [] | [bigint]): bigint | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n36(value: [] | [_StreamingStrategy]): StreamingStrategy | null {
	return value.length === 0 ? null : from_candid_StreamingStrategy_n37(value[0]);
}
function from_candid_opt_n43(
	value: [] | [_StreamingCallbackHttpResponse]
): StreamingCallbackHttpResponse | null {
	return value.length === 0 ? null : from_candid_StreamingCallbackHttpResponse_n44(value[0]);
}
function from_candid_opt_n46(value: [] | [_StreamingCallbackToken]): StreamingCallbackToken | null {
	return value.length === 0 ? null : from_candid_StreamingCallbackToken_n40(value[0]);
}
function from_candid_record_n20(value: {
	content: Uint8Array;
	sha256: [] | [Uint8Array];
	content_type: string;
	content_encoding: string;
	total_length: bigint;
}): {
	content: Uint8Array;
	sha256?: Uint8Array;
	content_type: string;
	content_encoding: string;
	total_length: bigint;
} {
	return {
		content: value.content,
		sha256: record_opt_to_undefined(from_candid_opt_n17(value.sha256)),
		content_type: value.content_type,
		content_encoding: value.content_encoding,
		total_length: value.total_length
	};
}
function from_candid_record_n21(value: {
	headers: [] | [Array<_HeaderField>];
	is_aliased: [] | [boolean];
	allow_raw_access: [] | [boolean];
	max_age: [] | [bigint];
}): {
	headers?: Array<HeaderField>;
	is_aliased?: boolean;
	allow_raw_access?: boolean;
	max_age?: bigint;
} {
	return {
		headers: record_opt_to_undefined(from_candid_opt_n22(value.headers)),
		is_aliased: record_opt_to_undefined(from_candid_opt_n23(value.is_aliased)),
		allow_raw_access: record_opt_to_undefined(from_candid_opt_n23(value.allow_raw_access)),
		max_age: record_opt_to_undefined(from_candid_opt_n24(value.max_age))
	};
}
function from_candid_record_n27(value: {
	max_batches: [] | [bigint];
	max_bytes: [] | [bigint];
	max_chunks: [] | [bigint];
}): {
	max_batches?: bigint;
	max_bytes?: bigint;
	max_chunks?: bigint;
} {
	return {
		max_batches: record_opt_to_undefined(from_candid_opt_n24(value.max_batches)),
		max_bytes: record_opt_to_undefined(from_candid_opt_n24(value.max_bytes)),
		max_chunks: record_opt_to_undefined(from_candid_opt_n24(value.max_chunks))
	};
}
function from_candid_record_n35(value: {
	body: Uint8Array;
	headers: Array<_HeaderField>;
	streaming_strategy: [] | [_StreamingStrategy];
	status_code: number;
}): {
	body: Uint8Array;
	headers: Array<HeaderField>;
	streaming_strategy?: StreamingStrategy;
	status_code: number;
} {
	return {
		body: value.body,
		headers: value.headers,
		streaming_strategy: record_opt_to_undefined(from_candid_opt_n36(value.streaming_strategy)),
		status_code: value.status_code
	};
}
function from_candid_record_n39(value: {
	token: _StreamingCallbackToken;
	callback: [Principal, string];
}): {
	token: StreamingCallbackToken;
	callback: [Principal, string];
} {
	return {
		token: from_candid_StreamingCallbackToken_n40(value.token),
		callback: value.callback
	};
}
function from_candid_record_n41(value: {
	key: _Key;
	sha256: [] | [Uint8Array];
	index: bigint;
	content_encoding: string;
}): {
	key: Key;
	sha256?: Uint8Array;
	index: bigint;
	content_encoding: string;
} {
	return {
		key: value.key,
		sha256: record_opt_to_undefined(from_candid_opt_n17(value.sha256)),
		index: value.index,
		content_encoding: value.content_encoding
	};
}
function from_candid_record_n45(value: {
	token: [] | [_StreamingCallbackToken];
	body: Uint8Array;
}): {
	token?: StreamingCallbackToken;
	body: Uint8Array;
} {
	return {
		token: record_opt_to_undefined(from_candid_opt_n46(value.token)),
		body: value.body
	};
}
function from_candid_record_n48(value: {
	key: _Key;
	encodings: Array<{
		modified: _Time;
		sha256: [] | [Uint8Array];
		length: bigint;
		content_encoding: string;
	}>;
	content_type: string;
}): {
	key: Key;
	encodings: Array<{
		modified: Time;
		sha256?: Uint8Array;
		length: bigint;
		content_encoding: string;
	}>;
	content_type: string;
} {
	return {
		key: value.key,
		encodings: from_candid_vec_n49(value.encodings),
		content_type: value.content_type
	};
}
function from_candid_record_n50(value: {
	modified: _Time;
	sha256: [] | [Uint8Array];
	length: bigint;
	content_encoding: string;
}): {
	modified: Time;
	sha256?: Uint8Array;
	length: bigint;
	content_encoding: string;
} {
	return {
		modified: value.modified,
		sha256: record_opt_to_undefined(from_candid_opt_n17(value.sha256)),
		length: value.length,
		content_encoding: value.content_encoding
	};
}
function from_candid_variant_n38(value: {
	Callback: {
		token: _StreamingCallbackToken;
		callback: [Principal, string];
	};
}): {
	__kind__: 'Callback';
	Callback: {
		token: StreamingCallbackToken;
		callback: [Principal, string];
	};
} {
	return 'Callback' in value
		? {
				__kind__: 'Callback',
				Callback: from_candid_record_n39(value.Callback)
			}
		: value;
}
function from_candid_variant_n57(
	value:
		| {
				Ok: string;
		  }
		| {
				Err: string;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: string;
	  }
	| {
			__kind__: 'Err';
			Err: string;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: value.Err
				}
			: value;
}
function from_candid_vec_n47(
	value: Array<{
		key: _Key;
		encodings: Array<{
			modified: _Time;
			sha256: [] | [Uint8Array];
			length: bigint;
			content_encoding: string;
		}>;
		content_type: string;
	}>
): Array<{
	key: Key;
	encodings: Array<{
		modified: Time;
		sha256?: Uint8Array;
		length: bigint;
		content_encoding: string;
	}>;
	content_type: string;
}> {
	return value.map((x) => from_candid_record_n48(x));
}
function from_candid_vec_n49(
	value: Array<{
		modified: _Time;
		sha256: [] | [Uint8Array];
		length: bigint;
		content_encoding: string;
	}>
): Array<{
	modified: Time;
	sha256?: Uint8Array;
	length: bigint;
	content_encoding: string;
}> {
	return value.map((x) => from_candid_record_n50(x));
}
function to_candid_BatchOperationKind_n4(value: BatchOperationKind): _BatchOperationKind {
	return to_candid_variant_n5(value);
}
function to_candid_CommitBatchArguments_n1(value: CommitBatchArguments): _CommitBatchArguments {
	return to_candid_record_n2(value);
}
function to_candid_ComputeEvidenceArguments_n15(
	value: ComputeEvidenceArguments
): _ComputeEvidenceArguments {
	return to_candid_record_n16(value);
}
function to_candid_ConfigureArguments_n18(value: ConfigureArguments): _ConfigureArguments {
	return to_candid_record_n19(value);
}
function to_candid_CreateAssetArguments_n8(value: CreateAssetArguments): _CreateAssetArguments {
	return to_candid_record_n9(value);
}
function to_candid_GrantPermission_n28(value: GrantPermission): _GrantPermission {
	return to_candid_record_n29(value);
}
function to_candid_HttpRequest_n32(value: HttpRequest): _HttpRequest {
	return to_candid_record_n33(value);
}
function to_candid_ListPermitted_n51(value: ListPermitted): _ListPermitted {
	return to_candid_record_n52(value);
}
function to_candid_Permission_n30(value: Permission): _Permission {
	return to_candid_variant_n31(value);
}
function to_candid_RevokePermission_n53(value: RevokePermission): _RevokePermission {
	return to_candid_record_n54(value);
}
function to_candid_SetAssetContentArguments_n6(
	value: SetAssetContentArguments
): _SetAssetContentArguments {
	return to_candid_record_n7(value);
}
function to_candid_SetAssetPropertiesArguments_n10(
	value: SetAssetPropertiesArguments
): _SetAssetPropertiesArguments {
	return to_candid_record_n11(value);
}
function to_candid_StreamingCallbackToken_n42(
	value: StreamingCallbackToken
): _StreamingCallbackToken {
	return to_candid_record_n25(value);
}
function to_candid_opt_n12(value: Array<HeaderField> | null): [] | [Array<_HeaderField>] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_opt_n13(value: boolean | null): [] | [boolean] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_opt_n14(value: bigint | null): [] | [bigint] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_record_n11(value: {
	key: Key;
	headers?: Array<HeaderField> | null;
	is_aliased?: boolean | null;
	allow_raw_access?: boolean | null;
	max_age?: bigint | null;
}): {
	key: _Key;
	headers: [] | [[] | [Array<_HeaderField>]];
	is_aliased: [] | [[] | [boolean]];
	allow_raw_access: [] | [[] | [boolean]];
	max_age: [] | [[] | [bigint]];
} {
	return {
		key: value.key,
		headers: value.headers ? candid_some(to_candid_opt_n12(value.headers)) : candid_none(),
		is_aliased: value.is_aliased ? candid_some(to_candid_opt_n13(value.is_aliased)) : candid_none(),
		allow_raw_access: value.allow_raw_access
			? candid_some(to_candid_opt_n13(value.allow_raw_access))
			: candid_none(),
		max_age: value.max_age ? candid_some(to_candid_opt_n14(value.max_age)) : candid_none()
	};
}
function to_candid_record_n16(value: { batch_id: BatchId; max_iterations?: number }): {
	batch_id: _BatchId;
	max_iterations: [] | [number];
} {
	return {
		batch_id: value.batch_id,
		max_iterations: value.max_iterations ? candid_some(value.max_iterations) : candid_none()
	};
}
function to_candid_record_n19(value: {
	max_batches?: bigint | null;
	max_bytes?: bigint | null;
	max_chunks?: bigint | null;
}): {
	max_batches: [] | [[] | [bigint]];
	max_bytes: [] | [[] | [bigint]];
	max_chunks: [] | [[] | [bigint]];
} {
	return {
		max_batches: value.max_batches
			? candid_some(to_candid_opt_n14(value.max_batches))
			: candid_none(),
		max_bytes: value.max_bytes ? candid_some(to_candid_opt_n14(value.max_bytes)) : candid_none(),
		max_chunks: value.max_chunks ? candid_some(to_candid_opt_n14(value.max_chunks)) : candid_none()
	};
}
function to_candid_record_n2(value: { batch_id: BatchId; operations: Array<BatchOperationKind> }): {
	batch_id: _BatchId;
	operations: Array<_BatchOperationKind>;
} {
	return {
		batch_id: value.batch_id,
		operations: to_candid_vec_n3(value.operations)
	};
}
function to_candid_record_n25(value: {
	key: Key;
	sha256?: Uint8Array;
	index: bigint;
	content_encoding: string;
}): {
	key: _Key;
	sha256: [] | [Uint8Array];
	index: bigint;
	content_encoding: string;
} {
	return {
		key: value.key,
		sha256: value.sha256 ? candid_some(value.sha256) : candid_none(),
		index: value.index,
		content_encoding: value.content_encoding
	};
}
function to_candid_record_n29(value: { permission: Permission; to_principal: Principal }): {
	permission: _Permission;
	to_principal: Principal;
} {
	return {
		permission: to_candid_Permission_n30(value.permission),
		to_principal: value.to_principal
	};
}
function to_candid_record_n33(value: {
	url: string;
	method: string;
	body: Uint8Array;
	headers: Array<HeaderField>;
	certificate_version?: number;
}): {
	url: string;
	method: string;
	body: Uint8Array;
	headers: Array<_HeaderField>;
	certificate_version: [] | [number];
} {
	return {
		url: value.url,
		method: value.method,
		body: value.body,
		headers: value.headers,
		certificate_version: value.certificate_version
			? candid_some(value.certificate_version)
			: candid_none()
	};
}
function to_candid_record_n52(value: { permission: Permission }): {
	permission: _Permission;
} {
	return {
		permission: to_candid_Permission_n30(value.permission)
	};
}
function to_candid_record_n54(value: { permission: Permission; of_principal: Principal }): {
	permission: _Permission;
	of_principal: Principal;
} {
	return {
		permission: to_candid_Permission_n30(value.permission),
		of_principal: value.of_principal
	};
}
function to_candid_record_n55(value: {
	key: Key;
	content: Uint8Array;
	sha256?: Uint8Array;
	content_type: string;
	content_encoding: string;
}): {
	key: _Key;
	content: Uint8Array;
	sha256: [] | [Uint8Array];
	content_type: string;
	content_encoding: string;
} {
	return {
		key: value.key,
		content: value.content,
		sha256: value.sha256 ? candid_some(value.sha256) : candid_none(),
		content_type: value.content_type,
		content_encoding: value.content_encoding
	};
}
function to_candid_record_n7(value: {
	key: Key;
	sha256?: Uint8Array;
	chunk_ids: Array<ChunkId>;
	content_encoding: string;
}): {
	key: _Key;
	sha256: [] | [Uint8Array];
	chunk_ids: Array<_ChunkId>;
	content_encoding: string;
} {
	return {
		key: value.key,
		sha256: value.sha256 ? candid_some(value.sha256) : candid_none(),
		chunk_ids: value.chunk_ids,
		content_encoding: value.content_encoding
	};
}
function to_candid_record_n9(value: {
	key: Key;
	content_type: string;
	headers?: Array<HeaderField>;
	allow_raw_access?: boolean;
	max_age?: bigint;
	enable_aliasing?: boolean;
}): {
	key: _Key;
	content_type: string;
	headers: [] | [Array<_HeaderField>];
	allow_raw_access: [] | [boolean];
	max_age: [] | [bigint];
	enable_aliasing: [] | [boolean];
} {
	return {
		key: value.key,
		content_type: value.content_type,
		headers: value.headers ? candid_some(value.headers) : candid_none(),
		allow_raw_access: value.allow_raw_access ? candid_some(value.allow_raw_access) : candid_none(),
		max_age: value.max_age ? candid_some(value.max_age) : candid_none(),
		enable_aliasing: value.enable_aliasing ? candid_some(value.enable_aliasing) : candid_none()
	};
}
function to_candid_variant_n31(value: Permission):
	| {
			Prepare: null;
	  }
	| {
			ManagePermissions: null;
	  }
	| {
			Commit: null;
	  } {
	return value == Permission.Prepare
		? {
				Prepare: null
			}
		: value == Permission.ManagePermissions
			? {
					ManagePermissions: null
				}
			: value == Permission.Commit
				? {
						Commit: null
					}
				: value;
}
function to_candid_variant_n5(
	value:
		| {
				__kind__: 'SetAssetProperties';
				SetAssetProperties: SetAssetPropertiesArguments;
		  }
		| {
				__kind__: 'CreateAsset';
				CreateAsset: CreateAssetArguments;
		  }
		| {
				__kind__: 'UnsetAssetContent';
				UnsetAssetContent: UnsetAssetContentArguments;
		  }
		| {
				__kind__: 'DeleteAsset';
				DeleteAsset: DeleteAssetArguments;
		  }
		| {
				__kind__: 'SetAssetContent';
				SetAssetContent: SetAssetContentArguments;
		  }
		| {
				__kind__: 'Clear';
				Clear: ClearArguments;
		  }
):
	| {
			SetAssetProperties: _SetAssetPropertiesArguments;
	  }
	| {
			CreateAsset: _CreateAssetArguments;
	  }
	| {
			UnsetAssetContent: _UnsetAssetContentArguments;
	  }
	| {
			DeleteAsset: _DeleteAssetArguments;
	  }
	| {
			SetAssetContent: _SetAssetContentArguments;
	  }
	| {
			Clear: _ClearArguments;
	  } {
	return value.__kind__ === 'SetAssetProperties'
		? {
				SetAssetProperties: to_candid_SetAssetPropertiesArguments_n10(value.SetAssetProperties)
			}
		: value.__kind__ === 'CreateAsset'
			? {
					CreateAsset: to_candid_CreateAssetArguments_n8(value.CreateAsset)
				}
			: value.__kind__ === 'UnsetAssetContent'
				? {
						UnsetAssetContent: value.UnsetAssetContent
					}
				: value.__kind__ === 'DeleteAsset'
					? {
							DeleteAsset: value.DeleteAsset
						}
					: value.__kind__ === 'SetAssetContent'
						? {
								SetAssetContent: to_candid_SetAssetContentArguments_n6(value.SetAssetContent)
							}
						: value.__kind__ === 'Clear'
							? {
									Clear: value.Clear
								}
							: value;
}
function to_candid_vec_n3(value: Array<BatchOperationKind>): Array<_BatchOperationKind> {
	return value.map((x) => to_candid_BatchOperationKind_n4(x));
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(canisterId: string, options: CreateActorOptions = {}): Frontend {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Frontend(actor);
}
