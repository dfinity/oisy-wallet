type Config = record {
    /// List of index canisters to track the user's balance
    /// (in addition to the ledger index configured in the sprinkle)
    /// Useful to shorten the time for this canister to sync (and for testing).
    index_canisters: vec principal;
    /// Oisy canister to fetch users from
    oisy_canister: opt principal;
    airdrop_config : opt AirDropConfig;
    /// Admin principals that have privileges to _read_ configuration and internal status.
    readonly_admins: vec principal;
    batch_sizes: opt BatchSizes;
    /// The interval at which the canister make progress in seconds.
    /// Trade-off between the canister's responsiveness and the cycles consumed.
    processing_interval_s: opt nat16;
};

/// Batch sizes for the processing
type BatchSizes = record {
    block_fetching: nat16;
    block_processing: nat16;
    user_fetching: nat16;
    airdrop: nat16;
    sprinkle: nat16;
};

type AirDropConfig = record {
    /// The tokens to distribute during the airdrop
    token_configs : vec TokenConfig;
    /// Max number of participants
    number_of_participants : nat64;
    /// When to start the timestamp
    start_timestamp_ns : nat64;
};

type RewardInfo = record {
    /// Ledger canister id of the token that was awarded.
    ledger : principal;
    /// The timestamp when the reward was awarded.
    timestamp : nat64;
    /// The amount of tokens awarded.
    amount : nat;
};

type TokenConfig = record {
    /// Account that holds the tokens for the airdrop.
    /// The rewards canister will use `icrc2_transfer_from` to distribute the tokens.
    account : Account;
    /// The ledger canister that manages the token.
    ledger_canister : principal;
    /// The amount of tokens to distribute per user.
    amount_per_user : nat;
};

type Account = record {
    owner : principal;
    subaccount : opt blob
};

type StatusResponse = record {
    /// The number of blocks that are currently in the block buffer
    num_buffered_blocks: nat64;

    /// Processed block height per ledger index canister
    processed_block_height: vec record { principal; nat64 };

    /// Timestamps when the last successful fetch from each index canister was initiated.
    last_block_fetch_timestamp: vec record { principal; nat64 };

    /// The latest last_updated timestamp of a fetched Oisy user
    latest_oisy_user_timestamp: opt nat64;

    /// The sprinkle status
    sprinkle_status: SprinkleStatus;
};

type SprinkleEvent = record {
    /// When a sprinkle event was scheduled (via set_sprinkle_timestamp)
    /// in nanoseconds since the EPOCH.
    timestamp_scheduled: nat64;

    /// The number of users that eligible to get sprinkled during this sprinkle event
    n_eligible_users: nat64;

    /// The number of users that were selected to receive sprinkle funds during this sprinkle event
    /// (may be higher than actual number of users that actually received funds due to potential
    /// transaction errors)
    n_selected_users: nat64;

    /// The number of users that were successfully sprinkled
    n_sprinkled_users: nat64;
};

/// The status of the sprinkle
type SprinkleStatus = record {
    /// The next scheduled event, if any
    next_timestamp: opt nat64;

    /// A list of past sprinkle events that have been completed
    past_events: vec SprinkleEvent;
};

type UserData = record {
    /// Airdrops the user has received
    airdrops : vec RewardInfo;
    /// Sprinkles the user has received
    sprinkles : vec RewardInfo;
    /// Very Important Powers
    is_vip : opt bool;
};

/// The ledger configuration used for sending funds and checking balances
type LedgerConfig = record {
    /// The ledger canister to use
    ledger: principal;
    /// The ledger index indexing `.ledger`
    ledger_index: principal;
    /// The account on `.ledger` to send funds _from_
    ledger_account: Account;
};

type SetSprinkleTimestampArg = record {
    /// The timestamp at which the current/next sprinkle will start (if any)
    /// in nanos since the epoch
    timestamp: nat64;

    /// Ledger configuration used in the current/next sprinkle
    ledger_config: LedgerConfig;

    /// Minimum amount that must be in any user's account for the user to be eligible
    /// for the current/next sprinkle
    min_account_amount: nat;

    /// The amount that will be distributed to selected users in the current/next sprinkle
    user_sprinkle_amount: nat;

    /// The total amount that will be distributed across all users in the current/next sprinkle
    total_sprinkle_amount: nat;
};

type PublicRewardsInfo = record {
    /// The status of the airdrop. If absent, then no airdrop is configured (and none happened in the past).
    airdrop : opt PublicAirdropStatus;
    /// Information about the last sprinkle event, if any.
    last_sprinkle : opt PublicSprinkleInfo;
};

type PublicSprinkleInfo = record {
    /// When a sprinkle event was scheduled
    /// in nanoseconds since the EPOCH.
    timestamp_ns: nat64;

    /// The number of users that were successfully sprinkled
    n_sprinkled_users: nat64;

    /// Ledger canister id of the token that was sprinkled
    ledger: principal;

    /// Total number of tokens that were sprinkled
    total_amount: nat;
};

type PublicAirdropStatus = variant {
    /// The airdrop will start in the future
    Upcoming;
    /// The airdrop is currently ongoing
    Ongoing: record {
        /// The total number of airdrops.
        total_airdrops: nat64;
        /// The remaining number of airdrops.
        remaining_airdrops: nat64;
    };
    /// The airdrop has been completed
    Completed: record {
      /// The total number of airdrops.
      total_airdrops: nat64;
  };
};

type VipReward = record {
    /// The reward code
    code : text;
};

type NewVipRewardResponse = variant {
    /// The reward code
    VipReward: VipReward;
    /// User is not a VIP
    NotImportantPerson;
};

type ClaimVipRewardResponse = variant {
    /// The reward code
    Success;
    /// The code is invalid
    InvalidCode;
    /// The code has been claimed already
    AlreadyClaimed;
};

service: (opt Config) -> {
    /// Retrieves the current configuration of the canister.
    config: () -> (Config) query;
    /// Gives information about the current status of the canister.
    status: () -> (StatusResponse) query;
    /// Endpoint for users to query their information with regards to rewards distributed by this canister.
    user_info : () -> (UserData) query;

    /// Public endpoint to query general information with regards to rewards distributed by this canister.
    public_rewards_info : () -> (PublicRewardsInfo) query;

    /// Sets a timestamp for a sprinkle event in the future. The sprinkle will be executed
    /// as soon as possible after the timestamp.
    /// The timestamp is in nanoseconds. Traps if the timestamp is in the past (from the canister's
    /// POV) or if the canister already has a sprinkle event ongoing or planned.
    set_sprinkle_timestamp: (SetSprinkleTimestampArg) -> ();

    /// Gets a VIP reward token.
    new_vip_reward: () -> (NewVipRewardResponse);

    /// Requests rewards from a VIP token.
    claim_vip_reward: (VipReward) -> (ClaimVipRewardResponse);
}
