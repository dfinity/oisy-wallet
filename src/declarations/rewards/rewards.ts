/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import type { Principal } from '@icp-sdk/core/principal';
import { idlFactory, type _SERVICE } from './declarations/rewards.did';
import type {
	Account as _Account,
	AccountId_Any as _AccountId_Any,
	AccountSnapshotFor as _AccountSnapshotFor,
	AccountSnapshot_Any as _AccountSnapshot_Any,
	AccountSnapshot_Icrc as _AccountSnapshot_Icrc,
	AccountSnapshot_Spl as _AccountSnapshot_Spl,
	AnyNetwork as _AnyNetwork,
	AnyToken as _AnyToken,
	AwardFilter as _AwardFilter,
	CampaignEligibility as _CampaignEligibility,
	CandidDuration as _CandidDuration,
	ClaimVipRewardResponse as _ClaimVipRewardResponse,
	ClaimedVipReward as _ClaimedVipReward,
	Config as _Config,
	Criterion as _Criterion,
	CriterionEligibility as _CriterionEligibility,
	CriterionName as _CriterionName,
	EligibilityError as _EligibilityError,
	EligibilityReport as _EligibilityReport,
	EligibilityResponse as _EligibilityResponse,
	HoldingsPopcontestRequest as _HoldingsPopcontestRequest,
	HoldingsPopcontestResponse as _HoldingsPopcontestResponse,
	LastActivityHistogram as _LastActivityHistogram,
	LastActivityHistogramRequest as _LastActivityHistogramRequest,
	LastActivityHistogramResponse as _LastActivityHistogramResponse,
	NewVipRewardResponse as _NewVipRewardResponse,
	RefereeConfig as _RefereeConfig,
	ReferrerConfig as _ReferrerConfig,
	ReferrerInfo as _ReferrerInfo,
	RewardInfo as _RewardInfo,
	S1E4ReferralConfig as _S1E4ReferralConfig,
	S1E4ReferrerInfo as _S1E4ReferrerInfo,
	SetReferrerError as _SetReferrerError,
	SetReferrerResponse as _SetReferrerResponse,
	StatsKeyType as _StatsKeyType,
	StatsRequest as _StatsRequest,
	StatsResponse as _StatsResponse,
	StatsValue as _StatsValue,
	TokenConfig as _TokenConfig,
	TransactionType as _TransactionType,
	Transaction_Any as _Transaction_Any,
	Transaction_Icrc as _Transaction_Icrc,
	Transaction_Spl as _Transaction_Spl,
	UsageAndHolding as _UsageAndHolding,
	UsageAwardConfig as _UsageAwardConfig,
	UsageAwardEvent as _UsageAwardEvent,
	UsageAwardState as _UsageAwardState,
	UsageCriteria as _UsageCriteria,
	UsageVsHoldingStats as _UsageVsHoldingStats,
	UsageWinnersRequest as _UsageWinnersRequest,
	UsageWinnersResponse as _UsageWinnersResponse,
	UserData as _UserData,
	UserDbKey as _UserDbKey,
	UserSnapshot as _UserSnapshot,
	VipConfig as _VipConfig,
	VipReward as _VipReward
} from './declarations/rewards.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export interface StatsValue {
	user_count: bigint;
	assets_usd: number;
}
export interface LastActivityHistogramBucket {
	start_ns: bigint;
	count: number;
}
export interface HoldingsPopcontestRequest {
	to?: number;
	from?: number;
}
export interface TokenConfig {
	/**
	 * / The amount of tokens to distribute per user.
	 */
	amount_per_user: bigint;
	/**
	 * / Account that holds the tokens for the airdrop.
	 * / The rewards canister will use `icrc2_transfer_from` to distribute the tokens.
	 */
	account: Account;
	/**
	 * / The ledger canister that manages the token.
	 */
	ledger_canister: Principal;
}
export interface AccountSnapshot_Icrc {
	decimals: number;
	token_address: Principal;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Icrc>;
	account: Principal;
	timestamp: bigint;
	amount: bigint;
}
export interface Transaction_Any {
	transaction_type: TransactionType;
	network: AnyNetwork;
	counterparty: AccountId_Any;
	timestamp: bigint;
	amount: bigint;
}
export interface UsageWinnersRequest {
	to_ns: bigint;
	from_ns: bigint;
	limit: number;
	after_user?: UserDbKey;
}
export interface UsageWinnersResponse {
	last?: UserDbKey;
	num_checked: number;
	winners: Array<Principal>;
}
export interface UserSnapshot {
	accounts: Array<AccountSnapshotFor>;
	timestamp?: bigint;
}
export interface PublicSprinkleInfo {
	/**
	 * / When a sprinkle event was scheduled
	 * / in nanoseconds since the EPOCH.
	 */
	timestamp_ns: bigint;
	/**
	 * / Total number of tokens that were sprinkled
	 */
	total_amount: bigint;
	/**
	 * / The number of users that were successfully sprinkled
	 */
	n_sprinkled_users: bigint;
	/**
	 * / Ledger canister id of the token that was sprinkled
	 */
	ledger: Principal;
}
export interface LedgerConfig {
	/**
	 * / The ledger index indexing `.ledger`
	 */
	ledger_index: Principal;
	/**
	 * / The ledger canister to use
	 */
	ledger: Principal;
	/**
	 * / The account on `.ledger` to send funds _from_
	 */
	ledger_account: Account;
}
export type SetReferrerResponse =
	| {
			__kind__: 'Ok';
			/**
			 * / The referrer was set successfully.
			 */
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			/**
			 * / Ther was an error setting the referrer.
			 */
			Err: SetReferrerError;
	  };
export interface Transaction_Spl {
	transaction_type: TransactionType;
	network: {};
	counterparty: string;
	timestamp: bigint;
	amount: bigint;
}
export interface UsageVsHoldingStats {
	/**
	 * /
	 */
	holdings: Array<UsageAndHolding>;
}
export interface VipStats {
	total_rejected: number;
	total_redeemed: number;
	total_issued: number;
}
export type NewVipRewardResponse =
	| {
			__kind__: 'Anonymous';
			/**
			 * / The VIP is not logged in.
			 */
			Anonymous: null;
	  }
	| {
			__kind__: 'NotImportantPerson';
			/**
			 * / User is not a VIP
			 */
			NotImportantPerson: null;
	  }
	| {
			__kind__: 'UnknownCampaign';
			/**
			 * / The requested VIP campaign doesn't exist.
			 */
			UnknownCampaign: null;
	  }
	| {
			__kind__: 'VipReward';
			/**
			 * / The reward code
			 */
			VipReward: VipReward;
	  };
export interface S1E4ReferrerInfo {
	/**
	 * / Unrewarded s1e4 referrees.
	 */
	unrewarded_referees: Array<Principal>;
	/**
	 * / The number of referrals in S1E4 only.
	 */
	referrals_count: number;
}
export interface SetSprinkleTimestampArg {
	/**
	 * / The total amount that will be distributed across all users in the current/next sprinkle
	 */
	total_sprinkle_amount: bigint;
	/**
	 * / Minimum amount that must be in any user's account for the user to be eligible
	 * / for the current/next sprinkle
	 */
	min_account_amount: bigint;
	/**
	 * / The amount that will be distributed to selected users in the current/next sprinkle
	 */
	user_sprinkle_amount: bigint;
	/**
	 * / The timestamp at which the current/next sprinkle will start (if any)
	 * / in nanos since the epoch
	 */
	timestamp: bigint;
	/**
	 * / Ledger configuration used in the current/next sprinkle
	 */
	ledger_config: LedgerConfig;
}
export interface Transaction_Icrc {
	transaction_type: TransactionType;
	network: {};
	counterparty: Principal;
	timestamp: bigint;
	amount: bigint;
}
export interface SprinkleStatus {
	/**
	 * / The next scheduled event, if any
	 */
	next_timestamp?: bigint;
	/**
	 * / A list of past sprinkle events that have been completed
	 */
	past_events: Array<SprinkleEvent>;
}
export interface VipConfig {
	code_validity_duration: bigint;
	vips: Array<Principal>;
	rewards: Array<TokenConfig>;
}
export type EligibilityResponse =
	| {
			__kind__: 'Ok';
			/**
			 * /
			 */
			Ok: EligibilityReport;
	  }
	| {
			__kind__: 'Err';
			/**
			 * /
			 */
			Err: EligibilityError;
	  };
export interface ClaimedVipReward {
	/**
	 * / The campaign ID
	 */
	campaign_id: string;
}
export type CandidDuration =
	| {
			__kind__: 'Minutes';
			Minutes: bigint;
	  }
	| {
			__kind__: 'Seconds';
			Seconds: bigint;
	  }
	| {
			__kind__: 'Days';
			Days: bigint;
	  }
	| {
			__kind__: 'Forever';
			Forever: null;
	  }
	| {
			__kind__: 'Hours';
			Hours: bigint;
	  }
	| {
			__kind__: 'Nanoseconds';
			Nanoseconds: bigint;
	  };
export interface HoldingsPopcontestResponse {
	to?: number;
	from?: number;
	entries: Array<UserSnapshot>;
}
export interface UserData {
	/**
	 * / Super Important Powers
	 * /
	 * / Values are: Campaign IDs such as "vip" or "gold".
	 */
	superpowers?: Array<string>;
	/**
	 * / Airdrops the user has received
	 */
	airdrops: Array<RewardInfo>;
	/**
	 * / Usage awards the user has received
	 */
	usage_awards?: Array<RewardInfo>;
	/**
	 * / The last time the user submitted a snapshot, if ever.
	 */
	last_snapshot_timestamp?: bigint;
	/**
	 * / Very Important Powers
	 */
	is_vip?: boolean;
	/**
	 * / Sprinkles the user has received
	 */
	sprinkles: Array<RewardInfo>;
}
export interface VipReward {
	/**
	 * / The reward code
	 */
	code: string;
}
export interface StatsResponse {
	request: StatsRequest;
	stats: Array<[string, StatsValue]>;
}
export interface UsageAwardEvent {
	name: string;
	num_events_per_cycle: number;
	awards: Array<TokenConfig>;
	num_users_per_event: number;
	/**
	 * / The campaign the award is associated with.
	 */
	campaign_name?: string;
}
export interface LastActivityHistogramResponse {
	request_time: bigint;
	request: LastActivityHistogramRequest;
	response: LastActivityHistogram;
}
export interface UserDbKey {
	pouh_verified: boolean;
	oisy_user: Principal;
}
export interface Account {
	owner: Principal;
	subaccount?: Uint8Array;
}
export interface AccountSnapshot_Spl {
	decimals: number;
	token_address: string;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Spl>;
	account: string;
	timestamp: bigint;
	amount: bigint;
}
export interface EligibilityReport {
	/**
	 * /
	 */
	campaigns: Array<[string, CampaignEligibility]>;
}
export interface AnyNetwork {
	testnet_for?: string;
	network_id: string;
}
export interface UsageAwardState {
	/**
	 * / The time of the first activity.
	 */
	first_activity_ns?: bigint;
	/**
	 * / Timestamps of recent snapshots
	 */
	snapshot_timestamps: BigUint64Array;
	/**
	 * / The last few snapshots
	 */
	snapshots: Array<UserSnapshot>;
	/**
	 * / Pseudonym for user who introduced the caller to Oisy.
	 */
	referred_by?: number;
	/**
	 * / The time of the last activity.
	 */
	last_activity_ns?: bigint;
	/**
	 * / User's code for inviting others to the platform, and referral stats.
	 */
	referrer_info?: ReferrerInfo;
	/**
	 * / Referrer info for s1e4.
	 */
	s1e4_referrer_info?: S1E4ReferrerInfo;
}
export interface AccountSnapshot_Any {
	decimals: number;
	token_address: AnyToken;
	network: AnyNetwork;
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Any>;
	account: AccountId_Any;
	timestamp: bigint;
	amount: bigint;
}
export type PublicAirdropStatus =
	| {
			__kind__: 'Ongoing';
			/**
			 * / The airdrop is currently ongoing
			 */
			Ongoing: {
				/**
				 * / The remaining number of airdrops.
				 */
				remaining_airdrops: bigint;
				/**
				 * / The total number of airdrops.
				 */
				total_airdrops: bigint;
			};
	  }
	| {
			__kind__: 'Completed';
			/**
			 * / The airdrop has been completed
			 */
			Completed: {
				/**
				 * / The total number of airdrops.
				 */
				total_airdrops: bigint;
			};
	  }
	| {
			__kind__: 'Upcoming';
			/**
			 * / The airdrop will start in the future
			 */
			Upcoming: null;
	  };
export interface CriterionEligibility {
	/**
	 * / Whether the user satisfies the criterion
	 */
	satisfied: boolean;
	/**
	 * /
	 */
	criterion: Criterion;
}
export interface UsageAwardConfig {
	cycle_duration: CandidDuration;
	/**
	 * / Rules for probability multipliers based on satisfied criteria.
	 * / Maps multiplier values to lists of criterion names that must be satisfied.
	 */
	probability_multiplier_rules?: Array<[number, Array<CriterionName>]>;
	awards: Array<UsageAwardEvent>;
	eligibility_criteria: UsageCriteria;
	/**
	 * / The campaign the award is associated with.
	 */
	campaign_name?: string;
}
export interface UsageAwardStats {
	user_count: bigint;
	eligible_user_count: bigint;
	assets_usd: number;
	snapshot_count: bigint;
	awarded_count: bigint;
	award_events: bigint;
	eligible_snapshots: bigint;
}
export interface LastActivityHistogram {
	older: number;
	unknown: number;
	buckets: Array<LastActivityHistogramBucket>;
}
export interface UsageCriteria {
	criteria: Array<Criterion>;
}
export type AccountId_Any = string;
export interface AnyToken {
	token_symbol: string;
	wraps?: string;
}
export interface LastActivityHistogramRequest {
	bucket_count: number;
	bucket_duration: CandidDuration;
}
export interface ReferrerConfig {
	referrers_per_event: number;
	awards: Array<TokenConfig>;
	criteria: Array<Criterion>;
}
export type AccountSnapshotFor =
	| {
			__kind__: 'Any';
			Any: AccountSnapshot_Any;
	  }
	| {
			__kind__: 'Icrc';
			Icrc: AccountSnapshot_Icrc;
	  }
	| {
			__kind__: 'SplDevnet';
			SplDevnet: AccountSnapshot_Spl;
	  }
	| {
			__kind__: 'SplMainnet';
			SplMainnet: AccountSnapshot_Spl;
	  };
export interface AwardFilter {
	award_name?: string;
	campaign_id?: string;
}
export interface CampaignEligibility {
	/**
	 * /
	 */
	probability_multiplier_enabled?: boolean;
	/**
	 * /
	 */
	probability_multiplier?: number;
	/**
	 * /
	 */
	available: boolean;
	/**
	 * /
	 */
	eligible: boolean;
	/**
	 * /
	 */
	criteria: Array<CriterionEligibility>;
}
export interface UsageAndHolding {
	/**
	 * Time of account creation or first recorded activity.
	 */
	first_activity_ns?: bigint;
	/**
	 * Account valuation at the time of the last snapshot.
	 */
	approx_usd_valuation: number;
	/**
	 * Time of last recorded activity.
	 */
	last_activity_ns?: bigint;
}
export interface Config {
	usage_awards_config?: UsageAwardConfig;
	/**
	 * / The VIP configuration
	 */
	vip_config?: VipConfig;
	/**
	 * / VIP Campaigns
	 */
	vip_campaigns?: Array<[string, VipConfig]>;
	/**
	 * / Admin principals that have privileges to _read_ configuration and internal status.
	 */
	readonly_admins: Array<Principal>;
	/**
	 * / Oisy canister to fetch users from
	 */
	oisy_canister?: Principal;
	/**
	 * / S1E4 referral rewards configuration.
	 */
	s1e4_referral_config?: S1E4ReferralConfig;
}
export interface S1E4ReferralConfig {
	referrer: ReferrerConfig;
	cycle_duration: CandidDuration;
	events_per_cycle: number;
	campaign_id: string;
	referee: RefereeConfig;
}
export interface ReferrerInfo {
	/**
	 * / A short pseudonymous identifier for the referrer.
	 */
	referral_code: number;
	/**
	 * / The number of times the referral code has been used.
	 */
	num_referrals?: number;
}
export interface RewardInfo {
	/**
	 * / The name of the reward
	 */
	name?: string;
	/**
	 * / Ledger canister id of the token that was awarded.
	 */
	ledger: Principal;
	/**
	 * / The timestamp when the reward was awarded.
	 */
	timestamp: bigint;
	/**
	 * / The amount of tokens awarded.
	 */
	amount: bigint;
	/**
	 * / The campaign id of the reward
	 */
	campaign_id: string;
	/**
	 * / The campaign name of the reward
	 */
	campaign_name?: string;
}
export interface StatusResponse {
	/**
	 * / The latest last_updated timestamp of a fetched Oisy user
	 */
	latest_oisy_user_timestamp?: bigint;
	/**
	 * / Timestamps when the last successful fetch from each index canister was initiated.
	 */
	last_block_fetch_timestamp: Array<[Principal, bigint]>;
	/**
	 * / The number of blocks that are currently in the block buffer
	 */
	num_buffered_blocks: bigint;
	/**
	 * / Processed block height per ledger index canister
	 */
	processed_block_height: Array<[Principal, bigint]>;
	/**
	 * / The sprinkle status
	 */
	sprinkle_status: SprinkleStatus;
}
export type Criterion =
	| {
			__kind__: 'MinTransactions';
			/**
			 * / The user must have made at least `n` transactions across all networks.
			 */
			MinTransactions: {
				duration: CandidDuration;
				count: number;
			};
	  }
	| {
			__kind__: 'MinReferrals';
			/**
			 * / The user must have made at least this many successful referrals.
			 */
			MinReferrals: {
				count: number;
			};
	  }
	| {
			__kind__: 'MinTransactionsInNetwork';
			/**
			 * / The user must have made at least `n` transactions per network.
			 */
			MinTransactionsInNetwork: {
				duration: CandidDuration;
				count: number;
			};
	  }
	| {
			__kind__: 'MinLogins';
			/**
			 * / The user must have logged in at least `n` times recently, where recently
			 * / is defined by the duration.
			 */
			MinLogins: {
				/**
				 * / "recent" is defined by this duration.
				 */
				duration: CandidDuration;
				/**
				 * / The user must have logged in at least this many times recently.
				 */
				count: number;
				/**
				 * / The assumed session length.
				 */
				session_duration?: CandidDuration;
			};
	  }
	| {
			__kind__: 'MinTotalAssetsUsd';
			/**
			 * / The user must hold total assets of at least `n` USD across all networks.
			 */
			MinTotalAssetsUsd: {
				usd: number;
			};
	  }
	| {
			__kind__: 'MinTotalAssetsUsdInNetwork';
			/**
			 * / The user must hold total assets of at least `n` USD per network.
			 */
			MinTotalAssetsUsdInNetwork: {
				usd: number;
			};
	  }
	| {
			__kind__: 'Hangover';
			/**
			 * / The minimum time since the user's last sprinkles award.
			 */
			Hangover: {
				/**
				 * / The time that must pass before a sprinkled user can be eligible again.
				 */
				duration: CandidDuration;
				/**
				 * / Matching awards that prevent eligibility.  By default, any award will prevent eligibility.
				 */
				inhibitors?: Array<AwardFilter>;
			};
	  }
	| {
			__kind__: 'MinTokens';
			/**
			 * / The minimum number of distinct tokens that the user must hold.
			 */
			MinTokens: {
				count: number;
			};
	  }
	| {
			__kind__: 'EligibleForUsageAward';
			EligibleForUsageAward: null;
	  };
export interface StatsRequest {
	by: StatsKeyType;
}
export interface SprinkleEvent {
	/**
	 * / The number of users that were successfully sprinkled
	 */
	n_sprinkled_users: bigint;
	/**
	 * / When a sprinkle event was scheduled (via set_sprinkle_timestamp)
	 * / in nanoseconds since the EPOCH.
	 */
	timestamp_scheduled: bigint;
	/**
	 * / The number of users that eligible to get sprinkled during this sprinkle event
	 */
	n_eligible_users: bigint;
	/**
	 * / The number of users that were selected to receive sprinkle funds during this sprinkle event
	 * / (may be higher than actual number of users that actually received funds due to potential
	 * / transaction errors)
	 */
	n_selected_users: bigint;
}
export interface RefereeConfig {
	referees_per_referrer: number;
	awards: Array<TokenConfig>;
	criteria: Array<Criterion>;
}
export enum ClaimVipRewardResponse {
	/**
	 * / The code has been claimed already
	 */
	AlreadyClaimed = 'AlreadyClaimed',
	/**
	 * / The reward code
	 */
	Success = 'Success',
	/**
	 * / The code is invalid
	 */
	InvalidCode = 'InvalidCode'
}
export enum CriterionName {
	MinTransactions = 'MinTransactions',
	MinReferrals = 'MinReferrals',
	MinTransactionsInNetwork = 'MinTransactionsInNetwork',
	MinLogins = 'MinLogins',
	MinTotalAssetsUsd = 'MinTotalAssetsUsd',
	MinTotalAssetsUsdInNetwork = 'MinTotalAssetsUsdInNetwork',
	Hangover = 'Hangover',
	MinTokens = 'MinTokens',
	EligibleForUsageAward = 'EligibleForUsageAward'
}
export enum EligibilityError {
	/**
	 * /
	 */
	NotAuthorized = 'NotAuthorized'
}
export enum SetReferrerError {
	/**
	 * / The caller is attempting to refer themselves.
	 */
	SelfReferral = 'SelfReferral',
	/**
	 * / The caller already has a different referrer.
	 * /
	 * / (Repeatedly setting the referrer to the same value will cause no issues.)
	 */
	AlreadyHasReferrer = 'AlreadyHasReferrer',
	/**
	 * / The referrer code is unknown.
	 */
	UnknownReferrer = 'UnknownReferrer',
	/**
	 * / Only new users may set a referrer.
	 * /
	 * / A small allowance for existing state is made, in case the front-end
	 * / sends a snapshot before setting the referrer.
	 */
	NotNewUser = 'NotNewUser',
	/**
	 * / The caller is anonymous.
	 */
	AnonymousCaller = 'AnonymousCaller'
}
export enum StatsKeyType {
	TokenGroup = 'TokenGroup',
	Network = 'Network',
	TokenSymbol = 'TokenSymbol'
}
export enum TransactionType {
	Send = 'Send',
	Receive = 'Receive'
}
export interface rewardsInterface {
	claim_usage_award(arg0: UsageAwardEvent, arg1: Principal): Promise<void>;
	claim_vip_reward(arg0: VipReward): Promise<[ClaimVipRewardResponse, ClaimedVipReward | null]>;
	config(): Promise<Config>;
	configure_referral(arg0: S1E4ReferralConfig): Promise<void>;
	configure_usage_awards(arg0: UsageAwardConfig): Promise<void>;
	configure_vip(arg0: VipConfig): Promise<void>;
	configure_vips(arg0: Array<[string, VipConfig]>): Promise<void>;
	eligible(arg0: Principal | null): Promise<EligibilityResponse>;
	grant_usage_award(arg0: UsageAwardEvent, arg1: Principal | null): Promise<void>;
	holdings_popcontest(arg0: HoldingsPopcontestRequest): Promise<HoldingsPopcontestResponse>;
	last_activity_histogram(
		arg0: LastActivityHistogramRequest
	): Promise<LastActivityHistogramResponse>;
	new_vip_reward(arg0: ClaimedVipReward | null): Promise<NewVipRewardResponse>;
	referrer_info(): Promise<ReferrerInfo>;
	referrer_info_for(arg0: Principal): Promise<ReferrerInfo | null>;
	register_airdrop_recipient(arg0: UserSnapshot): Promise<void>;
	register_snapshot_for(arg0: Principal, arg1: UserSnapshot): Promise<void>;
	s1e4_eligible_referrers(): Promise<Array<[Principal, Array<Principal>]>>;
	set_referrer(arg0: number): Promise<SetReferrerResponse>;
	stats_by(arg0: StatsKeyType): Promise<StatsResponse>;
	stats_usage_vs_holding(): Promise<UsageVsHoldingStats>;
	trigger_s1e4_referrer_award_event(): Promise<void>;
	trigger_usage_award_event(arg0: UsageAwardEvent): Promise<void>;
	usage_stats(): Promise<UsageAwardStats>;
	usage_winners(arg0: UsageWinnersRequest | null): Promise<UsageWinnersResponse>;
	user_info(): Promise<UserData>;
	user_info_for(arg0: Principal): Promise<UserData>;
	user_stats(arg0: Principal): Promise<UsageAwardState>;
	vip_stats(arg0: string | null): Promise<VipStats>;
}
export class Rewards implements rewardsInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async claim_usage_award(arg0: UsageAwardEvent, arg1: Principal): Promise<void> {
		const result = await this.actor.claim_usage_award(to_candid_UsageAwardEvent_n1(arg0), arg1);
		return result;
	}
	async claim_vip_reward(
		arg0: VipReward
	): Promise<[ClaimVipRewardResponse, ClaimedVipReward | null]> {
		const result = await this.actor.claim_vip_reward(arg0);
		return [from_candid_ClaimVipRewardResponse_n8(result[0]), from_candid_opt_n10(result[1])];
	}
	async config(): Promise<Config> {
		const result = await this.actor.config();
		return from_candid_Config_n11(result);
	}
	async configure_referral(arg0: S1E4ReferralConfig): Promise<void> {
		const result = await this.actor.configure_referral(to_candid_S1E4ReferralConfig_n61(arg0));
		return result;
	}
	async configure_usage_awards(arg0: UsageAwardConfig): Promise<void> {
		const result = await this.actor.configure_usage_awards(to_candid_UsageAwardConfig_n78(arg0));
		return result;
	}
	async configure_vip(arg0: VipConfig): Promise<void> {
		const result = await this.actor.configure_vip(to_candid_VipConfig_n88(arg0));
		return result;
	}
	async configure_vips(arg0: Array<[string, VipConfig]>): Promise<void> {
		const result = await this.actor.configure_vips(to_candid_vec_n90(arg0));
		return result;
	}
	async eligible(arg0: Principal | null): Promise<EligibilityResponse> {
		const result = await this.actor.eligible(to_candid_opt_n92(arg0));
		return from_candid_EligibilityResponse_n93(result);
	}
	async grant_usage_award(arg0: UsageAwardEvent, arg1: Principal | null): Promise<void> {
		const result = await this.actor.grant_usage_award(
			to_candid_UsageAwardEvent_n1(arg0),
			to_candid_opt_n92(arg1)
		);
		return result;
	}
	async holdings_popcontest(arg0: HoldingsPopcontestRequest): Promise<HoldingsPopcontestResponse> {
		const result = await this.actor.holdings_popcontest(
			to_candid_HoldingsPopcontestRequest_n108(arg0)
		);
		return from_candid_HoldingsPopcontestResponse_n110(result);
	}
	async last_activity_histogram(
		arg0: LastActivityHistogramRequest
	): Promise<LastActivityHistogramResponse> {
		const result = await this.actor.last_activity_histogram(
			to_candid_LastActivityHistogramRequest_n141(arg0)
		);
		return from_candid_LastActivityHistogramResponse_n143(result);
	}
	async new_vip_reward(arg0: ClaimedVipReward | null): Promise<NewVipRewardResponse> {
		const result = await this.actor.new_vip_reward(to_candid_opt_n147(arg0));
		return from_candid_NewVipRewardResponse_n148(result);
	}
	async referrer_info(): Promise<ReferrerInfo> {
		const result = await this.actor.referrer_info();
		return from_candid_ReferrerInfo_n150(result);
	}
	async referrer_info_for(arg0: Principal): Promise<ReferrerInfo | null> {
		const result = await this.actor.referrer_info_for(arg0);
		return from_candid_opt_n152(result);
	}
	async register_airdrop_recipient(arg0: UserSnapshot): Promise<void> {
		const result = await this.actor.register_airdrop_recipient(to_candid_UserSnapshot_n153(arg0));
		return result;
	}
	async register_snapshot_for(arg0: Principal, arg1: UserSnapshot): Promise<void> {
		const result = await this.actor.register_snapshot_for(arg0, to_candid_UserSnapshot_n153(arg1));
		return result;
	}
	async s1e4_eligible_referrers(): Promise<Array<[Principal, Array<Principal>]>> {
		const result = await this.actor.s1e4_eligible_referrers();
		return result;
	}
	async set_referrer(arg0: number): Promise<SetReferrerResponse> {
		const result = await this.actor.set_referrer(arg0);
		return from_candid_SetReferrerResponse_n179(result);
	}
	async stats_by(arg0: StatsKeyType): Promise<StatsResponse> {
		const result = await this.actor.stats_by(to_candid_StatsKeyType_n183(arg0));
		return from_candid_StatsResponse_n185(result);
	}
	async stats_usage_vs_holding(): Promise<UsageVsHoldingStats> {
		const result = await this.actor.stats_usage_vs_holding();
		return from_candid_UsageVsHoldingStats_n191(result);
	}
	async trigger_s1e4_referrer_award_event(): Promise<void> {
		const result = await this.actor.trigger_s1e4_referrer_award_event();
		return result;
	}
	async trigger_usage_award_event(arg0: UsageAwardEvent): Promise<void> {
		const result = await this.actor.trigger_usage_award_event(to_candid_UsageAwardEvent_n1(arg0));
		return result;
	}
	async usage_stats(): Promise<UsageAwardStats> {
		const result = await this.actor.usage_stats();
		return result;
	}
	async usage_winners(arg0: UsageWinnersRequest | null): Promise<UsageWinnersResponse> {
		const result = await this.actor.usage_winners(to_candid_opt_n196(arg0));
		return from_candid_UsageWinnersResponse_n199(result);
	}
	async user_info(): Promise<UserData> {
		const result = await this.actor.user_info();
		return from_candid_UserData_n202(result);
	}
	async user_info_for(arg0: Principal): Promise<UserData> {
		const result = await this.actor.user_info_for(arg0);
		return from_candid_UserData_n202(result);
	}
	async user_stats(arg0: Principal): Promise<UsageAwardState> {
		const result = await this.actor.user_stats(arg0);
		return from_candid_UsageAwardState_n209(result);
	}
	async vip_stats(arg0: string | null): Promise<VipStats> {
		const result = await this.actor.vip_stats(to_candid_opt_n212(arg0));
		return result;
	}
}
function from_candid_AccountSnapshotFor_n117(value: _AccountSnapshotFor): AccountSnapshotFor {
	return from_candid_variant_n118(value);
}
function from_candid_AccountSnapshot_Any_n119(value: _AccountSnapshot_Any): AccountSnapshot_Any {
	return from_candid_record_n120(value);
}
function from_candid_AccountSnapshot_Icrc_n130(value: _AccountSnapshot_Icrc): AccountSnapshot_Icrc {
	return from_candid_record_n131(value);
}
function from_candid_AccountSnapshot_Spl_n135(value: _AccountSnapshot_Spl): AccountSnapshot_Spl {
	return from_candid_record_n136(value);
}
function from_candid_Account_n30(value: _Account): Account {
	return from_candid_record_n31(value);
}
function from_candid_AnyNetwork_n123(value: _AnyNetwork): AnyNetwork {
	return from_candid_record_n124(value);
}
function from_candid_AnyToken_n121(value: _AnyToken): AnyToken {
	return from_candid_record_n122(value);
}
function from_candid_AwardFilter_n45(value: _AwardFilter): AwardFilter {
	return from_candid_record_n46(value);
}
function from_candid_CampaignEligibility_n99(value: _CampaignEligibility): CampaignEligibility {
	return from_candid_record_n100(value);
}
function from_candid_CandidDuration_n16(value: _CandidDuration): CandidDuration {
	return from_candid_variant_n17(value);
}
function from_candid_ClaimVipRewardResponse_n8(
	value: _ClaimVipRewardResponse
): ClaimVipRewardResponse {
	return from_candid_variant_n9(value);
}
function from_candid_Config_n11(value: _Config): Config {
	return from_candid_record_n12(value);
}
function from_candid_CriterionEligibility_n104(value: _CriterionEligibility): CriterionEligibility {
	return from_candid_record_n105(value);
}
function from_candid_CriterionName_n22(value: _CriterionName): CriterionName {
	return from_candid_variant_n23(value);
}
function from_candid_Criterion_n37(value: _Criterion): Criterion {
	return from_candid_variant_n38(value);
}
function from_candid_EligibilityError_n106(value: _EligibilityError): EligibilityError {
	return from_candid_variant_n107(value);
}
function from_candid_EligibilityReport_n95(value: _EligibilityReport): EligibilityReport {
	return from_candid_record_n96(value);
}
function from_candid_EligibilityResponse_n93(value: _EligibilityResponse): EligibilityResponse {
	return from_candid_variant_n94(value);
}
function from_candid_HoldingsPopcontestResponse_n110(
	value: _HoldingsPopcontestResponse
): HoldingsPopcontestResponse {
	return from_candid_record_n111(value);
}
function from_candid_LastActivityHistogramRequest_n145(
	value: _LastActivityHistogramRequest
): LastActivityHistogramRequest {
	return from_candid_record_n146(value);
}
function from_candid_LastActivityHistogramResponse_n143(
	value: _LastActivityHistogramResponse
): LastActivityHistogramResponse {
	return from_candid_record_n144(value);
}
function from_candid_NewVipRewardResponse_n148(value: _NewVipRewardResponse): NewVipRewardResponse {
	return from_candid_variant_n149(value);
}
function from_candid_RefereeConfig_n59(value: _RefereeConfig): RefereeConfig {
	return from_candid_record_n60(value);
}
function from_candid_ReferrerConfig_n57(value: _ReferrerConfig): ReferrerConfig {
	return from_candid_record_n58(value);
}
function from_candid_ReferrerInfo_n150(value: _ReferrerInfo): ReferrerInfo {
	return from_candid_record_n151(value);
}
function from_candid_RewardInfo_n206(value: _RewardInfo): RewardInfo {
	return from_candid_record_n207(value);
}
function from_candid_S1E4ReferralConfig_n55(value: _S1E4ReferralConfig): S1E4ReferralConfig {
	return from_candid_record_n56(value);
}
function from_candid_SetReferrerError_n181(value: _SetReferrerError): SetReferrerError {
	return from_candid_variant_n182(value);
}
function from_candid_SetReferrerResponse_n179(value: _SetReferrerResponse): SetReferrerResponse {
	return from_candid_variant_n180(value);
}
function from_candid_StatsKeyType_n189(value: _StatsKeyType): StatsKeyType {
	return from_candid_variant_n190(value);
}
function from_candid_StatsRequest_n187(value: _StatsRequest): StatsRequest {
	return from_candid_record_n188(value);
}
function from_candid_StatsResponse_n185(value: _StatsResponse): StatsResponse {
	return from_candid_record_n186(value);
}
function from_candid_TokenConfig_n28(value: _TokenConfig): TokenConfig {
	return from_candid_record_n29(value);
}
function from_candid_TransactionType_n128(value: _TransactionType): TransactionType {
	return from_candid_variant_n129(value);
}
function from_candid_Transaction_Any_n126(value: _Transaction_Any): Transaction_Any {
	return from_candid_record_n127(value);
}
function from_candid_Transaction_Icrc_n133(value: _Transaction_Icrc): Transaction_Icrc {
	return from_candid_record_n134(value);
}
function from_candid_Transaction_Spl_n138(value: _Transaction_Spl): Transaction_Spl {
	return from_candid_record_n139(value);
}
function from_candid_UsageAndHolding_n194(value: _UsageAndHolding): UsageAndHolding {
	return from_candid_record_n195(value);
}
function from_candid_UsageAwardConfig_n14(value: _UsageAwardConfig): UsageAwardConfig {
	return from_candid_record_n15(value);
}
function from_candid_UsageAwardEvent_n25(value: _UsageAwardEvent): UsageAwardEvent {
	return from_candid_record_n26(value);
}
function from_candid_UsageAwardState_n209(value: _UsageAwardState): UsageAwardState {
	return from_candid_record_n210(value);
}
function from_candid_UsageCriteria_n34(value: _UsageCriteria): UsageCriteria {
	return from_candid_record_n35(value);
}
function from_candid_UsageVsHoldingStats_n191(value: _UsageVsHoldingStats): UsageVsHoldingStats {
	return from_candid_record_n192(value);
}
function from_candid_UsageWinnersResponse_n199(value: _UsageWinnersResponse): UsageWinnersResponse {
	return from_candid_record_n200(value);
}
function from_candid_UserData_n202(value: _UserData): UserData {
	return from_candid_record_n203(value);
}
function from_candid_UserSnapshot_n114(value: _UserSnapshot): UserSnapshot {
	return from_candid_record_n115(value);
}
function from_candid_VipConfig_n48(value: _VipConfig): VipConfig {
	return from_candid_record_n49(value);
}
function from_candid_opt_n10(value: [] | [_ClaimedVipReward]): ClaimedVipReward | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n101(value: [] | [boolean]): boolean | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n102(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n112(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n13(value: [] | [_UsageAwardConfig]): UsageAwardConfig | null {
	return value.length === 0 ? null : from_candid_UsageAwardConfig_n14(value[0]);
}
function from_candid_opt_n140(value: [] | [bigint]): bigint | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n152(value: [] | [_ReferrerInfo]): ReferrerInfo | null {
	return value.length === 0 ? null : from_candid_ReferrerInfo_n150(value[0]);
}
function from_candid_opt_n18(
	value: [] | [Array<[number, Array<_CriterionName>]>]
): Array<[number, Array<CriterionName>]> | null {
	return value.length === 0 ? null : from_candid_vec_n19(value[0]);
}
function from_candid_opt_n201(value: [] | [_UserDbKey]): UserDbKey | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n204(value: [] | [Array<string>]): Array<string> | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n208(value: [] | [Array<_RewardInfo>]): Array<RewardInfo> | null {
	return value.length === 0 ? null : from_candid_vec_n205(value[0]);
}
function from_candid_opt_n211(value: [] | [_S1E4ReferrerInfo]): S1E4ReferrerInfo | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n32(value: [] | [Uint8Array]): Uint8Array | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n33(value: [] | [string]): string | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n41(value: [] | [_CandidDuration]): CandidDuration | null {
	return value.length === 0 ? null : from_candid_CandidDuration_n16(value[0]);
}
function from_candid_opt_n43(value: [] | [Array<_AwardFilter>]): Array<AwardFilter> | null {
	return value.length === 0 ? null : from_candid_vec_n44(value[0]);
}
function from_candid_opt_n47(value: [] | [_VipConfig]): VipConfig | null {
	return value.length === 0 ? null : from_candid_VipConfig_n48(value[0]);
}
function from_candid_opt_n50(
	value: [] | [Array<[string, _VipConfig]>]
): Array<[string, VipConfig]> | null {
	return value.length === 0 ? null : from_candid_vec_n51(value[0]);
}
function from_candid_opt_n53(value: [] | [Principal]): Principal | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n54(value: [] | [_S1E4ReferralConfig]): S1E4ReferralConfig | null {
	return value.length === 0 ? null : from_candid_S1E4ReferralConfig_n55(value[0]);
}
function from_candid_record_n100(value: {
	probability_multiplier_enabled: [] | [boolean];
	probability_multiplier: [] | [number];
	available: boolean;
	eligible: boolean;
	criteria: Array<_CriterionEligibility>;
}): {
	probability_multiplier_enabled?: boolean;
	probability_multiplier?: number;
	available: boolean;
	eligible: boolean;
	criteria: Array<CriterionEligibility>;
} {
	return {
		probability_multiplier_enabled: record_opt_to_undefined(
			from_candid_opt_n101(value.probability_multiplier_enabled)
		),
		probability_multiplier: record_opt_to_undefined(
			from_candid_opt_n102(value.probability_multiplier)
		),
		available: value.available,
		eligible: value.eligible,
		criteria: from_candid_vec_n103(value.criteria)
	};
}
function from_candid_record_n105(value: { satisfied: boolean; criterion: _Criterion }): {
	satisfied: boolean;
	criterion: Criterion;
} {
	return {
		satisfied: value.satisfied,
		criterion: from_candid_Criterion_n37(value.criterion)
	};
}
function from_candid_record_n111(value: {
	to: [] | [number];
	from: [] | [number];
	entries: Array<_UserSnapshot>;
}): {
	to?: number;
	from?: number;
	entries: Array<UserSnapshot>;
} {
	return {
		to: record_opt_to_undefined(from_candid_opt_n112(value.to)),
		from: record_opt_to_undefined(from_candid_opt_n112(value.from)),
		entries: from_candid_vec_n113(value.entries)
	};
}
function from_candid_record_n115(value: {
	accounts: Array<_AccountSnapshotFor>;
	timestamp: [] | [bigint];
}): {
	accounts: Array<AccountSnapshotFor>;
	timestamp?: bigint;
} {
	return {
		accounts: from_candid_vec_n116(value.accounts),
		timestamp: record_opt_to_undefined(from_candid_opt_n140(value.timestamp))
	};
}
function from_candid_record_n12(value: {
	usage_awards_config: [] | [_UsageAwardConfig];
	vip_config: [] | [_VipConfig];
	vip_campaigns: [] | [Array<[string, _VipConfig]>];
	readonly_admins: Array<Principal>;
	oisy_canister: [] | [Principal];
	s1e4_referral_config: [] | [_S1E4ReferralConfig];
}): {
	usage_awards_config?: UsageAwardConfig;
	vip_config?: VipConfig;
	vip_campaigns?: Array<[string, VipConfig]>;
	readonly_admins: Array<Principal>;
	oisy_canister?: Principal;
	s1e4_referral_config?: S1E4ReferralConfig;
} {
	return {
		usage_awards_config: record_opt_to_undefined(from_candid_opt_n13(value.usage_awards_config)),
		vip_config: record_opt_to_undefined(from_candid_opt_n47(value.vip_config)),
		vip_campaigns: record_opt_to_undefined(from_candid_opt_n50(value.vip_campaigns)),
		readonly_admins: value.readonly_admins,
		oisy_canister: record_opt_to_undefined(from_candid_opt_n53(value.oisy_canister)),
		s1e4_referral_config: record_opt_to_undefined(from_candid_opt_n54(value.s1e4_referral_config))
	};
}
function from_candid_record_n120(value: {
	decimals: number;
	token_address: _AnyToken;
	network: _AnyNetwork;
	approx_usd_per_token: number;
	last_transactions: Array<_Transaction_Any>;
	account: _AccountId_Any;
	timestamp: bigint;
	amount: bigint;
}): {
	decimals: number;
	token_address: AnyToken;
	network: AnyNetwork;
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Any>;
	account: AccountId_Any;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		decimals: value.decimals,
		token_address: from_candid_AnyToken_n121(value.token_address),
		network: from_candid_AnyNetwork_n123(value.network),
		approx_usd_per_token: value.approx_usd_per_token,
		last_transactions: from_candid_vec_n125(value.last_transactions),
		account: value.account,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function from_candid_record_n122(value: { token_symbol: string; wraps: [] | [string] }): {
	token_symbol: string;
	wraps?: string;
} {
	return {
		token_symbol: value.token_symbol,
		wraps: record_opt_to_undefined(from_candid_opt_n33(value.wraps))
	};
}
function from_candid_record_n124(value: { testnet_for: [] | [string]; network_id: string }): {
	testnet_for?: string;
	network_id: string;
} {
	return {
		testnet_for: record_opt_to_undefined(from_candid_opt_n33(value.testnet_for)),
		network_id: value.network_id
	};
}
function from_candid_record_n127(value: {
	transaction_type: _TransactionType;
	network: _AnyNetwork;
	counterparty: _AccountId_Any;
	timestamp: bigint;
	amount: bigint;
}): {
	transaction_type: TransactionType;
	network: AnyNetwork;
	counterparty: AccountId_Any;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		transaction_type: from_candid_TransactionType_n128(value.transaction_type),
		network: from_candid_AnyNetwork_n123(value.network),
		counterparty: value.counterparty,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function from_candid_record_n131(value: {
	decimals: number;
	token_address: Principal;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<_Transaction_Icrc>;
	account: Principal;
	timestamp: bigint;
	amount: bigint;
}): {
	decimals: number;
	token_address: Principal;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Icrc>;
	account: Principal;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		decimals: value.decimals,
		token_address: value.token_address,
		network: value.network,
		approx_usd_per_token: value.approx_usd_per_token,
		last_transactions: from_candid_vec_n132(value.last_transactions),
		account: value.account,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function from_candid_record_n134(value: {
	transaction_type: _TransactionType;
	network: {};
	counterparty: Principal;
	timestamp: bigint;
	amount: bigint;
}): {
	transaction_type: TransactionType;
	network: {};
	counterparty: Principal;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		transaction_type: from_candid_TransactionType_n128(value.transaction_type),
		network: value.network,
		counterparty: value.counterparty,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function from_candid_record_n136(value: {
	decimals: number;
	token_address: string;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<_Transaction_Spl>;
	account: string;
	timestamp: bigint;
	amount: bigint;
}): {
	decimals: number;
	token_address: string;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Spl>;
	account: string;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		decimals: value.decimals,
		token_address: value.token_address,
		network: value.network,
		approx_usd_per_token: value.approx_usd_per_token,
		last_transactions: from_candid_vec_n137(value.last_transactions),
		account: value.account,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function from_candid_record_n139(value: {
	transaction_type: _TransactionType;
	network: {};
	counterparty: string;
	timestamp: bigint;
	amount: bigint;
}): {
	transaction_type: TransactionType;
	network: {};
	counterparty: string;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		transaction_type: from_candid_TransactionType_n128(value.transaction_type),
		network: value.network,
		counterparty: value.counterparty,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function from_candid_record_n144(value: {
	request_time: bigint;
	request: _LastActivityHistogramRequest;
	response: _LastActivityHistogram;
}): {
	request_time: bigint;
	request: LastActivityHistogramRequest;
	response: LastActivityHistogram;
} {
	return {
		request_time: value.request_time,
		request: from_candid_LastActivityHistogramRequest_n145(value.request),
		response: value.response
	};
}
function from_candid_record_n146(value: {
	bucket_count: number;
	bucket_duration: _CandidDuration;
}): {
	bucket_count: number;
	bucket_duration: CandidDuration;
} {
	return {
		bucket_count: value.bucket_count,
		bucket_duration: from_candid_CandidDuration_n16(value.bucket_duration)
	};
}
function from_candid_record_n15(value: {
	cycle_duration: _CandidDuration;
	probability_multiplier_rules: [] | [Array<[number, Array<_CriterionName>]>];
	awards: Array<_UsageAwardEvent>;
	eligibility_criteria: _UsageCriteria;
	campaign_name: [] | [string];
}): {
	cycle_duration: CandidDuration;
	probability_multiplier_rules?: Array<[number, Array<CriterionName>]>;
	awards: Array<UsageAwardEvent>;
	eligibility_criteria: UsageCriteria;
	campaign_name?: string;
} {
	return {
		cycle_duration: from_candid_CandidDuration_n16(value.cycle_duration),
		probability_multiplier_rules: record_opt_to_undefined(
			from_candid_opt_n18(value.probability_multiplier_rules)
		),
		awards: from_candid_vec_n24(value.awards),
		eligibility_criteria: from_candid_UsageCriteria_n34(value.eligibility_criteria),
		campaign_name: record_opt_to_undefined(from_candid_opt_n33(value.campaign_name))
	};
}
function from_candid_record_n151(value: { referral_code: number; num_referrals: [] | [number] }): {
	referral_code: number;
	num_referrals?: number;
} {
	return {
		referral_code: value.referral_code,
		num_referrals: record_opt_to_undefined(from_candid_opt_n102(value.num_referrals))
	};
}
function from_candid_record_n186(value: {
	request: _StatsRequest;
	stats: Array<[string, _StatsValue]>;
}): {
	request: StatsRequest;
	stats: Array<[string, StatsValue]>;
} {
	return {
		request: from_candid_StatsRequest_n187(value.request),
		stats: value.stats
	};
}
function from_candid_record_n188(value: { by: _StatsKeyType }): {
	by: StatsKeyType;
} {
	return {
		by: from_candid_StatsKeyType_n189(value.by)
	};
}
function from_candid_record_n192(value: { holdings: Array<_UsageAndHolding> }): {
	holdings: Array<UsageAndHolding>;
} {
	return {
		holdings: from_candid_vec_n193(value.holdings)
	};
}
function from_candid_record_n195(value: {
	first_activity_ns: [] | [bigint];
	approx_usd_valuation: number;
	last_activity_ns: [] | [bigint];
}): {
	first_activity_ns?: bigint;
	approx_usd_valuation: number;
	last_activity_ns?: bigint;
} {
	return {
		first_activity_ns: record_opt_to_undefined(from_candid_opt_n140(value.first_activity_ns)),
		approx_usd_valuation: value.approx_usd_valuation,
		last_activity_ns: record_opt_to_undefined(from_candid_opt_n140(value.last_activity_ns))
	};
}
function from_candid_record_n200(value: {
	last: [] | [_UserDbKey];
	num_checked: number;
	winners: Array<Principal>;
}): {
	last?: UserDbKey;
	num_checked: number;
	winners: Array<Principal>;
} {
	return {
		last: record_opt_to_undefined(from_candid_opt_n201(value.last)),
		num_checked: value.num_checked,
		winners: value.winners
	};
}
function from_candid_record_n203(value: {
	superpowers: [] | [Array<string>];
	airdrops: Array<_RewardInfo>;
	usage_awards: [] | [Array<_RewardInfo>];
	last_snapshot_timestamp: [] | [bigint];
	is_vip: [] | [boolean];
	sprinkles: Array<_RewardInfo>;
}): {
	superpowers?: Array<string>;
	airdrops: Array<RewardInfo>;
	usage_awards?: Array<RewardInfo>;
	last_snapshot_timestamp?: bigint;
	is_vip?: boolean;
	sprinkles: Array<RewardInfo>;
} {
	return {
		superpowers: record_opt_to_undefined(from_candid_opt_n204(value.superpowers)),
		airdrops: from_candid_vec_n205(value.airdrops),
		usage_awards: record_opt_to_undefined(from_candid_opt_n208(value.usage_awards)),
		last_snapshot_timestamp: record_opt_to_undefined(
			from_candid_opt_n140(value.last_snapshot_timestamp)
		),
		is_vip: record_opt_to_undefined(from_candid_opt_n101(value.is_vip)),
		sprinkles: from_candid_vec_n205(value.sprinkles)
	};
}
function from_candid_record_n207(value: {
	name: [] | [string];
	ledger: Principal;
	timestamp: bigint;
	amount: bigint;
	campaign_id: string;
	campaign_name: [] | [string];
}): {
	name?: string;
	ledger: Principal;
	timestamp: bigint;
	amount: bigint;
	campaign_id: string;
	campaign_name?: string;
} {
	return {
		name: record_opt_to_undefined(from_candid_opt_n33(value.name)),
		ledger: value.ledger,
		timestamp: value.timestamp,
		amount: value.amount,
		campaign_id: value.campaign_id,
		campaign_name: record_opt_to_undefined(from_candid_opt_n33(value.campaign_name))
	};
}
function from_candid_record_n210(value: {
	first_activity_ns: [] | [bigint];
	snapshot_timestamps: BigUint64Array;
	snapshots: Array<_UserSnapshot>;
	referred_by: [] | [number];
	last_activity_ns: [] | [bigint];
	referrer_info: [] | [_ReferrerInfo];
	s1e4_referrer_info: [] | [_S1E4ReferrerInfo];
}): {
	first_activity_ns?: bigint;
	snapshot_timestamps: BigUint64Array;
	snapshots: Array<UserSnapshot>;
	referred_by?: number;
	last_activity_ns?: bigint;
	referrer_info?: ReferrerInfo;
	s1e4_referrer_info?: S1E4ReferrerInfo;
} {
	return {
		first_activity_ns: record_opt_to_undefined(from_candid_opt_n140(value.first_activity_ns)),
		snapshot_timestamps: value.snapshot_timestamps,
		snapshots: from_candid_vec_n113(value.snapshots),
		referred_by: record_opt_to_undefined(from_candid_opt_n102(value.referred_by)),
		last_activity_ns: record_opt_to_undefined(from_candid_opt_n140(value.last_activity_ns)),
		referrer_info: record_opt_to_undefined(from_candid_opt_n152(value.referrer_info)),
		s1e4_referrer_info: record_opt_to_undefined(from_candid_opt_n211(value.s1e4_referrer_info))
	};
}
function from_candid_record_n26(value: {
	name: string;
	num_events_per_cycle: number;
	awards: Array<_TokenConfig>;
	num_users_per_event: number;
	campaign_name: [] | [string];
}): {
	name: string;
	num_events_per_cycle: number;
	awards: Array<TokenConfig>;
	num_users_per_event: number;
	campaign_name?: string;
} {
	return {
		name: value.name,
		num_events_per_cycle: value.num_events_per_cycle,
		awards: from_candid_vec_n27(value.awards),
		num_users_per_event: value.num_users_per_event,
		campaign_name: record_opt_to_undefined(from_candid_opt_n33(value.campaign_name))
	};
}
function from_candid_record_n29(value: {
	amount_per_user: bigint;
	account: _Account;
	ledger_canister: Principal;
}): {
	amount_per_user: bigint;
	account: Account;
	ledger_canister: Principal;
} {
	return {
		amount_per_user: value.amount_per_user,
		account: from_candid_Account_n30(value.account),
		ledger_canister: value.ledger_canister
	};
}
function from_candid_record_n31(value: { owner: Principal; subaccount: [] | [Uint8Array] }): {
	owner: Principal;
	subaccount?: Uint8Array;
} {
	return {
		owner: value.owner,
		subaccount: record_opt_to_undefined(from_candid_opt_n32(value.subaccount))
	};
}
function from_candid_record_n35(value: { criteria: Array<_Criterion> }): {
	criteria: Array<Criterion>;
} {
	return {
		criteria: from_candid_vec_n36(value.criteria)
	};
}
function from_candid_record_n39(value: { duration: _CandidDuration; count: number }): {
	duration: CandidDuration;
	count: number;
} {
	return {
		duration: from_candid_CandidDuration_n16(value.duration),
		count: value.count
	};
}
function from_candid_record_n40(value: {
	duration: _CandidDuration;
	count: number;
	session_duration: [] | [_CandidDuration];
}): {
	duration: CandidDuration;
	count: number;
	session_duration?: CandidDuration;
} {
	return {
		duration: from_candid_CandidDuration_n16(value.duration),
		count: value.count,
		session_duration: record_opt_to_undefined(from_candid_opt_n41(value.session_duration))
	};
}
function from_candid_record_n42(value: {
	duration: _CandidDuration;
	inhibitors: [] | [Array<_AwardFilter>];
}): {
	duration: CandidDuration;
	inhibitors?: Array<AwardFilter>;
} {
	return {
		duration: from_candid_CandidDuration_n16(value.duration),
		inhibitors: record_opt_to_undefined(from_candid_opt_n43(value.inhibitors))
	};
}
function from_candid_record_n46(value: { award_name: [] | [string]; campaign_id: [] | [string] }): {
	award_name?: string;
	campaign_id?: string;
} {
	return {
		award_name: record_opt_to_undefined(from_candid_opt_n33(value.award_name)),
		campaign_id: record_opt_to_undefined(from_candid_opt_n33(value.campaign_id))
	};
}
function from_candid_record_n49(value: {
	code_validity_duration: bigint;
	vips: Array<Principal>;
	rewards: Array<_TokenConfig>;
}): {
	code_validity_duration: bigint;
	vips: Array<Principal>;
	rewards: Array<TokenConfig>;
} {
	return {
		code_validity_duration: value.code_validity_duration,
		vips: value.vips,
		rewards: from_candid_vec_n27(value.rewards)
	};
}
function from_candid_record_n56(value: {
	referrer: _ReferrerConfig;
	cycle_duration: _CandidDuration;
	events_per_cycle: number;
	campaign_id: string;
	referee: _RefereeConfig;
}): {
	referrer: ReferrerConfig;
	cycle_duration: CandidDuration;
	events_per_cycle: number;
	campaign_id: string;
	referee: RefereeConfig;
} {
	return {
		referrer: from_candid_ReferrerConfig_n57(value.referrer),
		cycle_duration: from_candid_CandidDuration_n16(value.cycle_duration),
		events_per_cycle: value.events_per_cycle,
		campaign_id: value.campaign_id,
		referee: from_candid_RefereeConfig_n59(value.referee)
	};
}
function from_candid_record_n58(value: {
	referrers_per_event: number;
	awards: Array<_TokenConfig>;
	criteria: Array<_Criterion>;
}): {
	referrers_per_event: number;
	awards: Array<TokenConfig>;
	criteria: Array<Criterion>;
} {
	return {
		referrers_per_event: value.referrers_per_event,
		awards: from_candid_vec_n27(value.awards),
		criteria: from_candid_vec_n36(value.criteria)
	};
}
function from_candid_record_n60(value: {
	referees_per_referrer: number;
	awards: Array<_TokenConfig>;
	criteria: Array<_Criterion>;
}): {
	referees_per_referrer: number;
	awards: Array<TokenConfig>;
	criteria: Array<Criterion>;
} {
	return {
		referees_per_referrer: value.referees_per_referrer,
		awards: from_candid_vec_n27(value.awards),
		criteria: from_candid_vec_n36(value.criteria)
	};
}
function from_candid_record_n96(value: { campaigns: Array<[string, _CampaignEligibility]> }): {
	campaigns: Array<[string, CampaignEligibility]>;
} {
	return {
		campaigns: from_candid_vec_n97(value.campaigns)
	};
}
function from_candid_tuple_n20(
	value: [number, Array<_CriterionName>]
): [number, Array<CriterionName>] {
	return [value[0], from_candid_vec_n21(value[1])];
}
function from_candid_tuple_n52(value: [string, _VipConfig]): [string, VipConfig] {
	return [value[0], from_candid_VipConfig_n48(value[1])];
}
function from_candid_tuple_n98(
	value: [string, _CampaignEligibility]
): [string, CampaignEligibility] {
	return [value[0], from_candid_CampaignEligibility_n99(value[1])];
}
function from_candid_variant_n107(value: { NotAuthorized: null }): EligibilityError {
	return 'NotAuthorized' in value ? EligibilityError.NotAuthorized : value;
}
function from_candid_variant_n118(
	value:
		| {
				Any: _AccountSnapshot_Any;
		  }
		| {
				Icrc: _AccountSnapshot_Icrc;
		  }
		| {
				SplDevnet: _AccountSnapshot_Spl;
		  }
		| {
				SplMainnet: _AccountSnapshot_Spl;
		  }
):
	| {
			__kind__: 'Any';
			Any: AccountSnapshot_Any;
	  }
	| {
			__kind__: 'Icrc';
			Icrc: AccountSnapshot_Icrc;
	  }
	| {
			__kind__: 'SplDevnet';
			SplDevnet: AccountSnapshot_Spl;
	  }
	| {
			__kind__: 'SplMainnet';
			SplMainnet: AccountSnapshot_Spl;
	  } {
	return 'Any' in value
		? {
				__kind__: 'Any',
				Any: from_candid_AccountSnapshot_Any_n119(value.Any)
			}
		: 'Icrc' in value
			? {
					__kind__: 'Icrc',
					Icrc: from_candid_AccountSnapshot_Icrc_n130(value.Icrc)
				}
			: 'SplDevnet' in value
				? {
						__kind__: 'SplDevnet',
						SplDevnet: from_candid_AccountSnapshot_Spl_n135(value.SplDevnet)
					}
				: 'SplMainnet' in value
					? {
							__kind__: 'SplMainnet',
							SplMainnet: from_candid_AccountSnapshot_Spl_n135(value.SplMainnet)
						}
					: value;
}
function from_candid_variant_n129(
	value:
		| {
				Send: null;
		  }
		| {
				Receive: null;
		  }
): TransactionType {
	return 'Send' in value
		? TransactionType.Send
		: 'Receive' in value
			? TransactionType.Receive
			: value;
}
function from_candid_variant_n149(
	value:
		| {
				Anonymous: null;
		  }
		| {
				NotImportantPerson: null;
		  }
		| {
				UnknownCampaign: null;
		  }
		| {
				VipReward: _VipReward;
		  }
):
	| {
			__kind__: 'Anonymous';
			Anonymous: null;
	  }
	| {
			__kind__: 'NotImportantPerson';
			NotImportantPerson: null;
	  }
	| {
			__kind__: 'UnknownCampaign';
			UnknownCampaign: null;
	  }
	| {
			__kind__: 'VipReward';
			VipReward: VipReward;
	  } {
	return 'Anonymous' in value
		? {
				__kind__: 'Anonymous',
				Anonymous: value.Anonymous
			}
		: 'NotImportantPerson' in value
			? {
					__kind__: 'NotImportantPerson',
					NotImportantPerson: value.NotImportantPerson
				}
			: 'UnknownCampaign' in value
				? {
						__kind__: 'UnknownCampaign',
						UnknownCampaign: value.UnknownCampaign
					}
				: 'VipReward' in value
					? {
							__kind__: 'VipReward',
							VipReward: value.VipReward
						}
					: value;
}
function from_candid_variant_n17(
	value:
		| {
				Minutes: bigint;
		  }
		| {
				Seconds: bigint;
		  }
		| {
				Days: bigint;
		  }
		| {
				Forever: null;
		  }
		| {
				Hours: bigint;
		  }
		| {
				Nanoseconds: bigint;
		  }
):
	| {
			__kind__: 'Minutes';
			Minutes: bigint;
	  }
	| {
			__kind__: 'Seconds';
			Seconds: bigint;
	  }
	| {
			__kind__: 'Days';
			Days: bigint;
	  }
	| {
			__kind__: 'Forever';
			Forever: null;
	  }
	| {
			__kind__: 'Hours';
			Hours: bigint;
	  }
	| {
			__kind__: 'Nanoseconds';
			Nanoseconds: bigint;
	  } {
	return 'Minutes' in value
		? {
				__kind__: 'Minutes',
				Minutes: value.Minutes
			}
		: 'Seconds' in value
			? {
					__kind__: 'Seconds',
					Seconds: value.Seconds
				}
			: 'Days' in value
				? {
						__kind__: 'Days',
						Days: value.Days
					}
				: 'Forever' in value
					? {
							__kind__: 'Forever',
							Forever: value.Forever
						}
					: 'Hours' in value
						? {
								__kind__: 'Hours',
								Hours: value.Hours
							}
						: 'Nanoseconds' in value
							? {
									__kind__: 'Nanoseconds',
									Nanoseconds: value.Nanoseconds
								}
							: value;
}
function from_candid_variant_n180(
	value:
		| {
				Ok: null;
		  }
		| {
				Err: _SetReferrerError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: SetReferrerError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_SetReferrerError_n181(value.Err)
				}
			: value;
}
function from_candid_variant_n182(
	value:
		| {
				SelfReferral: null;
		  }
		| {
				AlreadyHasReferrer: null;
		  }
		| {
				UnknownReferrer: null;
		  }
		| {
				NotNewUser: null;
		  }
		| {
				AnonymousCaller: null;
		  }
): SetReferrerError {
	return 'SelfReferral' in value
		? SetReferrerError.SelfReferral
		: 'AlreadyHasReferrer' in value
			? SetReferrerError.AlreadyHasReferrer
			: 'UnknownReferrer' in value
				? SetReferrerError.UnknownReferrer
				: 'NotNewUser' in value
					? SetReferrerError.NotNewUser
					: 'AnonymousCaller' in value
						? SetReferrerError.AnonymousCaller
						: value;
}
function from_candid_variant_n190(
	value:
		| {
				TokenGroup: null;
		  }
		| {
				Network: null;
		  }
		| {
				TokenSymbol: null;
		  }
): StatsKeyType {
	return 'TokenGroup' in value
		? StatsKeyType.TokenGroup
		: 'Network' in value
			? StatsKeyType.Network
			: 'TokenSymbol' in value
				? StatsKeyType.TokenSymbol
				: value;
}
function from_candid_variant_n23(
	value:
		| {
				MinTransactions: null;
		  }
		| {
				MinReferrals: null;
		  }
		| {
				MinTransactionsInNetwork: null;
		  }
		| {
				MinLogins: null;
		  }
		| {
				MinTotalAssetsUsd: null;
		  }
		| {
				MinTotalAssetsUsdInNetwork: null;
		  }
		| {
				Hangover: null;
		  }
		| {
				MinTokens: null;
		  }
		| {
				EligibleForUsageAward: null;
		  }
): CriterionName {
	return 'MinTransactions' in value
		? CriterionName.MinTransactions
		: 'MinReferrals' in value
			? CriterionName.MinReferrals
			: 'MinTransactionsInNetwork' in value
				? CriterionName.MinTransactionsInNetwork
				: 'MinLogins' in value
					? CriterionName.MinLogins
					: 'MinTotalAssetsUsd' in value
						? CriterionName.MinTotalAssetsUsd
						: 'MinTotalAssetsUsdInNetwork' in value
							? CriterionName.MinTotalAssetsUsdInNetwork
							: 'Hangover' in value
								? CriterionName.Hangover
								: 'MinTokens' in value
									? CriterionName.MinTokens
									: 'EligibleForUsageAward' in value
										? CriterionName.EligibleForUsageAward
										: value;
}
function from_candid_variant_n38(
	value:
		| {
				MinTransactions: {
					duration: _CandidDuration;
					count: number;
				};
		  }
		| {
				MinReferrals: {
					count: number;
				};
		  }
		| {
				MinTransactionsInNetwork: {
					duration: _CandidDuration;
					count: number;
				};
		  }
		| {
				MinLogins: {
					duration: _CandidDuration;
					count: number;
					session_duration: [] | [_CandidDuration];
				};
		  }
		| {
				MinTotalAssetsUsd: {
					usd: number;
				};
		  }
		| {
				MinTotalAssetsUsdInNetwork: {
					usd: number;
				};
		  }
		| {
				Hangover: {
					duration: _CandidDuration;
					inhibitors: [] | [Array<_AwardFilter>];
				};
		  }
		| {
				MinTokens: {
					count: number;
				};
		  }
		| {
				EligibleForUsageAward: null;
		  }
):
	| {
			__kind__: 'MinTransactions';
			MinTransactions: {
				duration: CandidDuration;
				count: number;
			};
	  }
	| {
			__kind__: 'MinReferrals';
			MinReferrals: {
				count: number;
			};
	  }
	| {
			__kind__: 'MinTransactionsInNetwork';
			MinTransactionsInNetwork: {
				duration: CandidDuration;
				count: number;
			};
	  }
	| {
			__kind__: 'MinLogins';
			MinLogins: {
				duration: CandidDuration;
				count: number;
				session_duration?: CandidDuration;
			};
	  }
	| {
			__kind__: 'MinTotalAssetsUsd';
			MinTotalAssetsUsd: {
				usd: number;
			};
	  }
	| {
			__kind__: 'MinTotalAssetsUsdInNetwork';
			MinTotalAssetsUsdInNetwork: {
				usd: number;
			};
	  }
	| {
			__kind__: 'Hangover';
			Hangover: {
				duration: CandidDuration;
				inhibitors?: Array<AwardFilter>;
			};
	  }
	| {
			__kind__: 'MinTokens';
			MinTokens: {
				count: number;
			};
	  }
	| {
			__kind__: 'EligibleForUsageAward';
			EligibleForUsageAward: null;
	  } {
	return 'MinTransactions' in value
		? {
				__kind__: 'MinTransactions',
				MinTransactions: from_candid_record_n39(value.MinTransactions)
			}
		: 'MinReferrals' in value
			? {
					__kind__: 'MinReferrals',
					MinReferrals: value.MinReferrals
				}
			: 'MinTransactionsInNetwork' in value
				? {
						__kind__: 'MinTransactionsInNetwork',
						MinTransactionsInNetwork: from_candid_record_n39(value.MinTransactionsInNetwork)
					}
				: 'MinLogins' in value
					? {
							__kind__: 'MinLogins',
							MinLogins: from_candid_record_n40(value.MinLogins)
						}
					: 'MinTotalAssetsUsd' in value
						? {
								__kind__: 'MinTotalAssetsUsd',
								MinTotalAssetsUsd: value.MinTotalAssetsUsd
							}
						: 'MinTotalAssetsUsdInNetwork' in value
							? {
									__kind__: 'MinTotalAssetsUsdInNetwork',
									MinTotalAssetsUsdInNetwork: value.MinTotalAssetsUsdInNetwork
								}
							: 'Hangover' in value
								? {
										__kind__: 'Hangover',
										Hangover: from_candid_record_n42(value.Hangover)
									}
								: 'MinTokens' in value
									? {
											__kind__: 'MinTokens',
											MinTokens: value.MinTokens
										}
									: 'EligibleForUsageAward' in value
										? {
												__kind__: 'EligibleForUsageAward',
												EligibleForUsageAward: value.EligibleForUsageAward
											}
										: value;
}
function from_candid_variant_n9(
	value:
		| {
				AlreadyClaimed: null;
		  }
		| {
				Success: null;
		  }
		| {
				InvalidCode: null;
		  }
): ClaimVipRewardResponse {
	return 'AlreadyClaimed' in value
		? ClaimVipRewardResponse.AlreadyClaimed
		: 'Success' in value
			? ClaimVipRewardResponse.Success
			: 'InvalidCode' in value
				? ClaimVipRewardResponse.InvalidCode
				: value;
}
function from_candid_variant_n94(
	value:
		| {
				Ok: _EligibilityReport;
		  }
		| {
				Err: _EligibilityError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: EligibilityReport;
	  }
	| {
			__kind__: 'Err';
			Err: EligibilityError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_EligibilityReport_n95(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_EligibilityError_n106(value.Err)
				}
			: value;
}
function from_candid_vec_n103(value: Array<_CriterionEligibility>): Array<CriterionEligibility> {
	return value.map((x) => from_candid_CriterionEligibility_n104(x));
}
function from_candid_vec_n113(value: Array<_UserSnapshot>): Array<UserSnapshot> {
	return value.map((x) => from_candid_UserSnapshot_n114(x));
}
function from_candid_vec_n116(value: Array<_AccountSnapshotFor>): Array<AccountSnapshotFor> {
	return value.map((x) => from_candid_AccountSnapshotFor_n117(x));
}
function from_candid_vec_n125(value: Array<_Transaction_Any>): Array<Transaction_Any> {
	return value.map((x) => from_candid_Transaction_Any_n126(x));
}
function from_candid_vec_n132(value: Array<_Transaction_Icrc>): Array<Transaction_Icrc> {
	return value.map((x) => from_candid_Transaction_Icrc_n133(x));
}
function from_candid_vec_n137(value: Array<_Transaction_Spl>): Array<Transaction_Spl> {
	return value.map((x) => from_candid_Transaction_Spl_n138(x));
}
function from_candid_vec_n19(
	value: Array<[number, Array<_CriterionName>]>
): Array<[number, Array<CriterionName>]> {
	return value.map((x) => from_candid_tuple_n20(x));
}
function from_candid_vec_n193(value: Array<_UsageAndHolding>): Array<UsageAndHolding> {
	return value.map((x) => from_candid_UsageAndHolding_n194(x));
}
function from_candid_vec_n205(value: Array<_RewardInfo>): Array<RewardInfo> {
	return value.map((x) => from_candid_RewardInfo_n206(x));
}
function from_candid_vec_n21(value: Array<_CriterionName>): Array<CriterionName> {
	return value.map((x) => from_candid_CriterionName_n22(x));
}
function from_candid_vec_n24(value: Array<_UsageAwardEvent>): Array<UsageAwardEvent> {
	return value.map((x) => from_candid_UsageAwardEvent_n25(x));
}
function from_candid_vec_n27(value: Array<_TokenConfig>): Array<TokenConfig> {
	return value.map((x) => from_candid_TokenConfig_n28(x));
}
function from_candid_vec_n36(value: Array<_Criterion>): Array<Criterion> {
	return value.map((x) => from_candid_Criterion_n37(x));
}
function from_candid_vec_n44(value: Array<_AwardFilter>): Array<AwardFilter> {
	return value.map((x) => from_candid_AwardFilter_n45(x));
}
function from_candid_vec_n51(value: Array<[string, _VipConfig]>): Array<[string, VipConfig]> {
	return value.map((x) => from_candid_tuple_n52(x));
}
function from_candid_vec_n97(
	value: Array<[string, _CampaignEligibility]>
): Array<[string, CampaignEligibility]> {
	return value.map((x) => from_candid_tuple_n98(x));
}
function to_candid_AccountSnapshotFor_n156(value: AccountSnapshotFor): _AccountSnapshotFor {
	return to_candid_variant_n157(value);
}
function to_candid_AccountSnapshot_Any_n170(value: AccountSnapshot_Any): _AccountSnapshot_Any {
	return to_candid_record_n171(value);
}
function to_candid_AccountSnapshot_Icrc_n165(value: AccountSnapshot_Icrc): _AccountSnapshot_Icrc {
	return to_candid_record_n166(value);
}
function to_candid_AccountSnapshot_Spl_n158(value: AccountSnapshot_Spl): _AccountSnapshot_Spl {
	return to_candid_record_n159(value);
}
function to_candid_Account_n6(value: Account): _Account {
	return to_candid_record_n7(value);
}
function to_candid_AnyNetwork_n174(value: AnyNetwork): _AnyNetwork {
	return to_candid_record_n175(value);
}
function to_candid_AnyToken_n172(value: AnyToken): _AnyToken {
	return to_candid_record_n173(value);
}
function to_candid_AwardFilter_n72(value: AwardFilter): _AwardFilter {
	return to_candid_record_n73(value);
}
function to_candid_CandidDuration_n69(value: CandidDuration): _CandidDuration {
	return to_candid_variant_n70(value);
}
function to_candid_CriterionName_n83(value: CriterionName): _CriterionName {
	return to_candid_variant_n84(value);
}
function to_candid_Criterion_n66(value: Criterion): _Criterion {
	return to_candid_variant_n67(value);
}
function to_candid_HoldingsPopcontestRequest_n108(
	value: HoldingsPopcontestRequest
): _HoldingsPopcontestRequest {
	return to_candid_record_n109(value);
}
function to_candid_LastActivityHistogramRequest_n141(
	value: LastActivityHistogramRequest
): _LastActivityHistogramRequest {
	return to_candid_record_n142(value);
}
function to_candid_RefereeConfig_n76(value: RefereeConfig): _RefereeConfig {
	return to_candid_record_n77(value);
}
function to_candid_ReferrerConfig_n63(value: ReferrerConfig): _ReferrerConfig {
	return to_candid_record_n64(value);
}
function to_candid_S1E4ReferralConfig_n61(value: S1E4ReferralConfig): _S1E4ReferralConfig {
	return to_candid_record_n62(value);
}
function to_candid_StatsKeyType_n183(value: StatsKeyType): _StatsKeyType {
	return to_candid_variant_n184(value);
}
function to_candid_TokenConfig_n4(value: TokenConfig): _TokenConfig {
	return to_candid_record_n5(value);
}
function to_candid_TransactionType_n163(value: TransactionType): _TransactionType {
	return to_candid_variant_n164(value);
}
function to_candid_Transaction_Any_n177(value: Transaction_Any): _Transaction_Any {
	return to_candid_record_n178(value);
}
function to_candid_Transaction_Icrc_n168(value: Transaction_Icrc): _Transaction_Icrc {
	return to_candid_record_n169(value);
}
function to_candid_Transaction_Spl_n161(value: Transaction_Spl): _Transaction_Spl {
	return to_candid_record_n162(value);
}
function to_candid_UsageAwardConfig_n78(value: UsageAwardConfig): _UsageAwardConfig {
	return to_candid_record_n79(value);
}
function to_candid_UsageAwardEvent_n1(value: UsageAwardEvent): _UsageAwardEvent {
	return to_candid_record_n2(value);
}
function to_candid_UsageCriteria_n86(value: UsageCriteria): _UsageCriteria {
	return to_candid_record_n87(value);
}
function to_candid_UsageWinnersRequest_n197(value: UsageWinnersRequest): _UsageWinnersRequest {
	return to_candid_record_n198(value);
}
function to_candid_UserSnapshot_n153(value: UserSnapshot): _UserSnapshot {
	return to_candid_record_n154(value);
}
function to_candid_VipConfig_n88(value: VipConfig): _VipConfig {
	return to_candid_record_n89(value);
}
function to_candid_opt_n147(value: ClaimedVipReward | null): [] | [_ClaimedVipReward] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_opt_n196(value: UsageWinnersRequest | null): [] | [_UsageWinnersRequest] {
	return value === null ? candid_none() : candid_some(to_candid_UsageWinnersRequest_n197(value));
}
function to_candid_opt_n212(value: string | null): [] | [string] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_opt_n92(value: Principal | null): [] | [Principal] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_record_n109(value: { to?: number; from?: number }): {
	to: [] | [number];
	from: [] | [number];
} {
	return {
		to: value.to ? candid_some(value.to) : candid_none(),
		from: value.from ? candid_some(value.from) : candid_none()
	};
}
function to_candid_record_n142(value: { bucket_count: number; bucket_duration: CandidDuration }): {
	bucket_count: number;
	bucket_duration: _CandidDuration;
} {
	return {
		bucket_count: value.bucket_count,
		bucket_duration: to_candid_CandidDuration_n69(value.bucket_duration)
	};
}
function to_candid_record_n154(value: {
	accounts: Array<AccountSnapshotFor>;
	timestamp?: bigint;
}): {
	accounts: Array<_AccountSnapshotFor>;
	timestamp: [] | [bigint];
} {
	return {
		accounts: to_candid_vec_n155(value.accounts),
		timestamp: value.timestamp ? candid_some(value.timestamp) : candid_none()
	};
}
function to_candid_record_n159(value: {
	decimals: number;
	token_address: string;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Spl>;
	account: string;
	timestamp: bigint;
	amount: bigint;
}): {
	decimals: number;
	token_address: string;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<_Transaction_Spl>;
	account: string;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		decimals: value.decimals,
		token_address: value.token_address,
		network: value.network,
		approx_usd_per_token: value.approx_usd_per_token,
		last_transactions: to_candid_vec_n160(value.last_transactions),
		account: value.account,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function to_candid_record_n162(value: {
	transaction_type: TransactionType;
	network: {};
	counterparty: string;
	timestamp: bigint;
	amount: bigint;
}): {
	transaction_type: _TransactionType;
	network: {};
	counterparty: string;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		transaction_type: to_candid_TransactionType_n163(value.transaction_type),
		network: value.network,
		counterparty: value.counterparty,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function to_candid_record_n166(value: {
	decimals: number;
	token_address: Principal;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Icrc>;
	account: Principal;
	timestamp: bigint;
	amount: bigint;
}): {
	decimals: number;
	token_address: Principal;
	network: {};
	approx_usd_per_token: number;
	last_transactions: Array<_Transaction_Icrc>;
	account: Principal;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		decimals: value.decimals,
		token_address: value.token_address,
		network: value.network,
		approx_usd_per_token: value.approx_usd_per_token,
		last_transactions: to_candid_vec_n167(value.last_transactions),
		account: value.account,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function to_candid_record_n169(value: {
	transaction_type: TransactionType;
	network: {};
	counterparty: Principal;
	timestamp: bigint;
	amount: bigint;
}): {
	transaction_type: _TransactionType;
	network: {};
	counterparty: Principal;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		transaction_type: to_candid_TransactionType_n163(value.transaction_type),
		network: value.network,
		counterparty: value.counterparty,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function to_candid_record_n171(value: {
	decimals: number;
	token_address: AnyToken;
	network: AnyNetwork;
	approx_usd_per_token: number;
	last_transactions: Array<Transaction_Any>;
	account: AccountId_Any;
	timestamp: bigint;
	amount: bigint;
}): {
	decimals: number;
	token_address: _AnyToken;
	network: _AnyNetwork;
	approx_usd_per_token: number;
	last_transactions: Array<_Transaction_Any>;
	account: _AccountId_Any;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		decimals: value.decimals,
		token_address: to_candid_AnyToken_n172(value.token_address),
		network: to_candid_AnyNetwork_n174(value.network),
		approx_usd_per_token: value.approx_usd_per_token,
		last_transactions: to_candid_vec_n176(value.last_transactions),
		account: value.account,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function to_candid_record_n173(value: { token_symbol: string; wraps?: string }): {
	token_symbol: string;
	wraps: [] | [string];
} {
	return {
		token_symbol: value.token_symbol,
		wraps: value.wraps ? candid_some(value.wraps) : candid_none()
	};
}
function to_candid_record_n175(value: { testnet_for?: string; network_id: string }): {
	testnet_for: [] | [string];
	network_id: string;
} {
	return {
		testnet_for: value.testnet_for ? candid_some(value.testnet_for) : candid_none(),
		network_id: value.network_id
	};
}
function to_candid_record_n178(value: {
	transaction_type: TransactionType;
	network: AnyNetwork;
	counterparty: AccountId_Any;
	timestamp: bigint;
	amount: bigint;
}): {
	transaction_type: _TransactionType;
	network: _AnyNetwork;
	counterparty: _AccountId_Any;
	timestamp: bigint;
	amount: bigint;
} {
	return {
		transaction_type: to_candid_TransactionType_n163(value.transaction_type),
		network: to_candid_AnyNetwork_n174(value.network),
		counterparty: value.counterparty,
		timestamp: value.timestamp,
		amount: value.amount
	};
}
function to_candid_record_n198(value: {
	to_ns: bigint;
	from_ns: bigint;
	limit: number;
	after_user?: UserDbKey;
}): {
	to_ns: bigint;
	from_ns: bigint;
	limit: number;
	after_user: [] | [_UserDbKey];
} {
	return {
		to_ns: value.to_ns,
		from_ns: value.from_ns,
		limit: value.limit,
		after_user: value.after_user ? candid_some(value.after_user) : candid_none()
	};
}
function to_candid_record_n2(value: {
	name: string;
	num_events_per_cycle: number;
	awards: Array<TokenConfig>;
	num_users_per_event: number;
	campaign_name?: string;
}): {
	name: string;
	num_events_per_cycle: number;
	awards: Array<_TokenConfig>;
	num_users_per_event: number;
	campaign_name: [] | [string];
} {
	return {
		name: value.name,
		num_events_per_cycle: value.num_events_per_cycle,
		awards: to_candid_vec_n3(value.awards),
		num_users_per_event: value.num_users_per_event,
		campaign_name: value.campaign_name ? candid_some(value.campaign_name) : candid_none()
	};
}
function to_candid_record_n5(value: {
	amount_per_user: bigint;
	account: Account;
	ledger_canister: Principal;
}): {
	amount_per_user: bigint;
	account: _Account;
	ledger_canister: Principal;
} {
	return {
		amount_per_user: value.amount_per_user,
		account: to_candid_Account_n6(value.account),
		ledger_canister: value.ledger_canister
	};
}
function to_candid_record_n62(value: {
	referrer: ReferrerConfig;
	cycle_duration: CandidDuration;
	events_per_cycle: number;
	campaign_id: string;
	referee: RefereeConfig;
}): {
	referrer: _ReferrerConfig;
	cycle_duration: _CandidDuration;
	events_per_cycle: number;
	campaign_id: string;
	referee: _RefereeConfig;
} {
	return {
		referrer: to_candid_ReferrerConfig_n63(value.referrer),
		cycle_duration: to_candid_CandidDuration_n69(value.cycle_duration),
		events_per_cycle: value.events_per_cycle,
		campaign_id: value.campaign_id,
		referee: to_candid_RefereeConfig_n76(value.referee)
	};
}
function to_candid_record_n64(value: {
	referrers_per_event: number;
	awards: Array<TokenConfig>;
	criteria: Array<Criterion>;
}): {
	referrers_per_event: number;
	awards: Array<_TokenConfig>;
	criteria: Array<_Criterion>;
} {
	return {
		referrers_per_event: value.referrers_per_event,
		awards: to_candid_vec_n3(value.awards),
		criteria: to_candid_vec_n65(value.criteria)
	};
}
function to_candid_record_n68(value: {
	duration: CandidDuration;
	inhibitors?: Array<AwardFilter>;
}): {
	duration: _CandidDuration;
	inhibitors: [] | [Array<_AwardFilter>];
} {
	return {
		duration: to_candid_CandidDuration_n69(value.duration),
		inhibitors: value.inhibitors ? candid_some(to_candid_vec_n71(value.inhibitors)) : candid_none()
	};
}
function to_candid_record_n7(value: { owner: Principal; subaccount?: Uint8Array }): {
	owner: Principal;
	subaccount: [] | [Uint8Array];
} {
	return {
		owner: value.owner,
		subaccount: value.subaccount ? candid_some(value.subaccount) : candid_none()
	};
}
function to_candid_record_n73(value: { award_name?: string; campaign_id?: string }): {
	award_name: [] | [string];
	campaign_id: [] | [string];
} {
	return {
		award_name: value.award_name ? candid_some(value.award_name) : candid_none(),
		campaign_id: value.campaign_id ? candid_some(value.campaign_id) : candid_none()
	};
}
function to_candid_record_n74(value: {
	duration: CandidDuration;
	count: number;
	session_duration?: CandidDuration;
}): {
	duration: _CandidDuration;
	count: number;
	session_duration: [] | [_CandidDuration];
} {
	return {
		duration: to_candid_CandidDuration_n69(value.duration),
		count: value.count,
		session_duration: value.session_duration
			? candid_some(to_candid_CandidDuration_n69(value.session_duration))
			: candid_none()
	};
}
function to_candid_record_n75(value: { duration: CandidDuration; count: number }): {
	duration: _CandidDuration;
	count: number;
} {
	return {
		duration: to_candid_CandidDuration_n69(value.duration),
		count: value.count
	};
}
function to_candid_record_n77(value: {
	referees_per_referrer: number;
	awards: Array<TokenConfig>;
	criteria: Array<Criterion>;
}): {
	referees_per_referrer: number;
	awards: Array<_TokenConfig>;
	criteria: Array<_Criterion>;
} {
	return {
		referees_per_referrer: value.referees_per_referrer,
		awards: to_candid_vec_n3(value.awards),
		criteria: to_candid_vec_n65(value.criteria)
	};
}
function to_candid_record_n79(value: {
	cycle_duration: CandidDuration;
	probability_multiplier_rules?: Array<[number, Array<CriterionName>]>;
	awards: Array<UsageAwardEvent>;
	eligibility_criteria: UsageCriteria;
	campaign_name?: string;
}): {
	cycle_duration: _CandidDuration;
	probability_multiplier_rules: [] | [Array<[number, Array<_CriterionName>]>];
	awards: Array<_UsageAwardEvent>;
	eligibility_criteria: _UsageCriteria;
	campaign_name: [] | [string];
} {
	return {
		cycle_duration: to_candid_CandidDuration_n69(value.cycle_duration),
		probability_multiplier_rules: value.probability_multiplier_rules
			? candid_some(to_candid_vec_n80(value.probability_multiplier_rules))
			: candid_none(),
		awards: to_candid_vec_n85(value.awards),
		eligibility_criteria: to_candid_UsageCriteria_n86(value.eligibility_criteria),
		campaign_name: value.campaign_name ? candid_some(value.campaign_name) : candid_none()
	};
}
function to_candid_record_n87(value: { criteria: Array<Criterion> }): {
	criteria: Array<_Criterion>;
} {
	return {
		criteria: to_candid_vec_n65(value.criteria)
	};
}
function to_candid_record_n89(value: {
	code_validity_duration: bigint;
	vips: Array<Principal>;
	rewards: Array<TokenConfig>;
}): {
	code_validity_duration: bigint;
	vips: Array<Principal>;
	rewards: Array<_TokenConfig>;
} {
	return {
		code_validity_duration: value.code_validity_duration,
		vips: value.vips,
		rewards: to_candid_vec_n3(value.rewards)
	};
}
function to_candid_tuple_n81(
	value: [number, Array<CriterionName>]
): [number, Array<_CriterionName>] {
	return [value[0], to_candid_vec_n82(value[1])];
}
function to_candid_tuple_n91(value: [string, VipConfig]): [string, _VipConfig] {
	return [value[0], to_candid_VipConfig_n88(value[1])];
}
function to_candid_variant_n157(
	value:
		| {
				__kind__: 'Any';
				Any: AccountSnapshot_Any;
		  }
		| {
				__kind__: 'Icrc';
				Icrc: AccountSnapshot_Icrc;
		  }
		| {
				__kind__: 'SplDevnet';
				SplDevnet: AccountSnapshot_Spl;
		  }
		| {
				__kind__: 'SplMainnet';
				SplMainnet: AccountSnapshot_Spl;
		  }
):
	| {
			Any: _AccountSnapshot_Any;
	  }
	| {
			Icrc: _AccountSnapshot_Icrc;
	  }
	| {
			SplDevnet: _AccountSnapshot_Spl;
	  }
	| {
			SplMainnet: _AccountSnapshot_Spl;
	  } {
	return value.__kind__ === 'Any'
		? {
				Any: to_candid_AccountSnapshot_Any_n170(value.Any)
			}
		: value.__kind__ === 'Icrc'
			? {
					Icrc: to_candid_AccountSnapshot_Icrc_n165(value.Icrc)
				}
			: value.__kind__ === 'SplDevnet'
				? {
						SplDevnet: to_candid_AccountSnapshot_Spl_n158(value.SplDevnet)
					}
				: value.__kind__ === 'SplMainnet'
					? {
							SplMainnet: to_candid_AccountSnapshot_Spl_n158(value.SplMainnet)
						}
					: value;
}
function to_candid_variant_n164(value: TransactionType):
	| {
			Send: null;
	  }
	| {
			Receive: null;
	  } {
	return value == TransactionType.Send
		? {
				Send: null
			}
		: value == TransactionType.Receive
			? {
					Receive: null
				}
			: value;
}
function to_candid_variant_n184(value: StatsKeyType):
	| {
			TokenGroup: null;
	  }
	| {
			Network: null;
	  }
	| {
			TokenSymbol: null;
	  } {
	return value == StatsKeyType.TokenGroup
		? {
				TokenGroup: null
			}
		: value == StatsKeyType.Network
			? {
					Network: null
				}
			: value == StatsKeyType.TokenSymbol
				? {
						TokenSymbol: null
					}
				: value;
}
function to_candid_variant_n67(
	value:
		| {
				__kind__: 'MinTransactions';
				MinTransactions: {
					duration: CandidDuration;
					count: number;
				};
		  }
		| {
				__kind__: 'MinReferrals';
				MinReferrals: {
					count: number;
				};
		  }
		| {
				__kind__: 'MinTransactionsInNetwork';
				MinTransactionsInNetwork: {
					duration: CandidDuration;
					count: number;
				};
		  }
		| {
				__kind__: 'MinLogins';
				MinLogins: {
					duration: CandidDuration;
					count: number;
					session_duration?: CandidDuration;
				};
		  }
		| {
				__kind__: 'MinTotalAssetsUsd';
				MinTotalAssetsUsd: {
					usd: number;
				};
		  }
		| {
				__kind__: 'MinTotalAssetsUsdInNetwork';
				MinTotalAssetsUsdInNetwork: {
					usd: number;
				};
		  }
		| {
				__kind__: 'Hangover';
				Hangover: {
					duration: CandidDuration;
					inhibitors?: Array<AwardFilter>;
				};
		  }
		| {
				__kind__: 'MinTokens';
				MinTokens: {
					count: number;
				};
		  }
		| {
				__kind__: 'EligibleForUsageAward';
				EligibleForUsageAward: null;
		  }
):
	| {
			MinTransactions: {
				duration: _CandidDuration;
				count: number;
			};
	  }
	| {
			MinReferrals: {
				count: number;
			};
	  }
	| {
			MinTransactionsInNetwork: {
				duration: _CandidDuration;
				count: number;
			};
	  }
	| {
			MinLogins: {
				duration: _CandidDuration;
				count: number;
				session_duration: [] | [_CandidDuration];
			};
	  }
	| {
			MinTotalAssetsUsd: {
				usd: number;
			};
	  }
	| {
			MinTotalAssetsUsdInNetwork: {
				usd: number;
			};
	  }
	| {
			Hangover: {
				duration: _CandidDuration;
				inhibitors: [] | [Array<_AwardFilter>];
			};
	  }
	| {
			MinTokens: {
				count: number;
			};
	  }
	| {
			EligibleForUsageAward: null;
	  } {
	return value.__kind__ === 'MinTransactions'
		? {
				MinTransactions: to_candid_record_n75(value.MinTransactions)
			}
		: value.__kind__ === 'MinReferrals'
			? {
					MinReferrals: value.MinReferrals
				}
			: value.__kind__ === 'MinTransactionsInNetwork'
				? {
						MinTransactionsInNetwork: to_candid_record_n75(value.MinTransactionsInNetwork)
					}
				: value.__kind__ === 'MinLogins'
					? {
							MinLogins: to_candid_record_n74(value.MinLogins)
						}
					: value.__kind__ === 'MinTotalAssetsUsd'
						? {
								MinTotalAssetsUsd: value.MinTotalAssetsUsd
							}
						: value.__kind__ === 'MinTotalAssetsUsdInNetwork'
							? {
									MinTotalAssetsUsdInNetwork: value.MinTotalAssetsUsdInNetwork
								}
							: value.__kind__ === 'Hangover'
								? {
										Hangover: to_candid_record_n68(value.Hangover)
									}
								: value.__kind__ === 'MinTokens'
									? {
											MinTokens: value.MinTokens
										}
									: value.__kind__ === 'EligibleForUsageAward'
										? {
												EligibleForUsageAward: value.EligibleForUsageAward
											}
										: value;
}
function to_candid_variant_n70(
	value:
		| {
				__kind__: 'Minutes';
				Minutes: bigint;
		  }
		| {
				__kind__: 'Seconds';
				Seconds: bigint;
		  }
		| {
				__kind__: 'Days';
				Days: bigint;
		  }
		| {
				__kind__: 'Forever';
				Forever: null;
		  }
		| {
				__kind__: 'Hours';
				Hours: bigint;
		  }
		| {
				__kind__: 'Nanoseconds';
				Nanoseconds: bigint;
		  }
):
	| {
			Minutes: bigint;
	  }
	| {
			Seconds: bigint;
	  }
	| {
			Days: bigint;
	  }
	| {
			Forever: null;
	  }
	| {
			Hours: bigint;
	  }
	| {
			Nanoseconds: bigint;
	  } {
	return value.__kind__ === 'Minutes'
		? {
				Minutes: value.Minutes
			}
		: value.__kind__ === 'Seconds'
			? {
					Seconds: value.Seconds
				}
			: value.__kind__ === 'Days'
				? {
						Days: value.Days
					}
				: value.__kind__ === 'Forever'
					? {
							Forever: value.Forever
						}
					: value.__kind__ === 'Hours'
						? {
								Hours: value.Hours
							}
						: value.__kind__ === 'Nanoseconds'
							? {
									Nanoseconds: value.Nanoseconds
								}
							: value;
}
function to_candid_variant_n84(value: CriterionName):
	| {
			MinTransactions: null;
	  }
	| {
			MinReferrals: null;
	  }
	| {
			MinTransactionsInNetwork: null;
	  }
	| {
			MinLogins: null;
	  }
	| {
			MinTotalAssetsUsd: null;
	  }
	| {
			MinTotalAssetsUsdInNetwork: null;
	  }
	| {
			Hangover: null;
	  }
	| {
			MinTokens: null;
	  }
	| {
			EligibleForUsageAward: null;
	  } {
	return value == CriterionName.MinTransactions
		? {
				MinTransactions: null
			}
		: value == CriterionName.MinReferrals
			? {
					MinReferrals: null
				}
			: value == CriterionName.MinTransactionsInNetwork
				? {
						MinTransactionsInNetwork: null
					}
				: value == CriterionName.MinLogins
					? {
							MinLogins: null
						}
					: value == CriterionName.MinTotalAssetsUsd
						? {
								MinTotalAssetsUsd: null
							}
						: value == CriterionName.MinTotalAssetsUsdInNetwork
							? {
									MinTotalAssetsUsdInNetwork: null
								}
							: value == CriterionName.Hangover
								? {
										Hangover: null
									}
								: value == CriterionName.MinTokens
									? {
											MinTokens: null
										}
									: value == CriterionName.EligibleForUsageAward
										? {
												EligibleForUsageAward: null
											}
										: value;
}
function to_candid_vec_n155(value: Array<AccountSnapshotFor>): Array<_AccountSnapshotFor> {
	return value.map((x) => to_candid_AccountSnapshotFor_n156(x));
}
function to_candid_vec_n160(value: Array<Transaction_Spl>): Array<_Transaction_Spl> {
	return value.map((x) => to_candid_Transaction_Spl_n161(x));
}
function to_candid_vec_n167(value: Array<Transaction_Icrc>): Array<_Transaction_Icrc> {
	return value.map((x) => to_candid_Transaction_Icrc_n168(x));
}
function to_candid_vec_n176(value: Array<Transaction_Any>): Array<_Transaction_Any> {
	return value.map((x) => to_candid_Transaction_Any_n177(x));
}
function to_candid_vec_n3(value: Array<TokenConfig>): Array<_TokenConfig> {
	return value.map((x) => to_candid_TokenConfig_n4(x));
}
function to_candid_vec_n65(value: Array<Criterion>): Array<_Criterion> {
	return value.map((x) => to_candid_Criterion_n66(x));
}
function to_candid_vec_n71(value: Array<AwardFilter>): Array<_AwardFilter> {
	return value.map((x) => to_candid_AwardFilter_n72(x));
}
function to_candid_vec_n80(
	value: Array<[number, Array<CriterionName>]>
): Array<[number, Array<_CriterionName>]> {
	return value.map((x) => to_candid_tuple_n81(x));
}
function to_candid_vec_n82(value: Array<CriterionName>): Array<_CriterionName> {
	return value.map((x) => to_candid_CriterionName_n83(x));
}
function to_candid_vec_n85(value: Array<UsageAwardEvent>): Array<_UsageAwardEvent> {
	return value.map((x) => to_candid_UsageAwardEvent_n1(x));
}
function to_candid_vec_n90(value: Array<[string, VipConfig]>): Array<[string, _VipConfig]> {
	return value.map((x) => to_candid_tuple_n91(x));
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(canisterId: string, options: CreateActorOptions = {}): Rewards {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Rewards(actor);
}
