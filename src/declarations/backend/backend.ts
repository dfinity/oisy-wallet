/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import type { Principal } from '@icp-sdk/core/principal';
import { idlFactory, type _SERVICE } from './declarations/backend.did';
import type {
	AddDappSettingsError as _AddDappSettingsError,
	AddHiddenDappIdRequest as _AddHiddenDappIdRequest,
	AddUserCredentialError as _AddUserCredentialError,
	AddUserCredentialRequest as _AddUserCredentialRequest,
	AddUserCredentialResult as _AddUserCredentialResult,
	AddUserHiddenDappIdResult as _AddUserHiddenDappIdResult,
	Agreements as _Agreements,
	AllowSigningError as _AllowSigningError,
	AllowSigningRequest as _AllowSigningRequest,
	AllowSigningResponse as _AllowSigningResponse,
	AllowSigningResult as _AllowSigningResult,
	AllowSigningStatus as _AllowSigningStatus,
	ApproveError as _ApproveError,
	ArgumentValue as _ArgumentValue,
	BitcoinNetwork as _BitcoinNetwork,
	BtcAddPendingTransactionError as _BtcAddPendingTransactionError,
	BtcAddPendingTransactionRequest as _BtcAddPendingTransactionRequest,
	BtcAddPendingTransactionResult as _BtcAddPendingTransactionResult,
	BtcAddress as _BtcAddress,
	BtcGetFeePercentilesRequest as _BtcGetFeePercentilesRequest,
	BtcGetFeePercentilesResponse as _BtcGetFeePercentilesResponse,
	BtcGetFeePercentilesResult as _BtcGetFeePercentilesResult,
	BtcGetPendingTransactionsReponse as _BtcGetPendingTransactionsReponse,
	BtcGetPendingTransactionsRequest as _BtcGetPendingTransactionsRequest,
	BtcGetPendingTransactionsResult as _BtcGetPendingTransactionsResult,
	BtcSelectUserUtxosFeeResult as _BtcSelectUserUtxosFeeResult,
	CanisterStatusResultV2 as _CanisterStatusResultV2,
	CanisterStatusType as _CanisterStatusType,
	ChallengeCompletion as _ChallengeCompletion,
	ChallengeCompletionError as _ChallengeCompletionError,
	Config as _Config,
	Contact as _Contact,
	ContactAddressData as _ContactAddressData,
	ContactError as _ContactError,
	ContactImage as _ContactImage,
	CreateChallengeError as _CreateChallengeError,
	CreateChallengeResponse as _CreateChallengeResponse,
	CreateContactRequest as _CreateContactRequest,
	CreateContactResult as _CreateContactResult,
	CreatePowChallengeResult as _CreatePowChallengeResult,
	CredentialSpec as _CredentialSpec,
	CredentialType as _CredentialType,
	CustomToken as _CustomToken,
	DappSettings as _DappSettings,
	DefiniteCanisterSettingsArgs as _DefiniteCanisterSettingsArgs,
	DeleteContactResult as _DeleteContactResult,
	ErcToken as _ErcToken,
	EthAddress as _EthAddress,
	ExperimentalFeatureSettings as _ExperimentalFeatureSettings,
	ExperimentalFeatureSettingsFor as _ExperimentalFeatureSettingsFor,
	ExperimentalFeaturesSettings as _ExperimentalFeaturesSettings,
	GetAllowedCyclesError as _GetAllowedCyclesError,
	GetAllowedCyclesResponse as _GetAllowedCyclesResponse,
	GetAllowedCyclesResult as _GetAllowedCyclesResult,
	GetContactResult as _GetContactResult,
	GetContactsResult as _GetContactsResult,
	GetUserProfileError as _GetUserProfileError,
	GetUserProfileResult as _GetUserProfileResult,
	IcrcToken as _IcrcToken,
	Icrcv2AccountId as _Icrcv2AccountId,
	ImageMimeType as _ImageMimeType,
	NetworkSettings as _NetworkSettings,
	NetworkSettingsFor as _NetworkSettingsFor,
	NetworksSettings as _NetworksSettings,
	SaveNetworksSettingsRequest as _SaveNetworksSettingsRequest,
	SelectedUtxosFeeError as _SelectedUtxosFeeError,
	SelectedUtxosFeeRequest as _SelectedUtxosFeeRequest,
	SelectedUtxosFeeResponse as _SelectedUtxosFeeResponse,
	SetShowTestnetsRequest as _SetShowTestnetsRequest,
	SetUserShowTestnetsResult as _SetUserShowTestnetsResult,
	Settings as _Settings,
	SplToken as _SplToken,
	SupportedCredential as _SupportedCredential,
	TestnetsSettings as _TestnetsSettings,
	Token as _Token,
	TokenAccountId as _TokenAccountId,
	TokenSection as _TokenSection,
	TopUpCyclesLedgerError as _TopUpCyclesLedgerError,
	TopUpCyclesLedgerRequest as _TopUpCyclesLedgerRequest,
	TopUpCyclesLedgerResponse as _TopUpCyclesLedgerResponse,
	TopUpCyclesLedgerResult as _TopUpCyclesLedgerResult,
	UpdateAgreementsError as _UpdateAgreementsError,
	UpdateExperimentalFeaturesSettingsRequest as _UpdateExperimentalFeaturesSettingsRequest,
	UpdateUserAgreementsRequest as _UpdateUserAgreementsRequest,
	UserAgreement as _UserAgreement,
	UserAgreements as _UserAgreements,
	UserCredential as _UserCredential,
	UserProfile as _UserProfile,
	UserToken as _UserToken,
	Utxo as _Utxo
} from './declarations/backend.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export interface UserCredential {
	issuer: string;
	verified_date_timestamp?: bigint;
	credential_type: CredentialType;
}
export type BtcAddress =
	| {
			__kind__: 'P2WPKH';
			P2WPKH: string;
	  }
	| {
			__kind__: 'P2PKH';
			P2PKH: string;
	  }
	| {
			__kind__: 'P2WSH';
			P2WSH: string;
	  }
	| {
			__kind__: 'P2SH';
			P2SH: string;
	  }
	| {
			__kind__: 'P2TR';
			P2TR: string;
	  };
export type ArgumentValue =
	| {
			__kind__: 'Int';
			Int: number;
	  }
	| {
			__kind__: 'String';
			String: string;
	  };
export interface DappCarouselSettings {
	hidden_dapp_ids: Array<string>;
}
export type Arg =
	| {
			__kind__: 'Upgrade';
			Upgrade: null;
	  }
	| {
			__kind__: 'Init';
			Init: InitArg;
	  };
export type GetContactsResult =
	| {
			__kind__: 'Ok';
			Ok: Array<Contact>;
	  }
	| {
			__kind__: 'Err';
			Err: ContactError;
	  };
export type BtcSelectUserUtxosFeeResult =
	| {
			__kind__: 'Ok';
			Ok: SelectedUtxosFeeResponse;
	  }
	| {
			__kind__: 'Err';
			Err: SelectedUtxosFeeError;
	  };
export interface SelectedUtxosFeeResponse {
	fee_satoshis: bigint;
	utxos: Array<Utxo>;
}
export interface Stats {
	user_profile_count: bigint;
	custom_token_count: bigint;
	user_timestamps_count: bigint;
	user_token_count: bigint;
}
export interface ContactAddressData {
	label?: string;
	token_account_id: TokenAccountId;
}
export interface IcrcToken {
	ledger_id: Principal;
	index_id?: Principal;
}
export type AllowSigningResult =
	| {
			__kind__: 'Ok';
			Ok: AllowSigningResponse;
	  }
	| {
			__kind__: 'Err';
			Err: AllowSigningError;
	  };
export interface BtcGetFeePercentilesResponse {
	fee_percentiles: BigUint64Array;
}
export interface BtcGetPendingTransactionsReponse {
	transactions: Array<PendingTransaction>;
}
export interface AddHiddenDappIdRequest {
	current_user_version?: bigint;
	dapp_id: string;
}
export interface GetAllowedCyclesResponse {
	allowed_cycles: bigint;
}
export interface SupportedCredential {
	ii_canister_id: Principal;
	issuer_origin: string;
	issuer_canister_id: Principal;
	ii_origin: string;
	credential_type: CredentialType;
}
export interface UpdateUserAgreementsRequest {
	agreements: UserAgreements;
	current_user_version?: bigint;
}
export interface PendingTransaction {
	txid: Uint8Array;
	utxos: Array<Utxo>;
}
export interface SaveNetworksSettingsRequest {
	networks: Array<[NetworkSettingsFor, NetworkSettings]>;
	current_user_version?: bigint;
}
export type Token =
	| {
			__kind__: 'Erc20';
			Erc20: ErcToken;
	  }
	| {
			__kind__: 'Icrc';
			Icrc: IcrcToken;
	  }
	| {
			__kind__: 'Erc721';
			Erc721: ErcToken;
	  }
	| {
			__kind__: 'SplDevnet';
			SplDevnet: SplToken;
	  }
	| {
			__kind__: 'SplMainnet';
			SplMainnet: SplToken;
	  }
	| {
			__kind__: 'Erc1155';
			Erc1155: ErcToken;
	  };
export interface UserAgreement {
	last_accepted_at_ns?: bigint;
	text_sha256?: string;
	accepted?: boolean;
	last_updated_at_ms?: bigint;
}
export interface SetShowTestnetsRequest {
	current_user_version?: bigint;
	show_testnets: boolean;
}
export type CreateContactResult =
	| {
			__kind__: 'Ok';
			Ok: Contact;
	  }
	| {
			__kind__: 'Err';
			Err: ContactError;
	  };
export type GetContactResult =
	| {
			__kind__: 'Ok';
			Ok: Contact;
	  }
	| {
			__kind__: 'Err';
			Err: ContactError;
	  };
export interface Agreements {
	agreements: UserAgreements;
}
export type AddUserCredentialResult =
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: AddUserCredentialError;
	  };
export type BtcAddPendingTransactionResult =
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: BtcAddPendingTransactionError;
	  };
export interface BtcGetPendingTransactionsRequest {
	network: BitcoinNetwork;
	address: string;
}
export interface Outpoint {
	txid: Uint8Array;
	vout: number;
}
export type BtcAddPendingTransactionError = {
	__kind__: 'InternalError';
	InternalError: {
		msg: string;
	};
};
export type TopUpCyclesLedgerResult =
	| {
			__kind__: 'Ok';
			Ok: TopUpCyclesLedgerResponse;
	  }
	| {
			__kind__: 'Err';
			Err: TopUpCyclesLedgerError;
	  };
export interface CanisterStatusResultV2 {
	controller: Principal;
	status: CanisterStatusType;
	freezing_threshold: bigint;
	balance: Array<[Uint8Array, bigint]>;
	memory_size: bigint;
	cycles: bigint;
	settings: DefiniteCanisterSettingsArgs;
	idle_cycles_burned_per_day: bigint;
	module_hash?: Uint8Array;
}
export type ApproveError =
	| {
			__kind__: 'GenericError';
			GenericError: {
				message: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'TemporarilyUnavailable';
			TemporarilyUnavailable: null;
	  }
	| {
			__kind__: 'Duplicate';
			Duplicate: {
				duplicate_of: bigint;
			};
	  }
	| {
			__kind__: 'BadFee';
			BadFee: {
				expected_fee: bigint;
			};
	  }
	| {
			__kind__: 'AllowanceChanged';
			AllowanceChanged: {
				current_allowance: bigint;
			};
	  }
	| {
			__kind__: 'CreatedInFuture';
			CreatedInFuture: {
				ledger_time: bigint;
			};
	  }
	| {
			__kind__: 'TooOld';
			TooOld: null;
	  }
	| {
			__kind__: 'Expired';
			Expired: {
				ledger_time: bigint;
			};
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: {
				balance: bigint;
			};
	  };
export type TopUpCyclesLedgerError =
	| {
			__kind__: 'InvalidArgPercentageOutOfRange';
			InvalidArgPercentageOutOfRange: {
				max: number;
				min: number;
				percentage: number;
			};
	  }
	| {
			__kind__: 'CouldNotGetBalanceFromCyclesLedger';
			CouldNotGetBalanceFromCyclesLedger: null;
	  }
	| {
			__kind__: 'CouldNotTopUpCyclesLedger';
			CouldNotTopUpCyclesLedger: {
				tried_to_send: bigint;
				available: bigint;
			};
	  };
export type CreatePowChallengeResult =
	| {
			__kind__: 'Ok';
			Ok: CreateChallengeResponse;
	  }
	| {
			__kind__: 'Err';
			Err: CreateChallengeError;
	  };
export type EthAddress = {
	__kind__: 'Public';
	Public: string;
};
export interface AddUserCredentialRequest {
	credential_jwt: string;
	issuer_canister_id: Principal;
	current_user_version?: bigint;
	credential_spec: CredentialSpec;
}
export interface InitArg {
	derivation_origin?: string;
	ecdsa_key_name: string;
	cfs_canister_id?: Principal;
	allowed_callers: Array<Principal>;
	supported_credentials?: Array<SupportedCredential>;
	ic_root_key_der?: Uint8Array;
}
export interface UserTokenId {
	chain_id: bigint;
	contract_address: string;
}
export interface NetworksSettings {
	networks: Array<[NetworkSettingsFor, NetworkSettings]>;
	testnets: TestnetsSettings;
}
export type SelectedUtxosFeeError =
	| {
			__kind__: 'PendingTransactions';
			PendingTransactions: null;
	  }
	| {
			__kind__: 'InternalError';
			InternalError: {
				msg: string;
			};
	  };
export interface UserProfile {
	agreements?: Agreements;
	credentials: Array<UserCredential>;
	version?: bigint;
	settings?: Settings;
	created_timestamp: bigint;
	updated_timestamp: bigint;
}
export interface UpdateExperimentalFeaturesSettingsRequest {
	experimental_features: Array<[ExperimentalFeatureSettingsFor, ExperimentalFeatureSettings]>;
	current_user_version?: bigint;
}
export interface CreateChallengeResponse {
	difficulty: number;
	start_timestamp_ms: bigint;
	expiry_timestamp_ms: bigint;
}
export interface DappSettings {
	dapp_carousel: DappCarouselSettings;
}
export type GetAllowedCyclesError =
	| {
			__kind__: 'Other';
			Other: string;
	  }
	| {
			__kind__: 'FailedToContactCyclesLedger';
			FailedToContactCyclesLedger: null;
	  };
export interface NetworkSettings {
	enabled: boolean;
	is_testnet: boolean;
}
export type BtcGetPendingTransactionsResult =
	| {
			__kind__: 'Ok';
			Ok: BtcGetPendingTransactionsReponse;
	  }
	| {
			__kind__: 'Err';
			Err: BtcAddPendingTransactionError;
	  };
export type CreateChallengeError =
	| {
			__kind__: 'ChallengeInProgress';
			ChallengeInProgress: null;
	  }
	| {
			__kind__: 'MissingUserProfile';
			MissingUserProfile: null;
	  }
	| {
			__kind__: 'RandomnessError';
			RandomnessError: string;
	  }
	| {
			__kind__: 'Other';
			Other: string;
	  };
export interface CustomToken {
	token: Token;
	allow_external_content_source?: boolean;
	section?: TokenSection;
	version?: bigint;
	enabled: boolean;
}
export type AllowSigningError =
	| {
			__kind__: 'ApproveError';
			ApproveError: ApproveError;
	  }
	| {
			__kind__: 'PowChallenge';
			PowChallenge: ChallengeCompletionError;
	  }
	| {
			__kind__: 'Other';
			Other: string;
	  }
	| {
			__kind__: 'FailedToContactCyclesLedger';
			FailedToContactCyclesLedger: null;
	  };
export type GetUserProfileResult =
	| {
			__kind__: 'Ok';
			Ok: UserProfile;
	  }
	| {
			__kind__: 'Err';
			Err: GetUserProfileError;
	  };
export interface ExperimentalFeaturesSettings {
	experimental_features: Array<[ExperimentalFeatureSettingsFor, ExperimentalFeatureSettings]>;
}
export interface SplToken {
	decimals?: number;
	token_address: string;
	symbol?: string;
}
export interface BtcAddPendingTransactionRequest {
	txid: Uint8Array;
	network: BitcoinNetwork;
	address: string;
	utxos: Array<Utxo>;
}
export interface DefiniteCanisterSettingsArgs {
	controller: Principal;
	freezing_threshold: bigint;
	controllers: Array<Principal>;
	memory_allocation: bigint;
	compute_allocation: bigint;
}
export type AddUserHiddenDappIdResult =
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: AddDappSettingsError;
	  };
export interface TopUpCyclesLedgerResponse {
	backend_cycles: bigint;
	ledger_balance: bigint;
	topped_up: bigint;
}
export interface BtcGetFeePercentilesRequest {
	network: BitcoinNetwork;
}
export interface ExperimentalFeatureSettings {
	enabled: boolean;
}
export interface CreateContactRequest {
	name: string;
	image?: ContactImage;
}
export interface AllowSigningResponse {
	status: AllowSigningStatus;
	challenge_completion?: ChallengeCompletion;
	allowed_cycles: bigint;
}
export interface ContactImage {
	data: Uint8Array;
	mime_type: ImageMimeType;
}
export interface TestnetsSettings {
	show_testnets: boolean;
}
export type TokenAccountId =
	| {
			__kind__: 'Btc';
			Btc: BtcAddress;
	  }
	| {
			__kind__: 'Eth';
			Eth: EthAddress;
	  }
	| {
			__kind__: 'Sol';
			Sol: string;
	  }
	| {
			__kind__: 'Icrcv2';
			Icrcv2: Icrcv2AccountId;
	  };
export interface UserAgreements {
	license_agreement: UserAgreement;
	privacy_policy: UserAgreement;
	terms_of_use: UserAgreement;
}
export interface Contact {
	id: bigint;
	name: string;
	update_timestamp_ns: bigint;
	addresses: Array<ContactAddressData>;
	image?: ContactImage;
}
export interface AllowSigningRequest {
	nonce: bigint;
}
export interface CredentialSpec {
	arguments?: Array<[string, ArgumentValue]>;
	credential_type: string;
}
export interface Config {
	derivation_origin?: string;
	ecdsa_key_name: string;
	cfs_canister_id?: Principal;
	allowed_callers: Array<Principal>;
	supported_credentials?: Array<SupportedCredential>;
	ic_root_key_raw?: Uint8Array;
}
export type SetUserShowTestnetsResult =
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: UpdateAgreementsError;
	  };
export interface Utxo {
	height: number;
	value: bigint;
	outpoint: Outpoint;
}
export interface SelectedUtxosFeeRequest {
	network: BitcoinNetwork;
	amount_satoshis: bigint;
	min_confirmations?: number;
}
export interface UserToken {
	decimals?: number;
	version?: bigint;
	enabled?: boolean;
	chain_id: bigint;
	contract_address: string;
	symbol?: string;
}
export type DeleteContactResult =
	| {
			__kind__: 'Ok';
			Ok: bigint;
	  }
	| {
			__kind__: 'Err';
			Err: ContactError;
	  };
export interface ChallengeCompletion {
	solved_duration_ms: bigint;
	next_allowance_ms: bigint;
	next_difficulty: number;
	current_difficulty: number;
}
export type GetAllowedCyclesResult =
	| {
			__kind__: 'Ok';
			Ok: GetAllowedCyclesResponse;
	  }
	| {
			__kind__: 'Err';
			Err: GetAllowedCyclesError;
	  };
export interface HasUserProfileResponse {
	has_user_profile: boolean;
}
export interface HttpResponse {
	body: Uint8Array;
	headers: Array<[string, string]>;
	status_code: number;
}
export type Icrcv2AccountId =
	| {
			__kind__: 'Account';
			Account: Uint8Array;
	  }
	| {
			__kind__: 'WithPrincipal';
			WithPrincipal: {
				owner: Principal;
				subaccount?: Uint8Array;
			};
	  };
export interface Settings {
	networks: NetworksSettings;
	dapp: DappSettings;
	experimental_features: ExperimentalFeaturesSettings;
}
export interface TopUpCyclesLedgerRequest {
	threshold?: bigint;
	percentage?: number;
}
export type BtcGetFeePercentilesResult =
	| {
			__kind__: 'Ok';
			Ok: BtcGetFeePercentilesResponse;
	  }
	| {
			__kind__: 'Err';
			Err: SelectedUtxosFeeError;
	  };
export interface ErcToken {
	token_address: string;
	chain_id: bigint;
}
export interface HttpRequest {
	url: string;
	method: string;
	body: Uint8Array;
	headers: Array<[string, string]>;
}
export enum AddDappSettingsError {
	MaxHiddenDappIds = 'MaxHiddenDappIds',
	VersionMismatch = 'VersionMismatch',
	DappIdTooLong = 'DappIdTooLong',
	UserNotFound = 'UserNotFound'
}
export enum AddUserCredentialError {
	InvalidCredential = 'InvalidCredential',
	VersionMismatch = 'VersionMismatch',
	ConfigurationError = 'ConfigurationError',
	UserNotFound = 'UserNotFound'
}
export enum AllowSigningStatus {
	Skipped = 'Skipped',
	Failed = 'Failed',
	Executed = 'Executed'
}
export enum BitcoinNetwork {
	mainnet = 'mainnet',
	regtest = 'regtest',
	testnet = 'testnet'
}
export enum CanisterStatusType {
	stopped = 'stopped',
	stopping = 'stopping',
	running = 'running'
}
export enum ChallengeCompletionError {
	InvalidNonce = 'InvalidNonce',
	MissingChallenge = 'MissingChallenge',
	ExpiredChallenge = 'ExpiredChallenge',
	MissingUserProfile = 'MissingUserProfile',
	ChallengeAlreadySolved = 'ChallengeAlreadySolved'
}
export enum ContactError {
	InvalidContactData = 'InvalidContactData',
	CanisterMemoryNearCapacity = 'CanisterMemoryNearCapacity',
	InvalidImageFormat = 'InvalidImageFormat',
	ContactNotFound = 'ContactNotFound',
	ImageTooLarge = 'ImageTooLarge',
	RandomnessError = 'RandomnessError',
	ImageExceedsMaxSize = 'ImageExceedsMaxSize',
	CanisterStatusError = 'CanisterStatusError',
	TooManyContactsWithImages = 'TooManyContactsWithImages'
}
export enum CredentialType {
	ProofOfUniqueness = 'ProofOfUniqueness'
}
export enum ExperimentalFeatureSettingsFor {
	AiAssistantBeta = 'AiAssistantBeta'
}
export enum GetUserProfileError {
	NotFound = 'NotFound'
}
export enum ImageMimeType {
	'image/gif' = 'image/gif',
	'image/png' = 'image/png',
	'image/jpeg' = 'image/jpeg',
	'image/webp' = 'image/webp'
}
export enum NetworkSettingsFor {
	ArbitrumMainnet = 'ArbitrumMainnet',
	InternetComputer = 'InternetComputer',
	BaseSepolia = 'BaseSepolia',
	PolygonMainnet = 'PolygonMainnet',
	BitcoinRegtest = 'BitcoinRegtest',
	SolanaDevnet = 'SolanaDevnet',
	PolygonAmoy = 'PolygonAmoy',
	EthereumSepolia = 'EthereumSepolia',
	BitcoinTestnet = 'BitcoinTestnet',
	BaseMainnet = 'BaseMainnet',
	BscMainnet = 'BscMainnet',
	SolanaLocal = 'SolanaLocal',
	ArbitrumSepolia = 'ArbitrumSepolia',
	EthereumMainnet = 'EthereumMainnet',
	SolanaMainnet = 'SolanaMainnet',
	BitcoinMainnet = 'BitcoinMainnet',
	BscTestnet = 'BscTestnet'
}
export enum SetTestnetsSettingsError {
	VersionMismatch = 'VersionMismatch',
	UserNotFound = 'UserNotFound'
}
export enum TokenSection {
	Spam = 'Spam',
	Hidden = 'Hidden'
}
export interface backendInterface {
	add_user_credential(arg0: AddUserCredentialRequest): Promise<AddUserCredentialResult>;
	add_user_hidden_dapp_id(arg0: AddHiddenDappIdRequest): Promise<AddUserHiddenDappIdResult>;
	allow_signing(arg0: AllowSigningRequest | null): Promise<AllowSigningResult>;
	btc_add_pending_transaction(
		arg0: BtcAddPendingTransactionRequest
	): Promise<BtcAddPendingTransactionResult>;
	btc_get_current_fee_percentiles(
		arg0: BtcGetFeePercentilesRequest
	): Promise<BtcGetFeePercentilesResult>;
	btc_get_pending_transactions(
		arg0: BtcGetPendingTransactionsRequest
	): Promise<BtcGetPendingTransactionsResult>;
	btc_select_user_utxos_fee(arg0: SelectedUtxosFeeRequest): Promise<BtcSelectUserUtxosFeeResult>;
	config(): Promise<Config>;
	create_contact(arg0: CreateContactRequest): Promise<CreateContactResult>;
	create_pow_challenge(): Promise<CreatePowChallengeResult>;
	create_user_profile(): Promise<UserProfile>;
	delete_contact(arg0: bigint): Promise<DeleteContactResult>;
	get_account_creation_timestamps(): Promise<Array<[Principal, bigint]>>;
	get_allowed_cycles(): Promise<GetAllowedCyclesResult>;
	get_canister_status(): Promise<CanisterStatusResultV2>;
	get_contact(arg0: bigint): Promise<GetContactResult>;
	get_contacts(): Promise<GetContactsResult>;
	get_user_profile(): Promise<GetUserProfileResult>;
	has_user_profile(): Promise<HasUserProfileResponse>;
	http_request(arg0: HttpRequest): Promise<HttpResponse>;
	list_custom_tokens(): Promise<Array<CustomToken>>;
	list_user_tokens(): Promise<Array<UserToken>>;
	remove_custom_token(arg0: CustomToken): Promise<void>;
	remove_user_token(arg0: UserTokenId): Promise<void>;
	set_custom_token(arg0: CustomToken): Promise<void>;
	set_many_custom_tokens(arg0: Array<CustomToken>): Promise<void>;
	set_many_user_tokens(arg0: Array<UserToken>): Promise<void>;
	set_user_show_testnets(arg0: SetShowTestnetsRequest): Promise<SetUserShowTestnetsResult>;
	set_user_token(arg0: UserToken): Promise<void>;
	stats(): Promise<Stats>;
	top_up_cycles_ledger(arg0: TopUpCyclesLedgerRequest | null): Promise<TopUpCyclesLedgerResult>;
	update_contact(arg0: Contact): Promise<GetContactResult>;
	update_user_agreements(arg0: UpdateUserAgreementsRequest): Promise<SetUserShowTestnetsResult>;
	update_user_experimental_feature_settings(
		arg0: UpdateExperimentalFeaturesSettingsRequest
	): Promise<SetUserShowTestnetsResult>;
	update_user_network_settings(
		arg0: SaveNetworksSettingsRequest
	): Promise<SetUserShowTestnetsResult>;
}
export class Backend implements backendInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async add_user_credential(arg0: AddUserCredentialRequest): Promise<AddUserCredentialResult> {
		const result = await this.actor.add_user_credential(
			to_candid_AddUserCredentialRequest_n1(arg0)
		);
		return from_candid_AddUserCredentialResult_n9(result);
	}
	async add_user_hidden_dapp_id(arg0: AddHiddenDappIdRequest): Promise<AddUserHiddenDappIdResult> {
		const result = await this.actor.add_user_hidden_dapp_id(
			to_candid_AddHiddenDappIdRequest_n13(arg0)
		);
		return from_candid_AddUserHiddenDappIdResult_n15(result);
	}
	async allow_signing(arg0: AllowSigningRequest | null): Promise<AllowSigningResult> {
		const result = await this.actor.allow_signing(to_candid_opt_n19(arg0));
		return from_candid_AllowSigningResult_n20(result);
	}
	async btc_add_pending_transaction(
		arg0: BtcAddPendingTransactionRequest
	): Promise<BtcAddPendingTransactionResult> {
		const result = await this.actor.btc_add_pending_transaction(
			to_candid_BtcAddPendingTransactionRequest_n33(arg0)
		);
		return from_candid_BtcAddPendingTransactionResult_n37(result);
	}
	async btc_get_current_fee_percentiles(
		arg0: BtcGetFeePercentilesRequest
	): Promise<BtcGetFeePercentilesResult> {
		const result = await this.actor.btc_get_current_fee_percentiles(
			to_candid_BtcGetFeePercentilesRequest_n41(arg0)
		);
		return from_candid_BtcGetFeePercentilesResult_n43(result);
	}
	async btc_get_pending_transactions(
		arg0: BtcGetPendingTransactionsRequest
	): Promise<BtcGetPendingTransactionsResult> {
		const result = await this.actor.btc_get_pending_transactions(
			to_candid_BtcGetPendingTransactionsRequest_n47(arg0)
		);
		return from_candid_BtcGetPendingTransactionsResult_n49(result);
	}
	async btc_select_user_utxos_fee(
		arg0: SelectedUtxosFeeRequest
	): Promise<BtcSelectUserUtxosFeeResult> {
		const result = await this.actor.btc_select_user_utxos_fee(
			to_candid_SelectedUtxosFeeRequest_n51(arg0)
		);
		return from_candid_BtcSelectUserUtxosFeeResult_n53(result);
	}
	async config(): Promise<Config> {
		const result = await this.actor.config();
		return from_candid_Config_n55(result);
	}
	async create_contact(arg0: CreateContactRequest): Promise<CreateContactResult> {
		const result = await this.actor.create_contact(to_candid_CreateContactRequest_n66(arg0));
		return from_candid_CreateContactResult_n72(result);
	}
	async create_pow_challenge(): Promise<CreatePowChallengeResult> {
		const result = await this.actor.create_pow_challenge();
		return from_candid_CreatePowChallengeResult_n95(result);
	}
	async create_user_profile(): Promise<UserProfile> {
		const result = await this.actor.create_user_profile();
		return from_candid_UserProfile_n99(result);
	}
	async delete_contact(arg0: bigint): Promise<DeleteContactResult> {
		const result = await this.actor.delete_contact(arg0);
		return from_candid_DeleteContactResult_n128(result);
	}
	async get_account_creation_timestamps(): Promise<Array<[Principal, bigint]>> {
		const result = await this.actor.get_account_creation_timestamps();
		return result;
	}
	async get_allowed_cycles(): Promise<GetAllowedCyclesResult> {
		const result = await this.actor.get_allowed_cycles();
		return from_candid_GetAllowedCyclesResult_n130(result);
	}
	async get_canister_status(): Promise<CanisterStatusResultV2> {
		const result = await this.actor.get_canister_status();
		return from_candid_CanisterStatusResultV2_n134(result);
	}
	async get_contact(arg0: bigint): Promise<GetContactResult> {
		const result = await this.actor.get_contact(arg0);
		return from_candid_GetContactResult_n138(result);
	}
	async get_contacts(): Promise<GetContactsResult> {
		const result = await this.actor.get_contacts();
		return from_candid_GetContactsResult_n139(result);
	}
	async get_user_profile(): Promise<GetUserProfileResult> {
		const result = await this.actor.get_user_profile();
		return from_candid_GetUserProfileResult_n142(result);
	}
	async has_user_profile(): Promise<HasUserProfileResponse> {
		const result = await this.actor.has_user_profile();
		return result;
	}
	async http_request(arg0: HttpRequest): Promise<HttpResponse> {
		const result = await this.actor.http_request(arg0);
		return result;
	}
	async list_custom_tokens(): Promise<Array<CustomToken>> {
		const result = await this.actor.list_custom_tokens();
		return from_candid_vec_n146(result);
	}
	async list_user_tokens(): Promise<Array<UserToken>> {
		const result = await this.actor.list_user_tokens();
		return from_candid_vec_n159(result);
	}
	async remove_custom_token(arg0: CustomToken): Promise<void> {
		const result = await this.actor.remove_custom_token(to_candid_CustomToken_n162(arg0));
		return result;
	}
	async remove_user_token(arg0: UserTokenId): Promise<void> {
		const result = await this.actor.remove_user_token(arg0);
		return result;
	}
	async set_custom_token(arg0: CustomToken): Promise<void> {
		const result = await this.actor.set_custom_token(to_candid_CustomToken_n162(arg0));
		return result;
	}
	async set_many_custom_tokens(arg0: Array<CustomToken>): Promise<void> {
		const result = await this.actor.set_many_custom_tokens(to_candid_vec_n172(arg0));
		return result;
	}
	async set_many_user_tokens(arg0: Array<UserToken>): Promise<void> {
		const result = await this.actor.set_many_user_tokens(to_candid_vec_n173(arg0));
		return result;
	}
	async set_user_show_testnets(arg0: SetShowTestnetsRequest): Promise<SetUserShowTestnetsResult> {
		const result = await this.actor.set_user_show_testnets(
			to_candid_SetShowTestnetsRequest_n176(arg0)
		);
		return from_candid_SetUserShowTestnetsResult_n178(result);
	}
	async set_user_token(arg0: UserToken): Promise<void> {
		const result = await this.actor.set_user_token(to_candid_UserToken_n174(arg0));
		return result;
	}
	async stats(): Promise<Stats> {
		const result = await this.actor.stats();
		return result;
	}
	async top_up_cycles_ledger(
		arg0: TopUpCyclesLedgerRequest | null
	): Promise<TopUpCyclesLedgerResult> {
		const result = await this.actor.top_up_cycles_ledger(to_candid_opt_n182(arg0));
		return from_candid_TopUpCyclesLedgerResult_n185(result);
	}
	async update_contact(arg0: Contact): Promise<GetContactResult> {
		const result = await this.actor.update_contact(to_candid_Contact_n189(arg0));
		return from_candid_GetContactResult_n138(result);
	}
	async update_user_agreements(
		arg0: UpdateUserAgreementsRequest
	): Promise<SetUserShowTestnetsResult> {
		const result = await this.actor.update_user_agreements(
			to_candid_UpdateUserAgreementsRequest_n203(arg0)
		);
		return from_candid_SetUserShowTestnetsResult_n178(result);
	}
	async update_user_experimental_feature_settings(
		arg0: UpdateExperimentalFeaturesSettingsRequest
	): Promise<SetUserShowTestnetsResult> {
		const result = await this.actor.update_user_experimental_feature_settings(
			to_candid_UpdateExperimentalFeaturesSettingsRequest_n209(arg0)
		);
		return from_candid_SetUserShowTestnetsResult_n178(result);
	}
	async update_user_network_settings(
		arg0: SaveNetworksSettingsRequest
	): Promise<SetUserShowTestnetsResult> {
		const result = await this.actor.update_user_network_settings(
			to_candid_SaveNetworksSettingsRequest_n215(arg0)
		);
		return from_candid_SetUserShowTestnetsResult_n178(result);
	}
}
function from_candid_AddDappSettingsError_n17(value: _AddDappSettingsError): AddDappSettingsError {
	return from_candid_variant_n18(value);
}
function from_candid_AddUserCredentialError_n11(
	value: _AddUserCredentialError
): AddUserCredentialError {
	return from_candid_variant_n12(value);
}
function from_candid_AddUserCredentialResult_n9(
	value: _AddUserCredentialResult
): AddUserCredentialResult {
	return from_candid_variant_n10(value);
}
function from_candid_AddUserHiddenDappIdResult_n15(
	value: _AddUserHiddenDappIdResult
): AddUserHiddenDappIdResult {
	return from_candid_variant_n16(value);
}
function from_candid_Agreements_n102(value: _Agreements): Agreements {
	return from_candid_record_n103(value);
}
function from_candid_AllowSigningError_n27(value: _AllowSigningError): AllowSigningError {
	return from_candid_variant_n28(value);
}
function from_candid_AllowSigningResponse_n22(value: _AllowSigningResponse): AllowSigningResponse {
	return from_candid_record_n23(value);
}
function from_candid_AllowSigningResult_n20(value: _AllowSigningResult): AllowSigningResult {
	return from_candid_variant_n21(value);
}
function from_candid_AllowSigningStatus_n24(value: _AllowSigningStatus): AllowSigningStatus {
	return from_candid_variant_n25(value);
}
function from_candid_ApproveError_n29(value: _ApproveError): ApproveError {
	return from_candid_variant_n30(value);
}
function from_candid_BtcAddPendingTransactionError_n39(
	value: _BtcAddPendingTransactionError
): BtcAddPendingTransactionError {
	return from_candid_variant_n40(value);
}
function from_candid_BtcAddPendingTransactionResult_n37(
	value: _BtcAddPendingTransactionResult
): BtcAddPendingTransactionResult {
	return from_candid_variant_n38(value);
}
function from_candid_BtcAddress_n81(value: _BtcAddress): BtcAddress {
	return from_candid_variant_n82(value);
}
function from_candid_BtcGetFeePercentilesResult_n43(
	value: _BtcGetFeePercentilesResult
): BtcGetFeePercentilesResult {
	return from_candid_variant_n44(value);
}
function from_candid_BtcGetPendingTransactionsResult_n49(
	value: _BtcGetPendingTransactionsResult
): BtcGetPendingTransactionsResult {
	return from_candid_variant_n50(value);
}
function from_candid_BtcSelectUserUtxosFeeResult_n53(
	value: _BtcSelectUserUtxosFeeResult
): BtcSelectUserUtxosFeeResult {
	return from_candid_variant_n54(value);
}
function from_candid_CanisterStatusResultV2_n134(
	value: _CanisterStatusResultV2
): CanisterStatusResultV2 {
	return from_candid_record_n135(value);
}
function from_candid_CanisterStatusType_n136(value: _CanisterStatusType): CanisterStatusType {
	return from_candid_variant_n137(value);
}
function from_candid_ChallengeCompletionError_n31(
	value: _ChallengeCompletionError
): ChallengeCompletionError {
	return from_candid_variant_n32(value);
}
function from_candid_Config_n55(value: _Config): Config {
	return from_candid_record_n56(value);
}
function from_candid_ContactAddressData_n77(value: _ContactAddressData): ContactAddressData {
	return from_candid_record_n78(value);
}
function from_candid_ContactError_n93(value: _ContactError): ContactError {
	return from_candid_variant_n94(value);
}
function from_candid_ContactImage_n89(value: _ContactImage): ContactImage {
	return from_candid_record_n90(value);
}
function from_candid_Contact_n74(value: _Contact): Contact {
	return from_candid_record_n75(value);
}
function from_candid_CreateChallengeError_n97(value: _CreateChallengeError): CreateChallengeError {
	return from_candid_variant_n98(value);
}
function from_candid_CreateContactResult_n72(value: _CreateContactResult): CreateContactResult {
	return from_candid_variant_n73(value);
}
function from_candid_CreatePowChallengeResult_n95(
	value: _CreatePowChallengeResult
): CreatePowChallengeResult {
	return from_candid_variant_n96(value);
}
function from_candid_CredentialType_n63(value: _CredentialType): CredentialType {
	return from_candid_variant_n64(value);
}
function from_candid_CustomToken_n147(value: _CustomToken): CustomToken {
	return from_candid_record_n148(value);
}
function from_candid_DeleteContactResult_n128(value: _DeleteContactResult): DeleteContactResult {
	return from_candid_variant_n129(value);
}
function from_candid_EthAddress_n83(value: _EthAddress): EthAddress {
	return from_candid_variant_n84(value);
}
function from_candid_ExperimentalFeatureSettingsFor_n126(
	value: _ExperimentalFeatureSettingsFor
): ExperimentalFeatureSettingsFor {
	return from_candid_variant_n127(value);
}
function from_candid_ExperimentalFeaturesSettings_n122(
	value: _ExperimentalFeaturesSettings
): ExperimentalFeaturesSettings {
	return from_candid_record_n123(value);
}
function from_candid_GetAllowedCyclesError_n132(
	value: _GetAllowedCyclesError
): GetAllowedCyclesError {
	return from_candid_variant_n133(value);
}
function from_candid_GetAllowedCyclesResult_n130(
	value: _GetAllowedCyclesResult
): GetAllowedCyclesResult {
	return from_candid_variant_n131(value);
}
function from_candid_GetContactResult_n138(value: _GetContactResult): GetContactResult {
	return from_candid_variant_n73(value);
}
function from_candid_GetContactsResult_n139(value: _GetContactsResult): GetContactsResult {
	return from_candid_variant_n140(value);
}
function from_candid_GetUserProfileError_n144(value: _GetUserProfileError): GetUserProfileError {
	return from_candid_variant_n145(value);
}
function from_candid_GetUserProfileResult_n142(value: _GetUserProfileResult): GetUserProfileResult {
	return from_candid_variant_n143(value);
}
function from_candid_IcrcToken_n151(value: _IcrcToken): IcrcToken {
	return from_candid_record_n152(value);
}
function from_candid_Icrcv2AccountId_n85(value: _Icrcv2AccountId): Icrcv2AccountId {
	return from_candid_variant_n86(value);
}
function from_candid_ImageMimeType_n91(value: _ImageMimeType): ImageMimeType {
	return from_candid_variant_n92(value);
}
function from_candid_NetworkSettingsFor_n120(value: _NetworkSettingsFor): NetworkSettingsFor {
	return from_candid_variant_n121(value);
}
function from_candid_NetworksSettings_n116(value: _NetworksSettings): NetworksSettings {
	return from_candid_record_n117(value);
}
function from_candid_SelectedUtxosFeeError_n45(
	value: _SelectedUtxosFeeError
): SelectedUtxosFeeError {
	return from_candid_variant_n46(value);
}
function from_candid_SetUserShowTestnetsResult_n178(
	value: _SetUserShowTestnetsResult
): SetUserShowTestnetsResult {
	return from_candid_variant_n179(value);
}
function from_candid_Settings_n114(value: _Settings): Settings {
	return from_candid_record_n115(value);
}
function from_candid_SplToken_n153(value: _SplToken): SplToken {
	return from_candid_record_n154(value);
}
function from_candid_SupportedCredential_n61(value: _SupportedCredential): SupportedCredential {
	return from_candid_record_n62(value);
}
function from_candid_TokenAccountId_n79(value: _TokenAccountId): TokenAccountId {
	return from_candid_variant_n80(value);
}
function from_candid_TokenSection_n157(value: _TokenSection): TokenSection {
	return from_candid_variant_n158(value);
}
function from_candid_Token_n149(value: _Token): Token {
	return from_candid_variant_n150(value);
}
function from_candid_TopUpCyclesLedgerError_n187(
	value: _TopUpCyclesLedgerError
): TopUpCyclesLedgerError {
	return from_candid_variant_n188(value);
}
function from_candid_TopUpCyclesLedgerResult_n185(
	value: _TopUpCyclesLedgerResult
): TopUpCyclesLedgerResult {
	return from_candid_variant_n186(value);
}
function from_candid_UpdateAgreementsError_n180(
	value: _UpdateAgreementsError
): UpdateAgreementsError {
	return from_candid_variant_n181(value);
}
function from_candid_UserAgreement_n106(value: _UserAgreement): UserAgreement {
	return from_candid_record_n107(value);
}
function from_candid_UserAgreements_n104(value: _UserAgreements): UserAgreements {
	return from_candid_record_n105(value);
}
function from_candid_UserCredential_n111(value: _UserCredential): UserCredential {
	return from_candid_record_n112(value);
}
function from_candid_UserProfile_n99(value: _UserProfile): UserProfile {
	return from_candid_record_n100(value);
}
function from_candid_UserToken_n160(value: _UserToken): UserToken {
	return from_candid_record_n161(value);
}
function from_candid_opt_n101(value: [] | [_Agreements]): Agreements | null {
	return value.length === 0 ? null : from_candid_Agreements_n102(value[0]);
}
function from_candid_opt_n108(value: [] | [bigint]): bigint | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n109(value: [] | [boolean]): boolean | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n113(value: [] | [_Settings]): Settings | null {
	return value.length === 0 ? null : from_candid_Settings_n114(value[0]);
}
function from_candid_opt_n155(value: [] | [number]): number | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n156(value: [] | [_TokenSection]): TokenSection | null {
	return value.length === 0 ? null : from_candid_TokenSection_n157(value[0]);
}
function from_candid_opt_n26(value: [] | [_ChallengeCompletion]): ChallengeCompletion | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n57(value: [] | [string]): string | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n58(value: [] | [Principal]): Principal | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n59(
	value: [] | [Array<_SupportedCredential>]
): Array<SupportedCredential> | null {
	return value.length === 0 ? null : from_candid_vec_n60(value[0]);
}
function from_candid_opt_n65(value: [] | [Uint8Array]): Uint8Array | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n88(value: [] | [_ContactImage]): ContactImage | null {
	return value.length === 0 ? null : from_candid_ContactImage_n89(value[0]);
}
function from_candid_record_n100(value: {
	agreements: [] | [_Agreements];
	credentials: Array<_UserCredential>;
	version: [] | [bigint];
	settings: [] | [_Settings];
	created_timestamp: bigint;
	updated_timestamp: bigint;
}): {
	agreements?: Agreements;
	credentials: Array<UserCredential>;
	version?: bigint;
	settings?: Settings;
	created_timestamp: bigint;
	updated_timestamp: bigint;
} {
	return {
		agreements: record_opt_to_undefined(from_candid_opt_n101(value.agreements)),
		credentials: from_candid_vec_n110(value.credentials),
		version: record_opt_to_undefined(from_candid_opt_n108(value.version)),
		settings: record_opt_to_undefined(from_candid_opt_n113(value.settings)),
		created_timestamp: value.created_timestamp,
		updated_timestamp: value.updated_timestamp
	};
}
function from_candid_record_n103(value: { agreements: _UserAgreements }): {
	agreements: UserAgreements;
} {
	return {
		agreements: from_candid_UserAgreements_n104(value.agreements)
	};
}
function from_candid_record_n105(value: {
	license_agreement: _UserAgreement;
	privacy_policy: _UserAgreement;
	terms_of_use: _UserAgreement;
}): {
	license_agreement: UserAgreement;
	privacy_policy: UserAgreement;
	terms_of_use: UserAgreement;
} {
	return {
		license_agreement: from_candid_UserAgreement_n106(value.license_agreement),
		privacy_policy: from_candid_UserAgreement_n106(value.privacy_policy),
		terms_of_use: from_candid_UserAgreement_n106(value.terms_of_use)
	};
}
function from_candid_record_n107(value: {
	last_accepted_at_ns: [] | [bigint];
	text_sha256: [] | [string];
	accepted: [] | [boolean];
	last_updated_at_ms: [] | [bigint];
}): {
	last_accepted_at_ns?: bigint;
	text_sha256?: string;
	accepted?: boolean;
	last_updated_at_ms?: bigint;
} {
	return {
		last_accepted_at_ns: record_opt_to_undefined(from_candid_opt_n108(value.last_accepted_at_ns)),
		text_sha256: record_opt_to_undefined(from_candid_opt_n57(value.text_sha256)),
		accepted: record_opt_to_undefined(from_candid_opt_n109(value.accepted)),
		last_updated_at_ms: record_opt_to_undefined(from_candid_opt_n108(value.last_updated_at_ms))
	};
}
function from_candid_record_n112(value: {
	issuer: string;
	verified_date_timestamp: [] | [bigint];
	credential_type: _CredentialType;
}): {
	issuer: string;
	verified_date_timestamp?: bigint;
	credential_type: CredentialType;
} {
	return {
		issuer: value.issuer,
		verified_date_timestamp: record_opt_to_undefined(
			from_candid_opt_n108(value.verified_date_timestamp)
		),
		credential_type: from_candid_CredentialType_n63(value.credential_type)
	};
}
function from_candid_record_n115(value: {
	networks: _NetworksSettings;
	dapp: _DappSettings;
	experimental_features: _ExperimentalFeaturesSettings;
}): {
	networks: NetworksSettings;
	dapp: DappSettings;
	experimental_features: ExperimentalFeaturesSettings;
} {
	return {
		networks: from_candid_NetworksSettings_n116(value.networks),
		dapp: value.dapp,
		experimental_features: from_candid_ExperimentalFeaturesSettings_n122(
			value.experimental_features
		)
	};
}
function from_candid_record_n117(value: {
	networks: Array<[_NetworkSettingsFor, _NetworkSettings]>;
	testnets: _TestnetsSettings;
}): {
	networks: Array<[NetworkSettingsFor, NetworkSettings]>;
	testnets: TestnetsSettings;
} {
	return {
		networks: from_candid_vec_n118(value.networks),
		testnets: value.testnets
	};
}
function from_candid_record_n123(value: {
	experimental_features: Array<[_ExperimentalFeatureSettingsFor, _ExperimentalFeatureSettings]>;
}): {
	experimental_features: Array<[ExperimentalFeatureSettingsFor, ExperimentalFeatureSettings]>;
} {
	return {
		experimental_features: from_candid_vec_n124(value.experimental_features)
	};
}
function from_candid_record_n135(value: {
	controller: Principal;
	status: _CanisterStatusType;
	freezing_threshold: bigint;
	balance: Array<[Uint8Array, bigint]>;
	memory_size: bigint;
	cycles: bigint;
	settings: _DefiniteCanisterSettingsArgs;
	idle_cycles_burned_per_day: bigint;
	module_hash: [] | [Uint8Array];
}): {
	controller: Principal;
	status: CanisterStatusType;
	freezing_threshold: bigint;
	balance: Array<[Uint8Array, bigint]>;
	memory_size: bigint;
	cycles: bigint;
	settings: DefiniteCanisterSettingsArgs;
	idle_cycles_burned_per_day: bigint;
	module_hash?: Uint8Array;
} {
	return {
		controller: value.controller,
		status: from_candid_CanisterStatusType_n136(value.status),
		freezing_threshold: value.freezing_threshold,
		balance: value.balance,
		memory_size: value.memory_size,
		cycles: value.cycles,
		settings: value.settings,
		idle_cycles_burned_per_day: value.idle_cycles_burned_per_day,
		module_hash: record_opt_to_undefined(from_candid_opt_n65(value.module_hash))
	};
}
function from_candid_record_n148(value: {
	token: _Token;
	allow_external_content_source: [] | [boolean];
	section: [] | [_TokenSection];
	version: [] | [bigint];
	enabled: boolean;
}): {
	token: Token;
	allow_external_content_source?: boolean;
	section?: TokenSection;
	version?: bigint;
	enabled: boolean;
} {
	return {
		token: from_candid_Token_n149(value.token),
		allow_external_content_source: record_opt_to_undefined(
			from_candid_opt_n109(value.allow_external_content_source)
		),
		section: record_opt_to_undefined(from_candid_opt_n156(value.section)),
		version: record_opt_to_undefined(from_candid_opt_n108(value.version)),
		enabled: value.enabled
	};
}
function from_candid_record_n152(value: { ledger_id: Principal; index_id: [] | [Principal] }): {
	ledger_id: Principal;
	index_id?: Principal;
} {
	return {
		ledger_id: value.ledger_id,
		index_id: record_opt_to_undefined(from_candid_opt_n58(value.index_id))
	};
}
function from_candid_record_n154(value: {
	decimals: [] | [number];
	token_address: string;
	symbol: [] | [string];
}): {
	decimals?: number;
	token_address: string;
	symbol?: string;
} {
	return {
		decimals: record_opt_to_undefined(from_candid_opt_n155(value.decimals)),
		token_address: value.token_address,
		symbol: record_opt_to_undefined(from_candid_opt_n57(value.symbol))
	};
}
function from_candid_record_n161(value: {
	decimals: [] | [number];
	version: [] | [bigint];
	enabled: [] | [boolean];
	chain_id: bigint;
	contract_address: string;
	symbol: [] | [string];
}): {
	decimals?: number;
	version?: bigint;
	enabled?: boolean;
	chain_id: bigint;
	contract_address: string;
	symbol?: string;
} {
	return {
		decimals: record_opt_to_undefined(from_candid_opt_n155(value.decimals)),
		version: record_opt_to_undefined(from_candid_opt_n108(value.version)),
		enabled: record_opt_to_undefined(from_candid_opt_n109(value.enabled)),
		chain_id: value.chain_id,
		contract_address: value.contract_address,
		symbol: record_opt_to_undefined(from_candid_opt_n57(value.symbol))
	};
}
function from_candid_record_n23(value: {
	status: _AllowSigningStatus;
	challenge_completion: [] | [_ChallengeCompletion];
	allowed_cycles: bigint;
}): {
	status: AllowSigningStatus;
	challenge_completion?: ChallengeCompletion;
	allowed_cycles: bigint;
} {
	return {
		status: from_candid_AllowSigningStatus_n24(value.status),
		challenge_completion: record_opt_to_undefined(from_candid_opt_n26(value.challenge_completion)),
		allowed_cycles: value.allowed_cycles
	};
}
function from_candid_record_n56(value: {
	derivation_origin: [] | [string];
	ecdsa_key_name: string;
	cfs_canister_id: [] | [Principal];
	allowed_callers: Array<Principal>;
	supported_credentials: [] | [Array<_SupportedCredential>];
	ic_root_key_raw: [] | [Uint8Array];
}): {
	derivation_origin?: string;
	ecdsa_key_name: string;
	cfs_canister_id?: Principal;
	allowed_callers: Array<Principal>;
	supported_credentials?: Array<SupportedCredential>;
	ic_root_key_raw?: Uint8Array;
} {
	return {
		derivation_origin: record_opt_to_undefined(from_candid_opt_n57(value.derivation_origin)),
		ecdsa_key_name: value.ecdsa_key_name,
		cfs_canister_id: record_opt_to_undefined(from_candid_opt_n58(value.cfs_canister_id)),
		allowed_callers: value.allowed_callers,
		supported_credentials: record_opt_to_undefined(
			from_candid_opt_n59(value.supported_credentials)
		),
		ic_root_key_raw: record_opt_to_undefined(from_candid_opt_n65(value.ic_root_key_raw))
	};
}
function from_candid_record_n62(value: {
	ii_canister_id: Principal;
	issuer_origin: string;
	issuer_canister_id: Principal;
	ii_origin: string;
	credential_type: _CredentialType;
}): {
	ii_canister_id: Principal;
	issuer_origin: string;
	issuer_canister_id: Principal;
	ii_origin: string;
	credential_type: CredentialType;
} {
	return {
		ii_canister_id: value.ii_canister_id,
		issuer_origin: value.issuer_origin,
		issuer_canister_id: value.issuer_canister_id,
		ii_origin: value.ii_origin,
		credential_type: from_candid_CredentialType_n63(value.credential_type)
	};
}
function from_candid_record_n75(value: {
	id: bigint;
	name: string;
	update_timestamp_ns: bigint;
	addresses: Array<_ContactAddressData>;
	image: [] | [_ContactImage];
}): {
	id: bigint;
	name: string;
	update_timestamp_ns: bigint;
	addresses: Array<ContactAddressData>;
	image?: ContactImage;
} {
	return {
		id: value.id,
		name: value.name,
		update_timestamp_ns: value.update_timestamp_ns,
		addresses: from_candid_vec_n76(value.addresses),
		image: record_opt_to_undefined(from_candid_opt_n88(value.image))
	};
}
function from_candid_record_n78(value: {
	label: [] | [string];
	token_account_id: _TokenAccountId;
}): {
	label?: string;
	token_account_id: TokenAccountId;
} {
	return {
		label: record_opt_to_undefined(from_candid_opt_n57(value.label)),
		token_account_id: from_candid_TokenAccountId_n79(value.token_account_id)
	};
}
function from_candid_record_n87(value: { owner: Principal; subaccount: [] | [Uint8Array] }): {
	owner: Principal;
	subaccount?: Uint8Array;
} {
	return {
		owner: value.owner,
		subaccount: record_opt_to_undefined(from_candid_opt_n65(value.subaccount))
	};
}
function from_candid_record_n90(value: { data: Uint8Array; mime_type: _ImageMimeType }): {
	data: Uint8Array;
	mime_type: ImageMimeType;
} {
	return {
		data: value.data,
		mime_type: from_candid_ImageMimeType_n91(value.mime_type)
	};
}
function from_candid_tuple_n119(
	value: [_NetworkSettingsFor, _NetworkSettings]
): [NetworkSettingsFor, NetworkSettings] {
	return [from_candid_NetworkSettingsFor_n120(value[0]), value[1]];
}
function from_candid_tuple_n125(
	value: [_ExperimentalFeatureSettingsFor, _ExperimentalFeatureSettings]
): [ExperimentalFeatureSettingsFor, ExperimentalFeatureSettings] {
	return [from_candid_ExperimentalFeatureSettingsFor_n126(value[0]), value[1]];
}
function from_candid_variant_n10(
	value:
		| {
				Ok: null;
		  }
		| {
				Err: _AddUserCredentialError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: AddUserCredentialError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_AddUserCredentialError_n11(value.Err)
				}
			: value;
}
function from_candid_variant_n12(
	value:
		| {
				InvalidCredential: null;
		  }
		| {
				VersionMismatch: null;
		  }
		| {
				ConfigurationError: null;
		  }
		| {
				UserNotFound: null;
		  }
): AddUserCredentialError {
	return 'InvalidCredential' in value
		? AddUserCredentialError.InvalidCredential
		: 'VersionMismatch' in value
			? AddUserCredentialError.VersionMismatch
			: 'ConfigurationError' in value
				? AddUserCredentialError.ConfigurationError
				: 'UserNotFound' in value
					? AddUserCredentialError.UserNotFound
					: value;
}
function from_candid_variant_n121(
	value:
		| {
				ArbitrumMainnet: null;
		  }
		| {
				InternetComputer: null;
		  }
		| {
				BaseSepolia: null;
		  }
		| {
				PolygonMainnet: null;
		  }
		| {
				BitcoinRegtest: null;
		  }
		| {
				SolanaDevnet: null;
		  }
		| {
				PolygonAmoy: null;
		  }
		| {
				EthereumSepolia: null;
		  }
		| {
				BitcoinTestnet: null;
		  }
		| {
				BaseMainnet: null;
		  }
		| {
				BscMainnet: null;
		  }
		| {
				SolanaLocal: null;
		  }
		| {
				ArbitrumSepolia: null;
		  }
		| {
				EthereumMainnet: null;
		  }
		| {
				SolanaMainnet: null;
		  }
		| {
				BitcoinMainnet: null;
		  }
		| {
				BscTestnet: null;
		  }
): NetworkSettingsFor {
	return 'ArbitrumMainnet' in value
		? NetworkSettingsFor.ArbitrumMainnet
		: 'InternetComputer' in value
			? NetworkSettingsFor.InternetComputer
			: 'BaseSepolia' in value
				? NetworkSettingsFor.BaseSepolia
				: 'PolygonMainnet' in value
					? NetworkSettingsFor.PolygonMainnet
					: 'BitcoinRegtest' in value
						? NetworkSettingsFor.BitcoinRegtest
						: 'SolanaDevnet' in value
							? NetworkSettingsFor.SolanaDevnet
							: 'PolygonAmoy' in value
								? NetworkSettingsFor.PolygonAmoy
								: 'EthereumSepolia' in value
									? NetworkSettingsFor.EthereumSepolia
									: 'BitcoinTestnet' in value
										? NetworkSettingsFor.BitcoinTestnet
										: 'BaseMainnet' in value
											? NetworkSettingsFor.BaseMainnet
											: 'BscMainnet' in value
												? NetworkSettingsFor.BscMainnet
												: 'SolanaLocal' in value
													? NetworkSettingsFor.SolanaLocal
													: 'ArbitrumSepolia' in value
														? NetworkSettingsFor.ArbitrumSepolia
														: 'EthereumMainnet' in value
															? NetworkSettingsFor.EthereumMainnet
															: 'SolanaMainnet' in value
																? NetworkSettingsFor.SolanaMainnet
																: 'BitcoinMainnet' in value
																	? NetworkSettingsFor.BitcoinMainnet
																	: 'BscTestnet' in value
																		? NetworkSettingsFor.BscTestnet
																		: value;
}
function from_candid_variant_n127(value: {
	AiAssistantBeta: null;
}): ExperimentalFeatureSettingsFor {
	return 'AiAssistantBeta' in value ? ExperimentalFeatureSettingsFor.AiAssistantBeta : value;
}
function from_candid_variant_n129(
	value:
		| {
				Ok: bigint;
		  }
		| {
				Err: _ContactError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: bigint;
	  }
	| {
			__kind__: 'Err';
			Err: ContactError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_ContactError_n93(value.Err)
				}
			: value;
}
function from_candid_variant_n131(
	value:
		| {
				Ok: _GetAllowedCyclesResponse;
		  }
		| {
				Err: _GetAllowedCyclesError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: GetAllowedCyclesResponse;
	  }
	| {
			__kind__: 'Err';
			Err: GetAllowedCyclesError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_GetAllowedCyclesError_n132(value.Err)
				}
			: value;
}
function from_candid_variant_n133(
	value:
		| {
				Other: string;
		  }
		| {
				FailedToContactCyclesLedger: null;
		  }
):
	| {
			__kind__: 'Other';
			Other: string;
	  }
	| {
			__kind__: 'FailedToContactCyclesLedger';
			FailedToContactCyclesLedger: null;
	  } {
	return 'Other' in value
		? {
				__kind__: 'Other',
				Other: value.Other
			}
		: 'FailedToContactCyclesLedger' in value
			? {
					__kind__: 'FailedToContactCyclesLedger',
					FailedToContactCyclesLedger: value.FailedToContactCyclesLedger
				}
			: value;
}
function from_candid_variant_n137(
	value:
		| {
				stopped: null;
		  }
		| {
				stopping: null;
		  }
		| {
				running: null;
		  }
): CanisterStatusType {
	return 'stopped' in value
		? CanisterStatusType.stopped
		: 'stopping' in value
			? CanisterStatusType.stopping
			: 'running' in value
				? CanisterStatusType.running
				: value;
}
function from_candid_variant_n140(
	value:
		| {
				Ok: Array<_Contact>;
		  }
		| {
				Err: _ContactError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Array<Contact>;
	  }
	| {
			__kind__: 'Err';
			Err: ContactError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_vec_n141(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_ContactError_n93(value.Err)
				}
			: value;
}
function from_candid_variant_n143(
	value:
		| {
				Ok: _UserProfile;
		  }
		| {
				Err: _GetUserProfileError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: UserProfile;
	  }
	| {
			__kind__: 'Err';
			Err: GetUserProfileError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_UserProfile_n99(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_GetUserProfileError_n144(value.Err)
				}
			: value;
}
function from_candid_variant_n145(value: { NotFound: null }): GetUserProfileError {
	return 'NotFound' in value ? GetUserProfileError.NotFound : value;
}
function from_candid_variant_n150(
	value:
		| {
				Erc20: _ErcToken;
		  }
		| {
				Icrc: _IcrcToken;
		  }
		| {
				Erc721: _ErcToken;
		  }
		| {
				SplDevnet: _SplToken;
		  }
		| {
				SplMainnet: _SplToken;
		  }
		| {
				Erc1155: _ErcToken;
		  }
):
	| {
			__kind__: 'Erc20';
			Erc20: ErcToken;
	  }
	| {
			__kind__: 'Icrc';
			Icrc: IcrcToken;
	  }
	| {
			__kind__: 'Erc721';
			Erc721: ErcToken;
	  }
	| {
			__kind__: 'SplDevnet';
			SplDevnet: SplToken;
	  }
	| {
			__kind__: 'SplMainnet';
			SplMainnet: SplToken;
	  }
	| {
			__kind__: 'Erc1155';
			Erc1155: ErcToken;
	  } {
	return 'Erc20' in value
		? {
				__kind__: 'Erc20',
				Erc20: value.Erc20
			}
		: 'Icrc' in value
			? {
					__kind__: 'Icrc',
					Icrc: from_candid_IcrcToken_n151(value.Icrc)
				}
			: 'Erc721' in value
				? {
						__kind__: 'Erc721',
						Erc721: value.Erc721
					}
				: 'SplDevnet' in value
					? {
							__kind__: 'SplDevnet',
							SplDevnet: from_candid_SplToken_n153(value.SplDevnet)
						}
					: 'SplMainnet' in value
						? {
								__kind__: 'SplMainnet',
								SplMainnet: from_candid_SplToken_n153(value.SplMainnet)
							}
						: 'Erc1155' in value
							? {
									__kind__: 'Erc1155',
									Erc1155: value.Erc1155
								}
							: value;
}
function from_candid_variant_n158(
	value:
		| {
				Spam: null;
		  }
		| {
				Hidden: null;
		  }
): TokenSection {
	return 'Spam' in value ? TokenSection.Spam : 'Hidden' in value ? TokenSection.Hidden : value;
}
function from_candid_variant_n16(
	value:
		| {
				Ok: null;
		  }
		| {
				Err: _AddDappSettingsError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: AddDappSettingsError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_AddDappSettingsError_n17(value.Err)
				}
			: value;
}
function from_candid_variant_n179(
	value:
		| {
				Ok: null;
		  }
		| {
				Err: _UpdateAgreementsError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: UpdateAgreementsError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_UpdateAgreementsError_n180(value.Err)
				}
			: value;
}
function from_candid_variant_n18(
	value:
		| {
				MaxHiddenDappIds: null;
		  }
		| {
				VersionMismatch: null;
		  }
		| {
				DappIdTooLong: null;
		  }
		| {
				UserNotFound: null;
		  }
): AddDappSettingsError {
	return 'MaxHiddenDappIds' in value
		? AddDappSettingsError.MaxHiddenDappIds
		: 'VersionMismatch' in value
			? AddDappSettingsError.VersionMismatch
			: 'DappIdTooLong' in value
				? AddDappSettingsError.DappIdTooLong
				: 'UserNotFound' in value
					? AddDappSettingsError.UserNotFound
					: value;
}
function from_candid_variant_n181(
	value:
		| {
				VersionMismatch: null;
		  }
		| {
				UserNotFound: null;
		  }
): SetTestnetsSettingsError {
	return 'VersionMismatch' in value
		? SetTestnetsSettingsError.VersionMismatch
		: 'UserNotFound' in value
			? SetTestnetsSettingsError.UserNotFound
			: value;
}
function from_candid_variant_n186(
	value:
		| {
				Ok: _TopUpCyclesLedgerResponse;
		  }
		| {
				Err: _TopUpCyclesLedgerError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: TopUpCyclesLedgerResponse;
	  }
	| {
			__kind__: 'Err';
			Err: TopUpCyclesLedgerError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_TopUpCyclesLedgerError_n187(value.Err)
				}
			: value;
}
function from_candid_variant_n188(
	value:
		| {
				InvalidArgPercentageOutOfRange: {
					max: number;
					min: number;
					percentage: number;
				};
		  }
		| {
				CouldNotGetBalanceFromCyclesLedger: null;
		  }
		| {
				CouldNotTopUpCyclesLedger: {
					tried_to_send: bigint;
					available: bigint;
				};
		  }
):
	| {
			__kind__: 'InvalidArgPercentageOutOfRange';
			InvalidArgPercentageOutOfRange: {
				max: number;
				min: number;
				percentage: number;
			};
	  }
	| {
			__kind__: 'CouldNotGetBalanceFromCyclesLedger';
			CouldNotGetBalanceFromCyclesLedger: null;
	  }
	| {
			__kind__: 'CouldNotTopUpCyclesLedger';
			CouldNotTopUpCyclesLedger: {
				tried_to_send: bigint;
				available: bigint;
			};
	  } {
	return 'InvalidArgPercentageOutOfRange' in value
		? {
				__kind__: 'InvalidArgPercentageOutOfRange',
				InvalidArgPercentageOutOfRange: value.InvalidArgPercentageOutOfRange
			}
		: 'CouldNotGetBalanceFromCyclesLedger' in value
			? {
					__kind__: 'CouldNotGetBalanceFromCyclesLedger',
					CouldNotGetBalanceFromCyclesLedger: value.CouldNotGetBalanceFromCyclesLedger
				}
			: 'CouldNotTopUpCyclesLedger' in value
				? {
						__kind__: 'CouldNotTopUpCyclesLedger',
						CouldNotTopUpCyclesLedger: value.CouldNotTopUpCyclesLedger
					}
				: value;
}
function from_candid_variant_n21(
	value:
		| {
				Ok: _AllowSigningResponse;
		  }
		| {
				Err: _AllowSigningError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: AllowSigningResponse;
	  }
	| {
			__kind__: 'Err';
			Err: AllowSigningError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_AllowSigningResponse_n22(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_AllowSigningError_n27(value.Err)
				}
			: value;
}
function from_candid_variant_n25(
	value:
		| {
				Skipped: null;
		  }
		| {
				Failed: null;
		  }
		| {
				Executed: null;
		  }
): AllowSigningStatus {
	return 'Skipped' in value
		? AllowSigningStatus.Skipped
		: 'Failed' in value
			? AllowSigningStatus.Failed
			: 'Executed' in value
				? AllowSigningStatus.Executed
				: value;
}
function from_candid_variant_n28(
	value:
		| {
				ApproveError: _ApproveError;
		  }
		| {
				PowChallenge: _ChallengeCompletionError;
		  }
		| {
				Other: string;
		  }
		| {
				FailedToContactCyclesLedger: null;
		  }
):
	| {
			__kind__: 'ApproveError';
			ApproveError: ApproveError;
	  }
	| {
			__kind__: 'PowChallenge';
			PowChallenge: ChallengeCompletionError;
	  }
	| {
			__kind__: 'Other';
			Other: string;
	  }
	| {
			__kind__: 'FailedToContactCyclesLedger';
			FailedToContactCyclesLedger: null;
	  } {
	return 'ApproveError' in value
		? {
				__kind__: 'ApproveError',
				ApproveError: from_candid_ApproveError_n29(value.ApproveError)
			}
		: 'PowChallenge' in value
			? {
					__kind__: 'PowChallenge',
					PowChallenge: from_candid_ChallengeCompletionError_n31(value.PowChallenge)
				}
			: 'Other' in value
				? {
						__kind__: 'Other',
						Other: value.Other
					}
				: 'FailedToContactCyclesLedger' in value
					? {
							__kind__: 'FailedToContactCyclesLedger',
							FailedToContactCyclesLedger: value.FailedToContactCyclesLedger
						}
					: value;
}
function from_candid_variant_n30(
	value:
		| {
				GenericError: {
					message: string;
					error_code: bigint;
				};
		  }
		| {
				TemporarilyUnavailable: null;
		  }
		| {
				Duplicate: {
					duplicate_of: bigint;
				};
		  }
		| {
				BadFee: {
					expected_fee: bigint;
				};
		  }
		| {
				AllowanceChanged: {
					current_allowance: bigint;
				};
		  }
		| {
				CreatedInFuture: {
					ledger_time: bigint;
				};
		  }
		| {
				TooOld: null;
		  }
		| {
				Expired: {
					ledger_time: bigint;
				};
		  }
		| {
				InsufficientFunds: {
					balance: bigint;
				};
		  }
):
	| {
			__kind__: 'GenericError';
			GenericError: {
				message: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'TemporarilyUnavailable';
			TemporarilyUnavailable: null;
	  }
	| {
			__kind__: 'Duplicate';
			Duplicate: {
				duplicate_of: bigint;
			};
	  }
	| {
			__kind__: 'BadFee';
			BadFee: {
				expected_fee: bigint;
			};
	  }
	| {
			__kind__: 'AllowanceChanged';
			AllowanceChanged: {
				current_allowance: bigint;
			};
	  }
	| {
			__kind__: 'CreatedInFuture';
			CreatedInFuture: {
				ledger_time: bigint;
			};
	  }
	| {
			__kind__: 'TooOld';
			TooOld: null;
	  }
	| {
			__kind__: 'Expired';
			Expired: {
				ledger_time: bigint;
			};
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: {
				balance: bigint;
			};
	  } {
	return 'GenericError' in value
		? {
				__kind__: 'GenericError',
				GenericError: value.GenericError
			}
		: 'TemporarilyUnavailable' in value
			? {
					__kind__: 'TemporarilyUnavailable',
					TemporarilyUnavailable: value.TemporarilyUnavailable
				}
			: 'Duplicate' in value
				? {
						__kind__: 'Duplicate',
						Duplicate: value.Duplicate
					}
				: 'BadFee' in value
					? {
							__kind__: 'BadFee',
							BadFee: value.BadFee
						}
					: 'AllowanceChanged' in value
						? {
								__kind__: 'AllowanceChanged',
								AllowanceChanged: value.AllowanceChanged
							}
						: 'CreatedInFuture' in value
							? {
									__kind__: 'CreatedInFuture',
									CreatedInFuture: value.CreatedInFuture
								}
							: 'TooOld' in value
								? {
										__kind__: 'TooOld',
										TooOld: value.TooOld
									}
								: 'Expired' in value
									? {
											__kind__: 'Expired',
											Expired: value.Expired
										}
									: 'InsufficientFunds' in value
										? {
												__kind__: 'InsufficientFunds',
												InsufficientFunds: value.InsufficientFunds
											}
										: value;
}
function from_candid_variant_n32(
	value:
		| {
				InvalidNonce: null;
		  }
		| {
				MissingChallenge: null;
		  }
		| {
				ExpiredChallenge: null;
		  }
		| {
				MissingUserProfile: null;
		  }
		| {
				ChallengeAlreadySolved: null;
		  }
): ChallengeCompletionError {
	return 'InvalidNonce' in value
		? ChallengeCompletionError.InvalidNonce
		: 'MissingChallenge' in value
			? ChallengeCompletionError.MissingChallenge
			: 'ExpiredChallenge' in value
				? ChallengeCompletionError.ExpiredChallenge
				: 'MissingUserProfile' in value
					? ChallengeCompletionError.MissingUserProfile
					: 'ChallengeAlreadySolved' in value
						? ChallengeCompletionError.ChallengeAlreadySolved
						: value;
}
function from_candid_variant_n38(
	value:
		| {
				Ok: null;
		  }
		| {
				Err: _BtcAddPendingTransactionError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: null;
	  }
	| {
			__kind__: 'Err';
			Err: BtcAddPendingTransactionError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_BtcAddPendingTransactionError_n39(value.Err)
				}
			: value;
}
function from_candid_variant_n40(value: {
	InternalError: {
		msg: string;
	};
}): {
	__kind__: 'InternalError';
	InternalError: {
		msg: string;
	};
} {
	return 'InternalError' in value
		? {
				__kind__: 'InternalError',
				InternalError: value.InternalError
			}
		: value;
}
function from_candid_variant_n44(
	value:
		| {
				Ok: _BtcGetFeePercentilesResponse;
		  }
		| {
				Err: _SelectedUtxosFeeError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: BtcGetFeePercentilesResponse;
	  }
	| {
			__kind__: 'Err';
			Err: SelectedUtxosFeeError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_SelectedUtxosFeeError_n45(value.Err)
				}
			: value;
}
function from_candid_variant_n46(
	value:
		| {
				PendingTransactions: null;
		  }
		| {
				InternalError: {
					msg: string;
				};
		  }
):
	| {
			__kind__: 'PendingTransactions';
			PendingTransactions: null;
	  }
	| {
			__kind__: 'InternalError';
			InternalError: {
				msg: string;
			};
	  } {
	return 'PendingTransactions' in value
		? {
				__kind__: 'PendingTransactions',
				PendingTransactions: value.PendingTransactions
			}
		: 'InternalError' in value
			? {
					__kind__: 'InternalError',
					InternalError: value.InternalError
				}
			: value;
}
function from_candid_variant_n50(
	value:
		| {
				Ok: _BtcGetPendingTransactionsReponse;
		  }
		| {
				Err: _BtcAddPendingTransactionError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: BtcGetPendingTransactionsReponse;
	  }
	| {
			__kind__: 'Err';
			Err: BtcAddPendingTransactionError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_BtcAddPendingTransactionError_n39(value.Err)
				}
			: value;
}
function from_candid_variant_n54(
	value:
		| {
				Ok: _SelectedUtxosFeeResponse;
		  }
		| {
				Err: _SelectedUtxosFeeError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: SelectedUtxosFeeResponse;
	  }
	| {
			__kind__: 'Err';
			Err: SelectedUtxosFeeError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_SelectedUtxosFeeError_n45(value.Err)
				}
			: value;
}
function from_candid_variant_n64(value: { ProofOfUniqueness: null }): CredentialType {
	return 'ProofOfUniqueness' in value ? CredentialType.ProofOfUniqueness : value;
}
function from_candid_variant_n73(
	value:
		| {
				Ok: _Contact;
		  }
		| {
				Err: _ContactError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: Contact;
	  }
	| {
			__kind__: 'Err';
			Err: ContactError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: from_candid_Contact_n74(value.Ok)
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_ContactError_n93(value.Err)
				}
			: value;
}
function from_candid_variant_n80(
	value:
		| {
				Btc: _BtcAddress;
		  }
		| {
				Eth: _EthAddress;
		  }
		| {
				Sol: string;
		  }
		| {
				Icrcv2: _Icrcv2AccountId;
		  }
):
	| {
			__kind__: 'Btc';
			Btc: BtcAddress;
	  }
	| {
			__kind__: 'Eth';
			Eth: EthAddress;
	  }
	| {
			__kind__: 'Sol';
			Sol: string;
	  }
	| {
			__kind__: 'Icrcv2';
			Icrcv2: Icrcv2AccountId;
	  } {
	return 'Btc' in value
		? {
				__kind__: 'Btc',
				Btc: from_candid_BtcAddress_n81(value.Btc)
			}
		: 'Eth' in value
			? {
					__kind__: 'Eth',
					Eth: from_candid_EthAddress_n83(value.Eth)
				}
			: 'Sol' in value
				? {
						__kind__: 'Sol',
						Sol: value.Sol
					}
				: 'Icrcv2' in value
					? {
							__kind__: 'Icrcv2',
							Icrcv2: from_candid_Icrcv2AccountId_n85(value.Icrcv2)
						}
					: value;
}
function from_candid_variant_n82(
	value:
		| {
				P2WPKH: string;
		  }
		| {
				P2PKH: string;
		  }
		| {
				P2WSH: string;
		  }
		| {
				P2SH: string;
		  }
		| {
				P2TR: string;
		  }
):
	| {
			__kind__: 'P2WPKH';
			P2WPKH: string;
	  }
	| {
			__kind__: 'P2PKH';
			P2PKH: string;
	  }
	| {
			__kind__: 'P2WSH';
			P2WSH: string;
	  }
	| {
			__kind__: 'P2SH';
			P2SH: string;
	  }
	| {
			__kind__: 'P2TR';
			P2TR: string;
	  } {
	return 'P2WPKH' in value
		? {
				__kind__: 'P2WPKH',
				P2WPKH: value.P2WPKH
			}
		: 'P2PKH' in value
			? {
					__kind__: 'P2PKH',
					P2PKH: value.P2PKH
				}
			: 'P2WSH' in value
				? {
						__kind__: 'P2WSH',
						P2WSH: value.P2WSH
					}
				: 'P2SH' in value
					? {
							__kind__: 'P2SH',
							P2SH: value.P2SH
						}
					: 'P2TR' in value
						? {
								__kind__: 'P2TR',
								P2TR: value.P2TR
							}
						: value;
}
function from_candid_variant_n84(value: { Public: string }): {
	__kind__: 'Public';
	Public: string;
} {
	return 'Public' in value
		? {
				__kind__: 'Public',
				Public: value.Public
			}
		: value;
}
function from_candid_variant_n86(
	value:
		| {
				Account: Uint8Array;
		  }
		| {
				WithPrincipal: {
					owner: Principal;
					subaccount: [] | [Uint8Array];
				};
		  }
):
	| {
			__kind__: 'Account';
			Account: Uint8Array;
	  }
	| {
			__kind__: 'WithPrincipal';
			WithPrincipal: {
				owner: Principal;
				subaccount?: Uint8Array;
			};
	  } {
	return 'Account' in value
		? {
				__kind__: 'Account',
				Account: value.Account
			}
		: 'WithPrincipal' in value
			? {
					__kind__: 'WithPrincipal',
					WithPrincipal: from_candid_record_n87(value.WithPrincipal)
				}
			: value;
}
function from_candid_variant_n92(
	value:
		| {
				'image/gif': null;
		  }
		| {
				'image/png': null;
		  }
		| {
				'image/jpeg': null;
		  }
		| {
				'image/webp': null;
		  }
): ImageMimeType {
	return 'image/gif' in value
		? ImageMimeType['image/gif']
		: 'image/png' in value
			? ImageMimeType['image/png']
			: 'image/jpeg' in value
				? ImageMimeType['image/jpeg']
				: 'image/webp' in value
					? ImageMimeType['image/webp']
					: value;
}
function from_candid_variant_n94(
	value:
		| {
				InvalidContactData: null;
		  }
		| {
				CanisterMemoryNearCapacity: null;
		  }
		| {
				InvalidImageFormat: null;
		  }
		| {
				ContactNotFound: null;
		  }
		| {
				ImageTooLarge: null;
		  }
		| {
				RandomnessError: null;
		  }
		| {
				ImageExceedsMaxSize: null;
		  }
		| {
				CanisterStatusError: null;
		  }
		| {
				TooManyContactsWithImages: null;
		  }
): ContactError {
	return 'InvalidContactData' in value
		? ContactError.InvalidContactData
		: 'CanisterMemoryNearCapacity' in value
			? ContactError.CanisterMemoryNearCapacity
			: 'InvalidImageFormat' in value
				? ContactError.InvalidImageFormat
				: 'ContactNotFound' in value
					? ContactError.ContactNotFound
					: 'ImageTooLarge' in value
						? ContactError.ImageTooLarge
						: 'RandomnessError' in value
							? ContactError.RandomnessError
							: 'ImageExceedsMaxSize' in value
								? ContactError.ImageExceedsMaxSize
								: 'CanisterStatusError' in value
									? ContactError.CanisterStatusError
									: 'TooManyContactsWithImages' in value
										? ContactError.TooManyContactsWithImages
										: value;
}
function from_candid_variant_n96(
	value:
		| {
				Ok: _CreateChallengeResponse;
		  }
		| {
				Err: _CreateChallengeError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: CreateChallengeResponse;
	  }
	| {
			__kind__: 'Err';
			Err: CreateChallengeError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_CreateChallengeError_n97(value.Err)
				}
			: value;
}
function from_candid_variant_n98(
	value:
		| {
				ChallengeInProgress: null;
		  }
		| {
				MissingUserProfile: null;
		  }
		| {
				RandomnessError: string;
		  }
		| {
				Other: string;
		  }
):
	| {
			__kind__: 'ChallengeInProgress';
			ChallengeInProgress: null;
	  }
	| {
			__kind__: 'MissingUserProfile';
			MissingUserProfile: null;
	  }
	| {
			__kind__: 'RandomnessError';
			RandomnessError: string;
	  }
	| {
			__kind__: 'Other';
			Other: string;
	  } {
	return 'ChallengeInProgress' in value
		? {
				__kind__: 'ChallengeInProgress',
				ChallengeInProgress: value.ChallengeInProgress
			}
		: 'MissingUserProfile' in value
			? {
					__kind__: 'MissingUserProfile',
					MissingUserProfile: value.MissingUserProfile
				}
			: 'RandomnessError' in value
				? {
						__kind__: 'RandomnessError',
						RandomnessError: value.RandomnessError
					}
				: 'Other' in value
					? {
							__kind__: 'Other',
							Other: value.Other
						}
					: value;
}
function from_candid_vec_n110(value: Array<_UserCredential>): Array<UserCredential> {
	return value.map((x) => from_candid_UserCredential_n111(x));
}
function from_candid_vec_n118(
	value: Array<[_NetworkSettingsFor, _NetworkSettings]>
): Array<[NetworkSettingsFor, NetworkSettings]> {
	return value.map((x) => from_candid_tuple_n119(x));
}
function from_candid_vec_n124(
	value: Array<[_ExperimentalFeatureSettingsFor, _ExperimentalFeatureSettings]>
): Array<[ExperimentalFeatureSettingsFor, ExperimentalFeatureSettings]> {
	return value.map((x) => from_candid_tuple_n125(x));
}
function from_candid_vec_n141(value: Array<_Contact>): Array<Contact> {
	return value.map((x) => from_candid_Contact_n74(x));
}
function from_candid_vec_n146(value: Array<_CustomToken>): Array<CustomToken> {
	return value.map((x) => from_candid_CustomToken_n147(x));
}
function from_candid_vec_n159(value: Array<_UserToken>): Array<UserToken> {
	return value.map((x) => from_candid_UserToken_n160(x));
}
function from_candid_vec_n60(value: Array<_SupportedCredential>): Array<SupportedCredential> {
	return value.map((x) => from_candid_SupportedCredential_n61(x));
}
function from_candid_vec_n76(value: Array<_ContactAddressData>): Array<ContactAddressData> {
	return value.map((x) => from_candid_ContactAddressData_n77(x));
}
function to_candid_AddHiddenDappIdRequest_n13(
	value: AddHiddenDappIdRequest
): _AddHiddenDappIdRequest {
	return to_candid_record_n14(value);
}
function to_candid_AddUserCredentialRequest_n1(
	value: AddUserCredentialRequest
): _AddUserCredentialRequest {
	return to_candid_record_n2(value);
}
function to_candid_ArgumentValue_n7(value: ArgumentValue): _ArgumentValue {
	return to_candid_variant_n8(value);
}
function to_candid_BitcoinNetwork_n35(value: BitcoinNetwork): _BitcoinNetwork {
	return to_candid_variant_n36(value);
}
function to_candid_BtcAddPendingTransactionRequest_n33(
	value: BtcAddPendingTransactionRequest
): _BtcAddPendingTransactionRequest {
	return to_candid_record_n34(value);
}
function to_candid_BtcAddress_n201(value: BtcAddress): _BtcAddress {
	return to_candid_variant_n202(value);
}
function to_candid_BtcGetFeePercentilesRequest_n41(
	value: BtcGetFeePercentilesRequest
): _BtcGetFeePercentilesRequest {
	return to_candid_record_n42(value);
}
function to_candid_BtcGetPendingTransactionsRequest_n47(
	value: BtcGetPendingTransactionsRequest
): _BtcGetPendingTransactionsRequest {
	return to_candid_record_n48(value);
}
function to_candid_ContactAddressData_n192(value: ContactAddressData): _ContactAddressData {
	return to_candid_record_n193(value);
}
function to_candid_ContactImage_n68(value: ContactImage): _ContactImage {
	return to_candid_record_n69(value);
}
function to_candid_Contact_n189(value: Contact): _Contact {
	return to_candid_record_n190(value);
}
function to_candid_CreateContactRequest_n66(value: CreateContactRequest): _CreateContactRequest {
	return to_candid_record_n67(value);
}
function to_candid_CredentialSpec_n3(value: CredentialSpec): _CredentialSpec {
	return to_candid_record_n4(value);
}
function to_candid_CustomToken_n162(value: CustomToken): _CustomToken {
	return to_candid_record_n163(value);
}
function to_candid_EthAddress_n199(value: EthAddress): _EthAddress {
	return to_candid_variant_n200(value);
}
function to_candid_ExperimentalFeatureSettingsFor_n213(
	value: ExperimentalFeatureSettingsFor
): _ExperimentalFeatureSettingsFor {
	return to_candid_variant_n214(value);
}
function to_candid_IcrcToken_n168(value: IcrcToken): _IcrcToken {
	return to_candid_record_n169(value);
}
function to_candid_Icrcv2AccountId_n196(value: Icrcv2AccountId): _Icrcv2AccountId {
	return to_candid_variant_n197(value);
}
function to_candid_ImageMimeType_n70(value: ImageMimeType): _ImageMimeType {
	return to_candid_variant_n71(value);
}
function to_candid_NetworkSettingsFor_n219(value: NetworkSettingsFor): _NetworkSettingsFor {
	return to_candid_variant_n220(value);
}
function to_candid_SaveNetworksSettingsRequest_n215(
	value: SaveNetworksSettingsRequest
): _SaveNetworksSettingsRequest {
	return to_candid_record_n216(value);
}
function to_candid_SelectedUtxosFeeRequest_n51(
	value: SelectedUtxosFeeRequest
): _SelectedUtxosFeeRequest {
	return to_candid_record_n52(value);
}
function to_candid_SetShowTestnetsRequest_n176(
	value: SetShowTestnetsRequest
): _SetShowTestnetsRequest {
	return to_candid_record_n177(value);
}
function to_candid_SplToken_n166(value: SplToken): _SplToken {
	return to_candid_record_n167(value);
}
function to_candid_TokenAccountId_n194(value: TokenAccountId): _TokenAccountId {
	return to_candid_variant_n195(value);
}
function to_candid_TokenSection_n170(value: TokenSection): _TokenSection {
	return to_candid_variant_n171(value);
}
function to_candid_Token_n164(value: Token): _Token {
	return to_candid_variant_n165(value);
}
function to_candid_TopUpCyclesLedgerRequest_n183(
	value: TopUpCyclesLedgerRequest
): _TopUpCyclesLedgerRequest {
	return to_candid_record_n184(value);
}
function to_candid_UpdateExperimentalFeaturesSettingsRequest_n209(
	value: UpdateExperimentalFeaturesSettingsRequest
): _UpdateExperimentalFeaturesSettingsRequest {
	return to_candid_record_n210(value);
}
function to_candid_UpdateUserAgreementsRequest_n203(
	value: UpdateUserAgreementsRequest
): _UpdateUserAgreementsRequest {
	return to_candid_record_n204(value);
}
function to_candid_UserAgreement_n207(value: UserAgreement): _UserAgreement {
	return to_candid_record_n208(value);
}
function to_candid_UserAgreements_n205(value: UserAgreements): _UserAgreements {
	return to_candid_record_n206(value);
}
function to_candid_UserToken_n174(value: UserToken): _UserToken {
	return to_candid_record_n175(value);
}
function to_candid_opt_n182(
	value: TopUpCyclesLedgerRequest | null
): [] | [_TopUpCyclesLedgerRequest] {
	return value === null
		? candid_none()
		: candid_some(to_candid_TopUpCyclesLedgerRequest_n183(value));
}
function to_candid_opt_n19(value: AllowSigningRequest | null): [] | [_AllowSigningRequest] {
	return value === null ? candid_none() : candid_some(value);
}
function to_candid_record_n14(value: { current_user_version?: bigint; dapp_id: string }): {
	current_user_version: [] | [bigint];
	dapp_id: string;
} {
	return {
		current_user_version: value.current_user_version
			? candid_some(value.current_user_version)
			: candid_none(),
		dapp_id: value.dapp_id
	};
}
function to_candid_record_n163(value: {
	token: Token;
	allow_external_content_source?: boolean;
	section?: TokenSection;
	version?: bigint;
	enabled: boolean;
}): {
	token: _Token;
	allow_external_content_source: [] | [boolean];
	section: [] | [_TokenSection];
	version: [] | [bigint];
	enabled: boolean;
} {
	return {
		token: to_candid_Token_n164(value.token),
		allow_external_content_source: value.allow_external_content_source
			? candid_some(value.allow_external_content_source)
			: candid_none(),
		section: value.section
			? candid_some(to_candid_TokenSection_n170(value.section))
			: candid_none(),
		version: value.version ? candid_some(value.version) : candid_none(),
		enabled: value.enabled
	};
}
function to_candid_record_n167(value: {
	decimals?: number;
	token_address: string;
	symbol?: string;
}): {
	decimals: [] | [number];
	token_address: string;
	symbol: [] | [string];
} {
	return {
		decimals: value.decimals ? candid_some(value.decimals) : candid_none(),
		token_address: value.token_address,
		symbol: value.symbol ? candid_some(value.symbol) : candid_none()
	};
}
function to_candid_record_n169(value: { ledger_id: Principal; index_id?: Principal }): {
	ledger_id: Principal;
	index_id: [] | [Principal];
} {
	return {
		ledger_id: value.ledger_id,
		index_id: value.index_id ? candid_some(value.index_id) : candid_none()
	};
}
function to_candid_record_n175(value: {
	decimals?: number;
	version?: bigint;
	enabled?: boolean;
	chain_id: bigint;
	contract_address: string;
	symbol?: string;
}): {
	decimals: [] | [number];
	version: [] | [bigint];
	enabled: [] | [boolean];
	chain_id: bigint;
	contract_address: string;
	symbol: [] | [string];
} {
	return {
		decimals: value.decimals ? candid_some(value.decimals) : candid_none(),
		version: value.version ? candid_some(value.version) : candid_none(),
		enabled: value.enabled ? candid_some(value.enabled) : candid_none(),
		chain_id: value.chain_id,
		contract_address: value.contract_address,
		symbol: value.symbol ? candid_some(value.symbol) : candid_none()
	};
}
function to_candid_record_n177(value: { current_user_version?: bigint; show_testnets: boolean }): {
	current_user_version: [] | [bigint];
	show_testnets: boolean;
} {
	return {
		current_user_version: value.current_user_version
			? candid_some(value.current_user_version)
			: candid_none(),
		show_testnets: value.show_testnets
	};
}
function to_candid_record_n184(value: { threshold?: bigint; percentage?: number }): {
	threshold: [] | [bigint];
	percentage: [] | [number];
} {
	return {
		threshold: value.threshold ? candid_some(value.threshold) : candid_none(),
		percentage: value.percentage ? candid_some(value.percentage) : candid_none()
	};
}
function to_candid_record_n190(value: {
	id: bigint;
	name: string;
	update_timestamp_ns: bigint;
	addresses: Array<ContactAddressData>;
	image?: ContactImage;
}): {
	id: bigint;
	name: string;
	update_timestamp_ns: bigint;
	addresses: Array<_ContactAddressData>;
	image: [] | [_ContactImage];
} {
	return {
		id: value.id,
		name: value.name,
		update_timestamp_ns: value.update_timestamp_ns,
		addresses: to_candid_vec_n191(value.addresses),
		image: value.image ? candid_some(to_candid_ContactImage_n68(value.image)) : candid_none()
	};
}
function to_candid_record_n193(value: { label?: string; token_account_id: TokenAccountId }): {
	label: [] | [string];
	token_account_id: _TokenAccountId;
} {
	return {
		label: value.label ? candid_some(value.label) : candid_none(),
		token_account_id: to_candid_TokenAccountId_n194(value.token_account_id)
	};
}
function to_candid_record_n198(value: { owner: Principal; subaccount?: Uint8Array }): {
	owner: Principal;
	subaccount: [] | [Uint8Array];
} {
	return {
		owner: value.owner,
		subaccount: value.subaccount ? candid_some(value.subaccount) : candid_none()
	};
}
function to_candid_record_n2(value: {
	credential_jwt: string;
	issuer_canister_id: Principal;
	current_user_version?: bigint;
	credential_spec: CredentialSpec;
}): {
	credential_jwt: string;
	issuer_canister_id: Principal;
	current_user_version: [] | [bigint];
	credential_spec: _CredentialSpec;
} {
	return {
		credential_jwt: value.credential_jwt,
		issuer_canister_id: value.issuer_canister_id,
		current_user_version: value.current_user_version
			? candid_some(value.current_user_version)
			: candid_none(),
		credential_spec: to_candid_CredentialSpec_n3(value.credential_spec)
	};
}
function to_candid_record_n204(value: {
	agreements: UserAgreements;
	current_user_version?: bigint;
}): {
	agreements: _UserAgreements;
	current_user_version: [] | [bigint];
} {
	return {
		agreements: to_candid_UserAgreements_n205(value.agreements),
		current_user_version: value.current_user_version
			? candid_some(value.current_user_version)
			: candid_none()
	};
}
function to_candid_record_n206(value: {
	license_agreement: UserAgreement;
	privacy_policy: UserAgreement;
	terms_of_use: UserAgreement;
}): {
	license_agreement: _UserAgreement;
	privacy_policy: _UserAgreement;
	terms_of_use: _UserAgreement;
} {
	return {
		license_agreement: to_candid_UserAgreement_n207(value.license_agreement),
		privacy_policy: to_candid_UserAgreement_n207(value.privacy_policy),
		terms_of_use: to_candid_UserAgreement_n207(value.terms_of_use)
	};
}
function to_candid_record_n208(value: {
	last_accepted_at_ns?: bigint;
	text_sha256?: string;
	accepted?: boolean;
	last_updated_at_ms?: bigint;
}): {
	last_accepted_at_ns: [] | [bigint];
	text_sha256: [] | [string];
	accepted: [] | [boolean];
	last_updated_at_ms: [] | [bigint];
} {
	return {
		last_accepted_at_ns: value.last_accepted_at_ns
			? candid_some(value.last_accepted_at_ns)
			: candid_none(),
		text_sha256: value.text_sha256 ? candid_some(value.text_sha256) : candid_none(),
		accepted: value.accepted ? candid_some(value.accepted) : candid_none(),
		last_updated_at_ms: value.last_updated_at_ms
			? candid_some(value.last_updated_at_ms)
			: candid_none()
	};
}
function to_candid_record_n210(value: {
	experimental_features: Array<[ExperimentalFeatureSettingsFor, ExperimentalFeatureSettings]>;
	current_user_version?: bigint;
}): {
	experimental_features: Array<[_ExperimentalFeatureSettingsFor, _ExperimentalFeatureSettings]>;
	current_user_version: [] | [bigint];
} {
	return {
		experimental_features: to_candid_vec_n211(value.experimental_features),
		current_user_version: value.current_user_version
			? candid_some(value.current_user_version)
			: candid_none()
	};
}
function to_candid_record_n216(value: {
	networks: Array<[NetworkSettingsFor, NetworkSettings]>;
	current_user_version?: bigint;
}): {
	networks: Array<[_NetworkSettingsFor, _NetworkSettings]>;
	current_user_version: [] | [bigint];
} {
	return {
		networks: to_candid_vec_n217(value.networks),
		current_user_version: value.current_user_version
			? candid_some(value.current_user_version)
			: candid_none()
	};
}
function to_candid_record_n34(value: {
	txid: Uint8Array;
	network: BitcoinNetwork;
	address: string;
	utxos: Array<Utxo>;
}): {
	txid: Uint8Array;
	network: _BitcoinNetwork;
	address: string;
	utxos: Array<_Utxo>;
} {
	return {
		txid: value.txid,
		network: to_candid_BitcoinNetwork_n35(value.network),
		address: value.address,
		utxos: value.utxos
	};
}
function to_candid_record_n4(value: {
	arguments?: Array<[string, ArgumentValue]>;
	credential_type: string;
}): {
	arguments: [] | [Array<[string, _ArgumentValue]>];
	credential_type: string;
} {
	return {
		arguments: value.arguments ? candid_some(to_candid_vec_n5(value.arguments)) : candid_none(),
		credential_type: value.credential_type
	};
}
function to_candid_record_n42(value: { network: BitcoinNetwork }): {
	network: _BitcoinNetwork;
} {
	return {
		network: to_candid_BitcoinNetwork_n35(value.network)
	};
}
function to_candid_record_n48(value: { network: BitcoinNetwork; address: string }): {
	network: _BitcoinNetwork;
	address: string;
} {
	return {
		network: to_candid_BitcoinNetwork_n35(value.network),
		address: value.address
	};
}
function to_candid_record_n52(value: {
	network: BitcoinNetwork;
	amount_satoshis: bigint;
	min_confirmations?: number;
}): {
	network: _BitcoinNetwork;
	amount_satoshis: bigint;
	min_confirmations: [] | [number];
} {
	return {
		network: to_candid_BitcoinNetwork_n35(value.network),
		amount_satoshis: value.amount_satoshis,
		min_confirmations: value.min_confirmations
			? candid_some(value.min_confirmations)
			: candid_none()
	};
}
function to_candid_record_n67(value: { name: string; image?: ContactImage }): {
	name: string;
	image: [] | [_ContactImage];
} {
	return {
		name: value.name,
		image: value.image ? candid_some(to_candid_ContactImage_n68(value.image)) : candid_none()
	};
}
function to_candid_record_n69(value: { data: Uint8Array; mime_type: ImageMimeType }): {
	data: Uint8Array;
	mime_type: _ImageMimeType;
} {
	return {
		data: value.data,
		mime_type: to_candid_ImageMimeType_n70(value.mime_type)
	};
}
function to_candid_tuple_n212(
	value: [ExperimentalFeatureSettingsFor, ExperimentalFeatureSettings]
): [_ExperimentalFeatureSettingsFor, _ExperimentalFeatureSettings] {
	return [to_candid_ExperimentalFeatureSettingsFor_n213(value[0]), value[1]];
}
function to_candid_tuple_n218(
	value: [NetworkSettingsFor, NetworkSettings]
): [_NetworkSettingsFor, _NetworkSettings] {
	return [to_candid_NetworkSettingsFor_n219(value[0]), value[1]];
}
function to_candid_tuple_n6(value: [string, ArgumentValue]): [string, _ArgumentValue] {
	return [value[0], to_candid_ArgumentValue_n7(value[1])];
}
function to_candid_variant_n165(
	value:
		| {
				__kind__: 'Erc20';
				Erc20: ErcToken;
		  }
		| {
				__kind__: 'Icrc';
				Icrc: IcrcToken;
		  }
		| {
				__kind__: 'Erc721';
				Erc721: ErcToken;
		  }
		| {
				__kind__: 'SplDevnet';
				SplDevnet: SplToken;
		  }
		| {
				__kind__: 'SplMainnet';
				SplMainnet: SplToken;
		  }
		| {
				__kind__: 'Erc1155';
				Erc1155: ErcToken;
		  }
):
	| {
			Erc20: _ErcToken;
	  }
	| {
			Icrc: _IcrcToken;
	  }
	| {
			Erc721: _ErcToken;
	  }
	| {
			SplDevnet: _SplToken;
	  }
	| {
			SplMainnet: _SplToken;
	  }
	| {
			Erc1155: _ErcToken;
	  } {
	return value.__kind__ === 'Erc20'
		? {
				Erc20: value.Erc20
			}
		: value.__kind__ === 'Icrc'
			? {
					Icrc: to_candid_IcrcToken_n168(value.Icrc)
				}
			: value.__kind__ === 'Erc721'
				? {
						Erc721: value.Erc721
					}
				: value.__kind__ === 'SplDevnet'
					? {
							SplDevnet: to_candid_SplToken_n166(value.SplDevnet)
						}
					: value.__kind__ === 'SplMainnet'
						? {
								SplMainnet: to_candid_SplToken_n166(value.SplMainnet)
							}
						: value.__kind__ === 'Erc1155'
							? {
									Erc1155: value.Erc1155
								}
							: value;
}
function to_candid_variant_n171(value: TokenSection):
	| {
			Spam: null;
	  }
	| {
			Hidden: null;
	  } {
	return value == TokenSection.Spam
		? {
				Spam: null
			}
		: value == TokenSection.Hidden
			? {
					Hidden: null
				}
			: value;
}
function to_candid_variant_n195(
	value:
		| {
				__kind__: 'Btc';
				Btc: BtcAddress;
		  }
		| {
				__kind__: 'Eth';
				Eth: EthAddress;
		  }
		| {
				__kind__: 'Sol';
				Sol: string;
		  }
		| {
				__kind__: 'Icrcv2';
				Icrcv2: Icrcv2AccountId;
		  }
):
	| {
			Btc: _BtcAddress;
	  }
	| {
			Eth: _EthAddress;
	  }
	| {
			Sol: string;
	  }
	| {
			Icrcv2: _Icrcv2AccountId;
	  } {
	return value.__kind__ === 'Btc'
		? {
				Btc: to_candid_BtcAddress_n201(value.Btc)
			}
		: value.__kind__ === 'Eth'
			? {
					Eth: to_candid_EthAddress_n199(value.Eth)
				}
			: value.__kind__ === 'Sol'
				? {
						Sol: value.Sol
					}
				: value.__kind__ === 'Icrcv2'
					? {
							Icrcv2: to_candid_Icrcv2AccountId_n196(value.Icrcv2)
						}
					: value;
}
function to_candid_variant_n197(
	value:
		| {
				__kind__: 'Account';
				Account: Uint8Array;
		  }
		| {
				__kind__: 'WithPrincipal';
				WithPrincipal: {
					owner: Principal;
					subaccount?: Uint8Array;
				};
		  }
):
	| {
			Account: Uint8Array;
	  }
	| {
			WithPrincipal: {
				owner: Principal;
				subaccount: [] | [Uint8Array];
			};
	  } {
	return value.__kind__ === 'Account'
		? {
				Account: value.Account
			}
		: value.__kind__ === 'WithPrincipal'
			? {
					WithPrincipal: to_candid_record_n198(value.WithPrincipal)
				}
			: value;
}
function to_candid_variant_n200(value: { __kind__: 'Public'; Public: string }): {
	Public: string;
} {
	return value.__kind__ === 'Public'
		? {
				Public: value.Public
			}
		: value;
}
function to_candid_variant_n202(
	value:
		| {
				__kind__: 'P2WPKH';
				P2WPKH: string;
		  }
		| {
				__kind__: 'P2PKH';
				P2PKH: string;
		  }
		| {
				__kind__: 'P2WSH';
				P2WSH: string;
		  }
		| {
				__kind__: 'P2SH';
				P2SH: string;
		  }
		| {
				__kind__: 'P2TR';
				P2TR: string;
		  }
):
	| {
			P2WPKH: string;
	  }
	| {
			P2PKH: string;
	  }
	| {
			P2WSH: string;
	  }
	| {
			P2SH: string;
	  }
	| {
			P2TR: string;
	  } {
	return value.__kind__ === 'P2WPKH'
		? {
				P2WPKH: value.P2WPKH
			}
		: value.__kind__ === 'P2PKH'
			? {
					P2PKH: value.P2PKH
				}
			: value.__kind__ === 'P2WSH'
				? {
						P2WSH: value.P2WSH
					}
				: value.__kind__ === 'P2SH'
					? {
							P2SH: value.P2SH
						}
					: value.__kind__ === 'P2TR'
						? {
								P2TR: value.P2TR
							}
						: value;
}
function to_candid_variant_n214(value: ExperimentalFeatureSettingsFor): {
	AiAssistantBeta: null;
} {
	return value == ExperimentalFeatureSettingsFor.AiAssistantBeta
		? {
				AiAssistantBeta: null
			}
		: value;
}
function to_candid_variant_n220(value: NetworkSettingsFor):
	| {
			ArbitrumMainnet: null;
	  }
	| {
			InternetComputer: null;
	  }
	| {
			BaseSepolia: null;
	  }
	| {
			PolygonMainnet: null;
	  }
	| {
			BitcoinRegtest: null;
	  }
	| {
			SolanaDevnet: null;
	  }
	| {
			PolygonAmoy: null;
	  }
	| {
			EthereumSepolia: null;
	  }
	| {
			BitcoinTestnet: null;
	  }
	| {
			BaseMainnet: null;
	  }
	| {
			BscMainnet: null;
	  }
	| {
			SolanaLocal: null;
	  }
	| {
			ArbitrumSepolia: null;
	  }
	| {
			EthereumMainnet: null;
	  }
	| {
			SolanaMainnet: null;
	  }
	| {
			BitcoinMainnet: null;
	  }
	| {
			BscTestnet: null;
	  } {
	return value == NetworkSettingsFor.ArbitrumMainnet
		? {
				ArbitrumMainnet: null
			}
		: value == NetworkSettingsFor.InternetComputer
			? {
					InternetComputer: null
				}
			: value == NetworkSettingsFor.BaseSepolia
				? {
						BaseSepolia: null
					}
				: value == NetworkSettingsFor.PolygonMainnet
					? {
							PolygonMainnet: null
						}
					: value == NetworkSettingsFor.BitcoinRegtest
						? {
								BitcoinRegtest: null
							}
						: value == NetworkSettingsFor.SolanaDevnet
							? {
									SolanaDevnet: null
								}
							: value == NetworkSettingsFor.PolygonAmoy
								? {
										PolygonAmoy: null
									}
								: value == NetworkSettingsFor.EthereumSepolia
									? {
											EthereumSepolia: null
										}
									: value == NetworkSettingsFor.BitcoinTestnet
										? {
												BitcoinTestnet: null
											}
										: value == NetworkSettingsFor.BaseMainnet
											? {
													BaseMainnet: null
												}
											: value == NetworkSettingsFor.BscMainnet
												? {
														BscMainnet: null
													}
												: value == NetworkSettingsFor.SolanaLocal
													? {
															SolanaLocal: null
														}
													: value == NetworkSettingsFor.ArbitrumSepolia
														? {
																ArbitrumSepolia: null
															}
														: value == NetworkSettingsFor.EthereumMainnet
															? {
																	EthereumMainnet: null
																}
															: value == NetworkSettingsFor.SolanaMainnet
																? {
																		SolanaMainnet: null
																	}
																: value == NetworkSettingsFor.BitcoinMainnet
																	? {
																			BitcoinMainnet: null
																		}
																	: value == NetworkSettingsFor.BscTestnet
																		? {
																				BscTestnet: null
																			}
																		: value;
}
function to_candid_variant_n36(value: BitcoinNetwork):
	| {
			mainnet: null;
	  }
	| {
			regtest: null;
	  }
	| {
			testnet: null;
	  } {
	return value == BitcoinNetwork.mainnet
		? {
				mainnet: null
			}
		: value == BitcoinNetwork.regtest
			? {
					regtest: null
				}
			: value == BitcoinNetwork.testnet
				? {
						testnet: null
					}
				: value;
}
function to_candid_variant_n71(value: ImageMimeType):
	| {
			'image/gif': null;
	  }
	| {
			'image/png': null;
	  }
	| {
			'image/jpeg': null;
	  }
	| {
			'image/webp': null;
	  } {
	return value == ImageMimeType['image/gif']
		? {
				'image/gif': null
			}
		: value == ImageMimeType['image/png']
			? {
					'image/png': null
				}
			: value == ImageMimeType['image/jpeg']
				? {
						'image/jpeg': null
					}
				: value == ImageMimeType['image/webp']
					? {
							'image/webp': null
						}
					: value;
}
function to_candid_variant_n8(
	value:
		| {
				__kind__: 'Int';
				Int: number;
		  }
		| {
				__kind__: 'String';
				String: string;
		  }
):
	| {
			Int: number;
	  }
	| {
			String: string;
	  } {
	return value.__kind__ === 'Int'
		? {
				Int: value.Int
			}
		: value.__kind__ === 'String'
			? {
					String: value.String
				}
			: value;
}
function to_candid_vec_n172(value: Array<CustomToken>): Array<_CustomToken> {
	return value.map((x) => to_candid_CustomToken_n162(x));
}
function to_candid_vec_n173(value: Array<UserToken>): Array<_UserToken> {
	return value.map((x) => to_candid_UserToken_n174(x));
}
function to_candid_vec_n191(value: Array<ContactAddressData>): Array<_ContactAddressData> {
	return value.map((x) => to_candid_ContactAddressData_n192(x));
}
function to_candid_vec_n211(
	value: Array<[ExperimentalFeatureSettingsFor, ExperimentalFeatureSettings]>
): Array<[_ExperimentalFeatureSettingsFor, _ExperimentalFeatureSettings]> {
	return value.map((x) => to_candid_tuple_n212(x));
}
function to_candid_vec_n217(
	value: Array<[NetworkSettingsFor, NetworkSettings]>
): Array<[_NetworkSettingsFor, _NetworkSettings]> {
	return value.map((x) => to_candid_tuple_n218(x));
}
function to_candid_vec_n5(value: Array<[string, ArgumentValue]>): Array<[string, _ArgumentValue]> {
	return value.map((x) => to_candid_tuple_n6(x));
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(canisterId: string, options: CreateActorOptions = {}): Backend {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Backend(actor);
}
