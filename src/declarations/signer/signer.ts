/* eslint-disable */

// @ts-nocheck

// This file was automatically generated by @icp-sdk/bindgen@0.1.2.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import {
	Actor,
	HttpAgent,
	type ActorConfig,
	type ActorSubclass,
	type Agent,
	type HttpAgentOptions
} from '@icp-sdk/core/agent';
import type { Principal } from '@icp-sdk/core/principal';
import { idlFactory, type _SERVICE } from './declarations/signer.did';
import type {
	Account as _Account,
	BitcoinAddressType as _BitcoinAddressType,
	BitcoinNetwork as _BitcoinNetwork,
	BtcTxOutput as _BtcTxOutput,
	BuildP2wpkhTxError as _BuildP2wpkhTxError,
	CallerPaysIcrc2Tokens as _CallerPaysIcrc2Tokens,
	CanisterStatusResultV2 as _CanisterStatusResultV2,
	CanisterStatusType as _CanisterStatusType,
	Config as _Config,
	DefiniteCanisterSettingsArgs as _DefiniteCanisterSettingsArgs,
	EcdsaCurve as _EcdsaCurve,
	EcdsaKeyId as _EcdsaKeyId,
	EcdsaPublicKeyArgument as _EcdsaPublicKeyArgument,
	EcdsaPublicKeyResponse as _EcdsaPublicKeyResponse,
	EthAddressError as _EthAddressError,
	EthAddressRequest as _EthAddressRequest,
	EthAddressResponse as _EthAddressResponse,
	EthPersonalSignResponse as _EthPersonalSignResponse,
	EthSignPrehashResponse as _EthSignPrehashResponse,
	EthSignTransactionRequest as _EthSignTransactionRequest,
	GetAddressError as _GetAddressError,
	GetAddressRequest as _GetAddressRequest,
	GetAddressResponse as _GetAddressResponse,
	GetBalanceRequest as _GetBalanceRequest,
	GetBalanceResponse as _GetBalanceResponse,
	PatronPaysIcrc2Tokens as _PatronPaysIcrc2Tokens,
	PaymentError as _PaymentError,
	PaymentType as _PaymentType,
	RejectionCode_1 as _RejectionCode_1,
	Result as _Result,
	Result_1 as _Result_1,
	Result_2 as _Result_2,
	Result_3 as _Result_3,
	Result_4 as _Result_4,
	Result_5 as _Result_5,
	Result_6 as _Result_6,
	Result_7 as _Result_7,
	Result_8 as _Result_8,
	Result_9 as _Result_9,
	SchnorrAlgorithm as _SchnorrAlgorithm,
	SchnorrKeyId as _SchnorrKeyId,
	SchnorrPublicKeyArgument as _SchnorrPublicKeyArgument,
	SendBtcError as _SendBtcError,
	SendBtcRequest as _SendBtcRequest,
	SendBtcResponse as _SendBtcResponse,
	SignWithEcdsaArgument as _SignWithEcdsaArgument,
	SignWithEcdsaResponse as _SignWithEcdsaResponse,
	SignWithSchnorrArgument as _SignWithSchnorrArgument,
	TransferFromError as _TransferFromError,
	Utxo as _Utxo,
	WithdrawFromError as _WithdrawFromError
} from './declarations/signer.did.d.ts';
export interface Some<T> {
	__kind__: 'Some';
	value: T;
}
export interface None {
	__kind__: 'None';
}
export type Option<T> = Some<T> | None;
function some<T>(value: T): Some<T> {
	return {
		__kind__: 'Some',
		value: value
	};
}
function none(): None {
	return {
		__kind__: 'None'
	};
}
function isNone<T>(option: Option<T>): option is None {
	return option.__kind__ === 'None';
}
function isSome<T>(option: Option<T>): option is Some<T> {
	return option.__kind__ === 'Some';
}
function unwrap<T>(option: Option<T>): T {
	if (isNone(option)) {
		throw new Error('unwrap: none');
	}
	return option.value;
}
function candid_some<T>(value: T): [T] {
	return [value];
}
function candid_none<T>(): [] {
	return [];
}
function record_opt_to_undefined<T>(arg: T | null): T | undefined {
	return arg == null ? undefined : arg;
}
export type Result_2 =
	| {
			__kind__: 'Ok';
			Ok: SendBtcResponse;
	  }
	| {
			__kind__: 'Err';
			Err: SendBtcError;
	  };
export interface SendBtcRequest {
	fee_satoshis?: bigint;
	network: BitcoinNetwork;
	utxos_to_spend: Array<Utxo>;
	address_type: BitcoinAddressType;
	outputs: Array<BtcTxOutput>;
}
export type Arg =
	| {
			__kind__: 'Upgrade';
			Upgrade: null;
	  }
	| {
			__kind__: 'Init';
			Init: InitArg;
	  };
export interface EthPersonalSignResponse {
	signature: string;
}
export interface EcdsaPublicKeyResponse {
	public_key: Uint8Array;
	chain_code: Uint8Array;
}
export type Result_5 =
	| {
			__kind__: 'Ok';
			Ok: EthSignPrehashResponse;
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  };
export type BuildP2wpkhTxError =
	| {
			__kind__: 'NotEnoughFunds';
			NotEnoughFunds: {
				available: bigint;
				required: bigint;
			};
	  }
	| {
			__kind__: 'WrongBitcoinNetwork';
			WrongBitcoinNetwork: null;
	  }
	| {
			__kind__: 'NotP2WPKHSourceAddress';
			NotP2WPKHSourceAddress: null;
	  }
	| {
			__kind__: 'InvalidDestinationAddress';
			InvalidDestinationAddress: GetAddressResponse;
	  }
	| {
			__kind__: 'InvalidSourceAddress';
			InvalidSourceAddress: GetAddressResponse;
	  };
export interface SignWithEcdsaResponse {
	signature: Uint8Array;
}
export interface EcdsaPublicKeyArgument {
	key_id: EcdsaKeyId;
	canister_id?: Principal;
	derivation_path: Array<Uint8Array>;
}
export type Result_4 =
	| {
			__kind__: 'Ok';
			Ok: EthPersonalSignResponse;
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  };
export interface GetBalanceRequest {
	network: BitcoinNetwork;
	address_type: BitcoinAddressType;
	min_confirmations?: number;
}
export interface BtcTxOutput {
	destination_address: string;
	sent_satoshis: bigint;
}
export interface SchnorrPublicKeyArgument {
	key_id: SchnorrKeyId;
	canister_id?: Principal;
	derivation_path: Array<Uint8Array>;
}
export type Result_7 =
	| {
			__kind__: 'Ok';
			Ok: [SignWithEcdsaResponse];
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  };
export interface SchnorrKeyId {
	algorithm: SchnorrAlgorithm;
	name: string;
}
export type EthAddressError =
	| {
			__kind__: 'SigningError';
			SigningError: [RejectionCode_1, string];
	  }
	| {
			__kind__: 'PaymentError';
			PaymentError: PaymentError;
	  };
export type Result_6 =
	| {
			__kind__: 'Ok';
			Ok: [EcdsaPublicKeyResponse];
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  };
export interface SignWithEcdsaArgument {
	key_id: EcdsaKeyId;
	derivation_path: Array<Uint8Array>;
	message_hash: Uint8Array;
}
export interface Outpoint {
	txid: Uint8Array;
	vout: number;
}
export type Result_9 =
	| {
			__kind__: 'Ok';
			Ok: [SignWithEcdsaResponse];
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  };
export interface EcdsaKeyId {
	name: string;
	curve: EcdsaCurve;
}
export interface EthSignPrehashResponse {
	signature: string;
}
export interface SendBtcResponse {
	txid: string;
}
export interface CanisterStatusResultV2 {
	controller: Principal;
	status: CanisterStatusType;
	freezing_threshold: bigint;
	balance: Array<[Uint8Array, bigint]>;
	memory_size: bigint;
	cycles: bigint;
	settings: DefiniteCanisterSettingsArgs;
	idle_cycles_burned_per_day: bigint;
	module_hash?: Uint8Array;
}
export type Result =
	| {
			__kind__: 'Ok';
			Ok: GetAddressResponse;
	  }
	| {
			__kind__: 'Err';
			Err: GetAddressError;
	  };
export type Result_8 =
	| {
			__kind__: 'Ok';
			Ok: [EcdsaPublicKeyResponse];
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  };
export interface EthPersonalSignRequest {
	message: string;
}
export interface InitArg {
	ecdsa_key_name: string;
	ic_root_key_der?: Uint8Array;
	cycles_ledger?: Principal;
}
export interface Account {
	owner: Principal;
	subaccount?: Uint8Array;
}
export interface PatronPaysIcrc2Tokens {
	ledger: Principal;
	patron: Account;
}
export type PaymentType =
	| {
			__kind__: 'PatronPaysIcrc2Tokens';
			PatronPaysIcrc2Tokens: PatronPaysIcrc2Tokens;
	  }
	| {
			__kind__: 'AttachedCycles';
			AttachedCycles: null;
	  }
	| {
			__kind__: 'CallerPaysIcrc2Cycles';
			CallerPaysIcrc2Cycles: null;
	  }
	| {
			__kind__: 'CallerPaysIcrc2Tokens';
			CallerPaysIcrc2Tokens: CallerPaysIcrc2Tokens;
	  }
	| {
			__kind__: 'PatronPaysIcrc2Cycles';
			PatronPaysIcrc2Cycles: Account;
	  };
export type Result_1 =
	| {
			__kind__: 'Ok';
			Ok: GetBalanceResponse;
	  }
	| {
			__kind__: 'Err';
			Err: GetAddressError;
	  };
export type WithdrawFromError =
	| {
			__kind__: 'GenericError';
			GenericError: {
				message: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'TemporarilyUnavailable';
			TemporarilyUnavailable: null;
	  }
	| {
			__kind__: 'InsufficientAllowance';
			InsufficientAllowance: {
				allowance: bigint;
			};
	  }
	| {
			__kind__: 'Duplicate';
			Duplicate: {
				duplicate_of: bigint;
			};
	  }
	| {
			__kind__: 'InvalidReceiver';
			InvalidReceiver: {
				receiver: Principal;
			};
	  }
	| {
			__kind__: 'CreatedInFuture';
			CreatedInFuture: {
				ledger_time: bigint;
			};
	  }
	| {
			__kind__: 'TooOld';
			TooOld: null;
	  }
	| {
			__kind__: 'FailedToWithdrawFrom';
			FailedToWithdrawFrom: {
				withdraw_from_block?: bigint;
				rejection_code: RejectionCode_1;
				refund_block?: bigint;
				approval_refund_block?: bigint;
				rejection_reason: string;
			};
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: {
				balance: bigint;
			};
	  };
export interface EthAddressResponse {
	address: string;
}
export interface EthSignPrehashRequest {
	hash: string;
}
export interface DefiniteCanisterSettingsArgs {
	controller: Principal;
	freezing_threshold: bigint;
	controllers: Array<Principal>;
	memory_allocation: bigint;
	compute_allocation: bigint;
}
export interface CallerPaysIcrc2Tokens {
	ledger: Principal;
}
export interface Utxo {
	height: number;
	value: bigint;
	outpoint: Outpoint;
}
export interface GetAddressRequest {
	network: BitcoinNetwork;
	address_type: BitcoinAddressType;
}
export type TransferFromError =
	| {
			__kind__: 'GenericError';
			GenericError: {
				message: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'TemporarilyUnavailable';
			TemporarilyUnavailable: null;
	  }
	| {
			__kind__: 'InsufficientAllowance';
			InsufficientAllowance: {
				allowance: bigint;
			};
	  }
	| {
			__kind__: 'BadBurn';
			BadBurn: {
				min_burn_amount: bigint;
			};
	  }
	| {
			__kind__: 'Duplicate';
			Duplicate: {
				duplicate_of: bigint;
			};
	  }
	| {
			__kind__: 'BadFee';
			BadFee: {
				expected_fee: bigint;
			};
	  }
	| {
			__kind__: 'CreatedInFuture';
			CreatedInFuture: {
				ledger_time: bigint;
			};
	  }
	| {
			__kind__: 'TooOld';
			TooOld: null;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: {
				balance: bigint;
			};
	  };
export interface Config {
	ecdsa_key_name: string;
	ic_root_key_raw?: Uint8Array;
	cycles_ledger: Principal;
}
export type GetAddressError =
	| {
			__kind__: 'InternalError';
			InternalError: {
				msg: string;
			};
	  }
	| {
			__kind__: 'PaymentError';
			PaymentError: PaymentError;
	  };
export interface GetAddressResponse {
	address: string;
}
export interface EthAddressRequest {
	principal?: Principal;
}
export type PaymentError =
	| {
			__kind__: 'LedgerWithdrawFromError';
			LedgerWithdrawFromError: {
				error: WithdrawFromError;
				ledger: Principal;
			};
	  }
	| {
			__kind__: 'LedgerUnreachable';
			LedgerUnreachable: CallerPaysIcrc2Tokens;
	  }
	| {
			__kind__: 'InvalidPatron';
			InvalidPatron: null;
	  }
	| {
			__kind__: 'LedgerTransferFromError';
			LedgerTransferFromError: {
				error: TransferFromError;
				ledger: Principal;
			};
	  }
	| {
			__kind__: 'UnsupportedPaymentType';
			UnsupportedPaymentType: null;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: {
				needed: bigint;
				available: bigint;
			};
	  };
export interface SignWithSchnorrArgument {
	key_id: SchnorrKeyId;
	derivation_path: Array<Uint8Array>;
	message: Uint8Array;
}
export interface GetBalanceResponse {
	balance: bigint;
}
export interface HttpResponse {
	body: Uint8Array;
	headers: Array<[string, string]>;
	status_code: number;
}
export type Result_3 =
	| {
			__kind__: 'Ok';
			Ok: EthAddressResponse;
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  };
export interface EthSignTransactionRequest {
	to: string;
	gas: bigint;
	value: bigint;
	max_priority_fee_per_gas: bigint;
	data?: string;
	max_fee_per_gas: bigint;
	chain_id: bigint;
	nonce: bigint;
}
export type SendBtcError =
	| {
			__kind__: 'BuildP2wpkhError';
			BuildP2wpkhError: BuildP2wpkhTxError;
	  }
	| {
			__kind__: 'InternalError';
			InternalError: {
				msg: string;
			};
	  }
	| {
			__kind__: 'PaymentError';
			PaymentError: PaymentError;
	  };
export interface HttpRequest {
	url: string;
	method: string;
	body: Uint8Array;
	headers: Array<[string, string]>;
}
export enum BitcoinAddressType {
	P2WPKH = 'P2WPKH'
}
export enum BitcoinNetwork {
	mainnet = 'mainnet',
	regtest = 'regtest',
	testnet = 'testnet'
}
export enum CanisterStatusType {
	stopped = 'stopped',
	stopping = 'stopping',
	running = 'running'
}
export enum EcdsaCurve {
	secp256k1 = 'secp256k1'
}
export enum RejectionCode_1 {
	NoError = 'NoError',
	CanisterError = 'CanisterError',
	SysTransient = 'SysTransient',
	DestinationInvalid = 'DestinationInvalid',
	Unknown = 'Unknown',
	SysFatal = 'SysFatal',
	CanisterReject = 'CanisterReject'
}
export enum SchnorrAlgorithm {
	ed25519 = 'ed25519',
	bip340secp256k1 = 'bip340secp256k1'
}
export interface signerInterface {
	btc_caller_address(arg0: GetAddressRequest, arg1: PaymentType | null): Promise<Result>;
	btc_caller_balance(arg0: GetBalanceRequest, arg1: PaymentType | null): Promise<Result_1>;
	btc_caller_send(arg0: SendBtcRequest, arg1: PaymentType | null): Promise<Result_2>;
	config(): Promise<Config>;
	eth_address(arg0: EthAddressRequest, arg1: PaymentType | null): Promise<Result_3>;
	eth_address_of_caller(arg0: PaymentType | null): Promise<Result_3>;
	eth_personal_sign(arg0: EthPersonalSignRequest, arg1: PaymentType | null): Promise<Result_4>;
	eth_sign_prehash(arg0: EthSignPrehashRequest, arg1: PaymentType | null): Promise<Result_5>;
	eth_sign_transaction(
		arg0: EthSignTransactionRequest,
		arg1: PaymentType | null
	): Promise<Result_5>;
	generic_caller_ecdsa_public_key(
		arg0: EcdsaPublicKeyArgument,
		arg1: PaymentType | null
	): Promise<Result_6>;
	generic_sign_with_ecdsa(arg0: PaymentType | null, arg1: SignWithEcdsaArgument): Promise<Result_7>;
	get_canister_status(): Promise<CanisterStatusResultV2>;
	http_request(arg0: HttpRequest): Promise<HttpResponse>;
	schnorr_public_key(arg0: SchnorrPublicKeyArgument, arg1: PaymentType | null): Promise<Result_8>;
	schnorr_sign(arg0: SignWithSchnorrArgument, arg1: PaymentType | null): Promise<Result_9>;
}
export class Signer implements signerInterface {
	constructor(private actor: ActorSubclass<_SERVICE>) {}
	async btc_caller_address(arg0: GetAddressRequest, arg1: PaymentType | null): Promise<Result> {
		const result = await this.actor.btc_caller_address(
			to_candid_GetAddressRequest_n1(arg0),
			to_candid_opt_n7(arg1)
		);
		return from_candid_Result_n14(result);
	}
	async btc_caller_balance(arg0: GetBalanceRequest, arg1: PaymentType | null): Promise<Result_1> {
		const result = await this.actor.btc_caller_balance(
			to_candid_GetBalanceRequest_n30(arg0),
			to_candid_opt_n7(arg1)
		);
		return from_candid_Result_1_n32(result);
	}
	async btc_caller_send(arg0: SendBtcRequest, arg1: PaymentType | null): Promise<Result_2> {
		const result = await this.actor.btc_caller_send(
			to_candid_SendBtcRequest_n34(arg0),
			to_candid_opt_n7(arg1)
		);
		return from_candid_Result_2_n36(result);
	}
	async config(): Promise<Config> {
		const result = await this.actor.config();
		return from_candid_Config_n42(result);
	}
	async eth_address(arg0: EthAddressRequest, arg1: PaymentType | null): Promise<Result_3> {
		const result = await this.actor.eth_address(
			to_candid_EthAddressRequest_n45(arg0),
			to_candid_opt_n7(arg1)
		);
		return from_candid_Result_3_n47(result);
	}
	async eth_address_of_caller(arg0: PaymentType | null): Promise<Result_3> {
		const result = await this.actor.eth_address_of_caller(to_candid_opt_n7(arg0));
		return from_candid_Result_3_n47(result);
	}
	async eth_personal_sign(
		arg0: EthPersonalSignRequest,
		arg1: PaymentType | null
	): Promise<Result_4> {
		const result = await this.actor.eth_personal_sign(arg0, to_candid_opt_n7(arg1));
		return from_candid_Result_4_n52(result);
	}
	async eth_sign_prehash(arg0: EthSignPrehashRequest, arg1: PaymentType | null): Promise<Result_5> {
		const result = await this.actor.eth_sign_prehash(arg0, to_candid_opt_n7(arg1));
		return from_candid_Result_5_n54(result);
	}
	async eth_sign_transaction(
		arg0: EthSignTransactionRequest,
		arg1: PaymentType | null
	): Promise<Result_5> {
		const result = await this.actor.eth_sign_transaction(
			to_candid_EthSignTransactionRequest_n56(arg0),
			to_candid_opt_n7(arg1)
		);
		return from_candid_Result_5_n54(result);
	}
	async generic_caller_ecdsa_public_key(
		arg0: EcdsaPublicKeyArgument,
		arg1: PaymentType | null
	): Promise<Result_6> {
		const result = await this.actor.generic_caller_ecdsa_public_key(
			to_candid_EcdsaPublicKeyArgument_n58(arg0),
			to_candid_opt_n7(arg1)
		);
		return from_candid_Result_6_n64(result);
	}
	async generic_sign_with_ecdsa(
		arg0: PaymentType | null,
		arg1: SignWithEcdsaArgument
	): Promise<Result_7> {
		const result = await this.actor.generic_sign_with_ecdsa(
			to_candid_opt_n7(arg0),
			to_candid_SignWithEcdsaArgument_n66(arg1)
		);
		return from_candid_Result_7_n68(result);
	}
	async get_canister_status(): Promise<CanisterStatusResultV2> {
		const result = await this.actor.get_canister_status();
		return from_candid_CanisterStatusResultV2_n70(result);
	}
	async http_request(arg0: HttpRequest): Promise<HttpResponse> {
		const result = await this.actor.http_request(arg0);
		return result;
	}
	async schnorr_public_key(
		arg0: SchnorrPublicKeyArgument,
		arg1: PaymentType | null
	): Promise<Result_8> {
		const result = await this.actor.schnorr_public_key(
			to_candid_SchnorrPublicKeyArgument_n74(arg0),
			to_candid_opt_n7(arg1)
		);
		return from_candid_Result_8_n80(result);
	}
	async schnorr_sign(arg0: SignWithSchnorrArgument, arg1: PaymentType | null): Promise<Result_9> {
		const result = await this.actor.schnorr_sign(
			to_candid_SignWithSchnorrArgument_n81(arg0),
			to_candid_opt_n7(arg1)
		);
		return from_candid_Result_9_n83(result);
	}
}
function from_candid_BuildP2wpkhTxError_n40(value: _BuildP2wpkhTxError): BuildP2wpkhTxError {
	return from_candid_variant_n41(value);
}
function from_candid_CanisterStatusResultV2_n70(
	value: _CanisterStatusResultV2
): CanisterStatusResultV2 {
	return from_candid_record_n71(value);
}
function from_candid_CanisterStatusType_n72(value: _CanisterStatusType): CanisterStatusType {
	return from_candid_variant_n73(value);
}
function from_candid_Config_n42(value: _Config): Config {
	return from_candid_record_n43(value);
}
function from_candid_EthAddressError_n49(value: _EthAddressError): EthAddressError {
	return from_candid_variant_n50(value);
}
function from_candid_GetAddressError_n16(value: _GetAddressError): GetAddressError {
	return from_candid_variant_n17(value);
}
function from_candid_PaymentError_n18(value: _PaymentError): PaymentError {
	return from_candid_variant_n19(value);
}
function from_candid_RejectionCode_1_n25(value: _RejectionCode_1): RejectionCode_1 {
	return from_candid_variant_n26(value);
}
function from_candid_Result_1_n32(value: _Result_1): Result_1 {
	return from_candid_variant_n33(value);
}
function from_candid_Result_2_n36(value: _Result_2): Result_2 {
	return from_candid_variant_n37(value);
}
function from_candid_Result_3_n47(value: _Result_3): Result_3 {
	return from_candid_variant_n48(value);
}
function from_candid_Result_4_n52(value: _Result_4): Result_4 {
	return from_candid_variant_n53(value);
}
function from_candid_Result_5_n54(value: _Result_5): Result_5 {
	return from_candid_variant_n55(value);
}
function from_candid_Result_6_n64(value: _Result_6): Result_6 {
	return from_candid_variant_n65(value);
}
function from_candid_Result_7_n68(value: _Result_7): Result_7 {
	return from_candid_variant_n69(value);
}
function from_candid_Result_8_n80(value: _Result_8): Result_8 {
	return from_candid_variant_n65(value);
}
function from_candid_Result_9_n83(value: _Result_9): Result_9 {
	return from_candid_variant_n69(value);
}
function from_candid_Result_n14(value: _Result): Result {
	return from_candid_variant_n15(value);
}
function from_candid_SendBtcError_n38(value: _SendBtcError): SendBtcError {
	return from_candid_variant_n39(value);
}
function from_candid_TransferFromError_n28(value: _TransferFromError): TransferFromError {
	return from_candid_variant_n29(value);
}
function from_candid_WithdrawFromError_n21(value: _WithdrawFromError): WithdrawFromError {
	return from_candid_variant_n22(value);
}
function from_candid_opt_n24(value: [] | [bigint]): bigint | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_opt_n44(value: [] | [Uint8Array]): Uint8Array | null {
	return value.length === 0 ? null : value[0];
}
function from_candid_record_n20(value: { error: _WithdrawFromError; ledger: Principal }): {
	error: WithdrawFromError;
	ledger: Principal;
} {
	return {
		error: from_candid_WithdrawFromError_n21(value.error),
		ledger: value.ledger
	};
}
function from_candid_record_n23(value: {
	withdraw_from_block: [] | [bigint];
	rejection_code: _RejectionCode_1;
	refund_block: [] | [bigint];
	approval_refund_block: [] | [bigint];
	rejection_reason: string;
}): {
	withdraw_from_block?: bigint;
	rejection_code: RejectionCode_1;
	refund_block?: bigint;
	approval_refund_block?: bigint;
	rejection_reason: string;
} {
	return {
		withdraw_from_block: record_opt_to_undefined(from_candid_opt_n24(value.withdraw_from_block)),
		rejection_code: from_candid_RejectionCode_1_n25(value.rejection_code),
		refund_block: record_opt_to_undefined(from_candid_opt_n24(value.refund_block)),
		approval_refund_block: record_opt_to_undefined(
			from_candid_opt_n24(value.approval_refund_block)
		),
		rejection_reason: value.rejection_reason
	};
}
function from_candid_record_n27(value: { error: _TransferFromError; ledger: Principal }): {
	error: TransferFromError;
	ledger: Principal;
} {
	return {
		error: from_candid_TransferFromError_n28(value.error),
		ledger: value.ledger
	};
}
function from_candid_record_n43(value: {
	ecdsa_key_name: string;
	ic_root_key_raw: [] | [Uint8Array];
	cycles_ledger: Principal;
}): {
	ecdsa_key_name: string;
	ic_root_key_raw?: Uint8Array;
	cycles_ledger: Principal;
} {
	return {
		ecdsa_key_name: value.ecdsa_key_name,
		ic_root_key_raw: record_opt_to_undefined(from_candid_opt_n44(value.ic_root_key_raw)),
		cycles_ledger: value.cycles_ledger
	};
}
function from_candid_record_n71(value: {
	controller: Principal;
	status: _CanisterStatusType;
	freezing_threshold: bigint;
	balance: Array<[Uint8Array, bigint]>;
	memory_size: bigint;
	cycles: bigint;
	settings: _DefiniteCanisterSettingsArgs;
	idle_cycles_burned_per_day: bigint;
	module_hash: [] | [Uint8Array];
}): {
	controller: Principal;
	status: CanisterStatusType;
	freezing_threshold: bigint;
	balance: Array<[Uint8Array, bigint]>;
	memory_size: bigint;
	cycles: bigint;
	settings: DefiniteCanisterSettingsArgs;
	idle_cycles_burned_per_day: bigint;
	module_hash?: Uint8Array;
} {
	return {
		controller: value.controller,
		status: from_candid_CanisterStatusType_n72(value.status),
		freezing_threshold: value.freezing_threshold,
		balance: value.balance,
		memory_size: value.memory_size,
		cycles: value.cycles,
		settings: value.settings,
		idle_cycles_burned_per_day: value.idle_cycles_burned_per_day,
		module_hash: record_opt_to_undefined(from_candid_opt_n44(value.module_hash))
	};
}
function from_candid_tuple_n51(value: [_RejectionCode_1, string]): [RejectionCode_1, string] {
	return [from_candid_RejectionCode_1_n25(value[0]), value[1]];
}
function from_candid_variant_n15(
	value:
		| {
				Ok: _GetAddressResponse;
		  }
		| {
				Err: _GetAddressError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: GetAddressResponse;
	  }
	| {
			__kind__: 'Err';
			Err: GetAddressError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_GetAddressError_n16(value.Err)
				}
			: value;
}
function from_candid_variant_n17(
	value:
		| {
				InternalError: {
					msg: string;
				};
		  }
		| {
				PaymentError: _PaymentError;
		  }
):
	| {
			__kind__: 'InternalError';
			InternalError: {
				msg: string;
			};
	  }
	| {
			__kind__: 'PaymentError';
			PaymentError: PaymentError;
	  } {
	return 'InternalError' in value
		? {
				__kind__: 'InternalError',
				InternalError: value.InternalError
			}
		: 'PaymentError' in value
			? {
					__kind__: 'PaymentError',
					PaymentError: from_candid_PaymentError_n18(value.PaymentError)
				}
			: value;
}
function from_candid_variant_n19(
	value:
		| {
				LedgerWithdrawFromError: {
					error: _WithdrawFromError;
					ledger: Principal;
				};
		  }
		| {
				LedgerUnreachable: _CallerPaysIcrc2Tokens;
		  }
		| {
				InvalidPatron: null;
		  }
		| {
				LedgerTransferFromError: {
					error: _TransferFromError;
					ledger: Principal;
				};
		  }
		| {
				UnsupportedPaymentType: null;
		  }
		| {
				InsufficientFunds: {
					needed: bigint;
					available: bigint;
				};
		  }
):
	| {
			__kind__: 'LedgerWithdrawFromError';
			LedgerWithdrawFromError: {
				error: WithdrawFromError;
				ledger: Principal;
			};
	  }
	| {
			__kind__: 'LedgerUnreachable';
			LedgerUnreachable: CallerPaysIcrc2Tokens;
	  }
	| {
			__kind__: 'InvalidPatron';
			InvalidPatron: null;
	  }
	| {
			__kind__: 'LedgerTransferFromError';
			LedgerTransferFromError: {
				error: TransferFromError;
				ledger: Principal;
			};
	  }
	| {
			__kind__: 'UnsupportedPaymentType';
			UnsupportedPaymentType: null;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: {
				needed: bigint;
				available: bigint;
			};
	  } {
	return 'LedgerWithdrawFromError' in value
		? {
				__kind__: 'LedgerWithdrawFromError',
				LedgerWithdrawFromError: from_candid_record_n20(value.LedgerWithdrawFromError)
			}
		: 'LedgerUnreachable' in value
			? {
					__kind__: 'LedgerUnreachable',
					LedgerUnreachable: value.LedgerUnreachable
				}
			: 'InvalidPatron' in value
				? {
						__kind__: 'InvalidPatron',
						InvalidPatron: value.InvalidPatron
					}
				: 'LedgerTransferFromError' in value
					? {
							__kind__: 'LedgerTransferFromError',
							LedgerTransferFromError: from_candid_record_n27(value.LedgerTransferFromError)
						}
					: 'UnsupportedPaymentType' in value
						? {
								__kind__: 'UnsupportedPaymentType',
								UnsupportedPaymentType: value.UnsupportedPaymentType
							}
						: 'InsufficientFunds' in value
							? {
									__kind__: 'InsufficientFunds',
									InsufficientFunds: value.InsufficientFunds
								}
							: value;
}
function from_candid_variant_n22(
	value:
		| {
				GenericError: {
					message: string;
					error_code: bigint;
				};
		  }
		| {
				TemporarilyUnavailable: null;
		  }
		| {
				InsufficientAllowance: {
					allowance: bigint;
				};
		  }
		| {
				Duplicate: {
					duplicate_of: bigint;
				};
		  }
		| {
				InvalidReceiver: {
					receiver: Principal;
				};
		  }
		| {
				CreatedInFuture: {
					ledger_time: bigint;
				};
		  }
		| {
				TooOld: null;
		  }
		| {
				FailedToWithdrawFrom: {
					withdraw_from_block: [] | [bigint];
					rejection_code: _RejectionCode_1;
					refund_block: [] | [bigint];
					approval_refund_block: [] | [bigint];
					rejection_reason: string;
				};
		  }
		| {
				InsufficientFunds: {
					balance: bigint;
				};
		  }
):
	| {
			__kind__: 'GenericError';
			GenericError: {
				message: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'TemporarilyUnavailable';
			TemporarilyUnavailable: null;
	  }
	| {
			__kind__: 'InsufficientAllowance';
			InsufficientAllowance: {
				allowance: bigint;
			};
	  }
	| {
			__kind__: 'Duplicate';
			Duplicate: {
				duplicate_of: bigint;
			};
	  }
	| {
			__kind__: 'InvalidReceiver';
			InvalidReceiver: {
				receiver: Principal;
			};
	  }
	| {
			__kind__: 'CreatedInFuture';
			CreatedInFuture: {
				ledger_time: bigint;
			};
	  }
	| {
			__kind__: 'TooOld';
			TooOld: null;
	  }
	| {
			__kind__: 'FailedToWithdrawFrom';
			FailedToWithdrawFrom: {
				withdraw_from_block?: bigint;
				rejection_code: RejectionCode_1;
				refund_block?: bigint;
				approval_refund_block?: bigint;
				rejection_reason: string;
			};
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: {
				balance: bigint;
			};
	  } {
	return 'GenericError' in value
		? {
				__kind__: 'GenericError',
				GenericError: value.GenericError
			}
		: 'TemporarilyUnavailable' in value
			? {
					__kind__: 'TemporarilyUnavailable',
					TemporarilyUnavailable: value.TemporarilyUnavailable
				}
			: 'InsufficientAllowance' in value
				? {
						__kind__: 'InsufficientAllowance',
						InsufficientAllowance: value.InsufficientAllowance
					}
				: 'Duplicate' in value
					? {
							__kind__: 'Duplicate',
							Duplicate: value.Duplicate
						}
					: 'InvalidReceiver' in value
						? {
								__kind__: 'InvalidReceiver',
								InvalidReceiver: value.InvalidReceiver
							}
						: 'CreatedInFuture' in value
							? {
									__kind__: 'CreatedInFuture',
									CreatedInFuture: value.CreatedInFuture
								}
							: 'TooOld' in value
								? {
										__kind__: 'TooOld',
										TooOld: value.TooOld
									}
								: 'FailedToWithdrawFrom' in value
									? {
											__kind__: 'FailedToWithdrawFrom',
											FailedToWithdrawFrom: from_candid_record_n23(value.FailedToWithdrawFrom)
										}
									: 'InsufficientFunds' in value
										? {
												__kind__: 'InsufficientFunds',
												InsufficientFunds: value.InsufficientFunds
											}
										: value;
}
function from_candid_variant_n26(
	value:
		| {
				NoError: null;
		  }
		| {
				CanisterError: null;
		  }
		| {
				SysTransient: null;
		  }
		| {
				DestinationInvalid: null;
		  }
		| {
				Unknown: null;
		  }
		| {
				SysFatal: null;
		  }
		| {
				CanisterReject: null;
		  }
): RejectionCode_1 {
	return 'NoError' in value
		? RejectionCode_1.NoError
		: 'CanisterError' in value
			? RejectionCode_1.CanisterError
			: 'SysTransient' in value
				? RejectionCode_1.SysTransient
				: 'DestinationInvalid' in value
					? RejectionCode_1.DestinationInvalid
					: 'Unknown' in value
						? RejectionCode_1.Unknown
						: 'SysFatal' in value
							? RejectionCode_1.SysFatal
							: 'CanisterReject' in value
								? RejectionCode_1.CanisterReject
								: value;
}
function from_candid_variant_n29(
	value:
		| {
				GenericError: {
					message: string;
					error_code: bigint;
				};
		  }
		| {
				TemporarilyUnavailable: null;
		  }
		| {
				InsufficientAllowance: {
					allowance: bigint;
				};
		  }
		| {
				BadBurn: {
					min_burn_amount: bigint;
				};
		  }
		| {
				Duplicate: {
					duplicate_of: bigint;
				};
		  }
		| {
				BadFee: {
					expected_fee: bigint;
				};
		  }
		| {
				CreatedInFuture: {
					ledger_time: bigint;
				};
		  }
		| {
				TooOld: null;
		  }
		| {
				InsufficientFunds: {
					balance: bigint;
				};
		  }
):
	| {
			__kind__: 'GenericError';
			GenericError: {
				message: string;
				error_code: bigint;
			};
	  }
	| {
			__kind__: 'TemporarilyUnavailable';
			TemporarilyUnavailable: null;
	  }
	| {
			__kind__: 'InsufficientAllowance';
			InsufficientAllowance: {
				allowance: bigint;
			};
	  }
	| {
			__kind__: 'BadBurn';
			BadBurn: {
				min_burn_amount: bigint;
			};
	  }
	| {
			__kind__: 'Duplicate';
			Duplicate: {
				duplicate_of: bigint;
			};
	  }
	| {
			__kind__: 'BadFee';
			BadFee: {
				expected_fee: bigint;
			};
	  }
	| {
			__kind__: 'CreatedInFuture';
			CreatedInFuture: {
				ledger_time: bigint;
			};
	  }
	| {
			__kind__: 'TooOld';
			TooOld: null;
	  }
	| {
			__kind__: 'InsufficientFunds';
			InsufficientFunds: {
				balance: bigint;
			};
	  } {
	return 'GenericError' in value
		? {
				__kind__: 'GenericError',
				GenericError: value.GenericError
			}
		: 'TemporarilyUnavailable' in value
			? {
					__kind__: 'TemporarilyUnavailable',
					TemporarilyUnavailable: value.TemporarilyUnavailable
				}
			: 'InsufficientAllowance' in value
				? {
						__kind__: 'InsufficientAllowance',
						InsufficientAllowance: value.InsufficientAllowance
					}
				: 'BadBurn' in value
					? {
							__kind__: 'BadBurn',
							BadBurn: value.BadBurn
						}
					: 'Duplicate' in value
						? {
								__kind__: 'Duplicate',
								Duplicate: value.Duplicate
							}
						: 'BadFee' in value
							? {
									__kind__: 'BadFee',
									BadFee: value.BadFee
								}
							: 'CreatedInFuture' in value
								? {
										__kind__: 'CreatedInFuture',
										CreatedInFuture: value.CreatedInFuture
									}
								: 'TooOld' in value
									? {
											__kind__: 'TooOld',
											TooOld: value.TooOld
										}
									: 'InsufficientFunds' in value
										? {
												__kind__: 'InsufficientFunds',
												InsufficientFunds: value.InsufficientFunds
											}
										: value;
}
function from_candid_variant_n33(
	value:
		| {
				Ok: _GetBalanceResponse;
		  }
		| {
				Err: _GetAddressError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: GetBalanceResponse;
	  }
	| {
			__kind__: 'Err';
			Err: GetAddressError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_GetAddressError_n16(value.Err)
				}
			: value;
}
function from_candid_variant_n37(
	value:
		| {
				Ok: _SendBtcResponse;
		  }
		| {
				Err: _SendBtcError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: SendBtcResponse;
	  }
	| {
			__kind__: 'Err';
			Err: SendBtcError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_SendBtcError_n38(value.Err)
				}
			: value;
}
function from_candid_variant_n39(
	value:
		| {
				BuildP2wpkhError: _BuildP2wpkhTxError;
		  }
		| {
				InternalError: {
					msg: string;
				};
		  }
		| {
				PaymentError: _PaymentError;
		  }
):
	| {
			__kind__: 'BuildP2wpkhError';
			BuildP2wpkhError: BuildP2wpkhTxError;
	  }
	| {
			__kind__: 'InternalError';
			InternalError: {
				msg: string;
			};
	  }
	| {
			__kind__: 'PaymentError';
			PaymentError: PaymentError;
	  } {
	return 'BuildP2wpkhError' in value
		? {
				__kind__: 'BuildP2wpkhError',
				BuildP2wpkhError: from_candid_BuildP2wpkhTxError_n40(value.BuildP2wpkhError)
			}
		: 'InternalError' in value
			? {
					__kind__: 'InternalError',
					InternalError: value.InternalError
				}
			: 'PaymentError' in value
				? {
						__kind__: 'PaymentError',
						PaymentError: from_candid_PaymentError_n18(value.PaymentError)
					}
				: value;
}
function from_candid_variant_n41(
	value:
		| {
				NotEnoughFunds: {
					available: bigint;
					required: bigint;
				};
		  }
		| {
				WrongBitcoinNetwork: null;
		  }
		| {
				NotP2WPKHSourceAddress: null;
		  }
		| {
				InvalidDestinationAddress: _GetAddressResponse;
		  }
		| {
				InvalidSourceAddress: _GetAddressResponse;
		  }
):
	| {
			__kind__: 'NotEnoughFunds';
			NotEnoughFunds: {
				available: bigint;
				required: bigint;
			};
	  }
	| {
			__kind__: 'WrongBitcoinNetwork';
			WrongBitcoinNetwork: null;
	  }
	| {
			__kind__: 'NotP2WPKHSourceAddress';
			NotP2WPKHSourceAddress: null;
	  }
	| {
			__kind__: 'InvalidDestinationAddress';
			InvalidDestinationAddress: GetAddressResponse;
	  }
	| {
			__kind__: 'InvalidSourceAddress';
			InvalidSourceAddress: GetAddressResponse;
	  } {
	return 'NotEnoughFunds' in value
		? {
				__kind__: 'NotEnoughFunds',
				NotEnoughFunds: value.NotEnoughFunds
			}
		: 'WrongBitcoinNetwork' in value
			? {
					__kind__: 'WrongBitcoinNetwork',
					WrongBitcoinNetwork: value.WrongBitcoinNetwork
				}
			: 'NotP2WPKHSourceAddress' in value
				? {
						__kind__: 'NotP2WPKHSourceAddress',
						NotP2WPKHSourceAddress: value.NotP2WPKHSourceAddress
					}
				: 'InvalidDestinationAddress' in value
					? {
							__kind__: 'InvalidDestinationAddress',
							InvalidDestinationAddress: value.InvalidDestinationAddress
						}
					: 'InvalidSourceAddress' in value
						? {
								__kind__: 'InvalidSourceAddress',
								InvalidSourceAddress: value.InvalidSourceAddress
							}
						: value;
}
function from_candid_variant_n48(
	value:
		| {
				Ok: _EthAddressResponse;
		  }
		| {
				Err: _EthAddressError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: EthAddressResponse;
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_EthAddressError_n49(value.Err)
				}
			: value;
}
function from_candid_variant_n50(
	value:
		| {
				SigningError: [_RejectionCode_1, string];
		  }
		| {
				PaymentError: _PaymentError;
		  }
):
	| {
			__kind__: 'SigningError';
			SigningError: [RejectionCode_1, string];
	  }
	| {
			__kind__: 'PaymentError';
			PaymentError: PaymentError;
	  } {
	return 'SigningError' in value
		? {
				__kind__: 'SigningError',
				SigningError: from_candid_tuple_n51(value.SigningError)
			}
		: 'PaymentError' in value
			? {
					__kind__: 'PaymentError',
					PaymentError: from_candid_PaymentError_n18(value.PaymentError)
				}
			: value;
}
function from_candid_variant_n53(
	value:
		| {
				Ok: _EthPersonalSignResponse;
		  }
		| {
				Err: _EthAddressError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: EthPersonalSignResponse;
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_EthAddressError_n49(value.Err)
				}
			: value;
}
function from_candid_variant_n55(
	value:
		| {
				Ok: _EthSignPrehashResponse;
		  }
		| {
				Err: _EthAddressError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: EthSignPrehashResponse;
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_EthAddressError_n49(value.Err)
				}
			: value;
}
function from_candid_variant_n65(
	value:
		| {
				Ok: [_EcdsaPublicKeyResponse];
		  }
		| {
				Err: _EthAddressError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: [EcdsaPublicKeyResponse];
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_EthAddressError_n49(value.Err)
				}
			: value;
}
function from_candid_variant_n69(
	value:
		| {
				Ok: [_SignWithEcdsaResponse];
		  }
		| {
				Err: _EthAddressError;
		  }
):
	| {
			__kind__: 'Ok';
			Ok: [SignWithEcdsaResponse];
	  }
	| {
			__kind__: 'Err';
			Err: EthAddressError;
	  } {
	return 'Ok' in value
		? {
				__kind__: 'Ok',
				Ok: value.Ok
			}
		: 'Err' in value
			? {
					__kind__: 'Err',
					Err: from_candid_EthAddressError_n49(value.Err)
				}
			: value;
}
function from_candid_variant_n73(
	value:
		| {
				stopped: null;
		  }
		| {
				stopping: null;
		  }
		| {
				running: null;
		  }
): CanisterStatusType {
	return 'stopped' in value
		? CanisterStatusType.stopped
		: 'stopping' in value
			? CanisterStatusType.stopping
			: 'running' in value
				? CanisterStatusType.running
				: value;
}
function to_candid_Account_n10(value: Account): _Account {
	return to_candid_record_n11(value);
}
function to_candid_BitcoinAddressType_n5(value: BitcoinAddressType): _BitcoinAddressType {
	return to_candid_variant_n6(value);
}
function to_candid_BitcoinNetwork_n3(value: BitcoinNetwork): _BitcoinNetwork {
	return to_candid_variant_n4(value);
}
function to_candid_EcdsaCurve_n62(value: EcdsaCurve): _EcdsaCurve {
	return to_candid_variant_n63(value);
}
function to_candid_EcdsaKeyId_n60(value: EcdsaKeyId): _EcdsaKeyId {
	return to_candid_record_n61(value);
}
function to_candid_EcdsaPublicKeyArgument_n58(
	value: EcdsaPublicKeyArgument
): _EcdsaPublicKeyArgument {
	return to_candid_record_n59(value);
}
function to_candid_EthAddressRequest_n45(value: EthAddressRequest): _EthAddressRequest {
	return to_candid_record_n46(value);
}
function to_candid_EthSignTransactionRequest_n56(
	value: EthSignTransactionRequest
): _EthSignTransactionRequest {
	return to_candid_record_n57(value);
}
function to_candid_GetAddressRequest_n1(value: GetAddressRequest): _GetAddressRequest {
	return to_candid_record_n2(value);
}
function to_candid_GetBalanceRequest_n30(value: GetBalanceRequest): _GetBalanceRequest {
	return to_candid_record_n31(value);
}
function to_candid_PatronPaysIcrc2Tokens_n12(value: PatronPaysIcrc2Tokens): _PatronPaysIcrc2Tokens {
	return to_candid_record_n13(value);
}
function to_candid_PaymentType_n8(value: PaymentType): _PaymentType {
	return to_candid_variant_n9(value);
}
function to_candid_SchnorrAlgorithm_n78(value: SchnorrAlgorithm): _SchnorrAlgorithm {
	return to_candid_variant_n79(value);
}
function to_candid_SchnorrKeyId_n76(value: SchnorrKeyId): _SchnorrKeyId {
	return to_candid_record_n77(value);
}
function to_candid_SchnorrPublicKeyArgument_n74(
	value: SchnorrPublicKeyArgument
): _SchnorrPublicKeyArgument {
	return to_candid_record_n75(value);
}
function to_candid_SendBtcRequest_n34(value: SendBtcRequest): _SendBtcRequest {
	return to_candid_record_n35(value);
}
function to_candid_SignWithEcdsaArgument_n66(value: SignWithEcdsaArgument): _SignWithEcdsaArgument {
	return to_candid_record_n67(value);
}
function to_candid_SignWithSchnorrArgument_n81(
	value: SignWithSchnorrArgument
): _SignWithSchnorrArgument {
	return to_candid_record_n82(value);
}
function to_candid_opt_n7(value: PaymentType | null): [] | [_PaymentType] {
	return value === null ? candid_none() : candid_some(to_candid_PaymentType_n8(value));
}
function to_candid_record_n11(value: { owner: Principal; subaccount?: Uint8Array }): {
	owner: Principal;
	subaccount: [] | [Uint8Array];
} {
	return {
		owner: value.owner,
		subaccount: value.subaccount ? candid_some(value.subaccount) : candid_none()
	};
}
function to_candid_record_n13(value: { ledger: Principal; patron: Account }): {
	ledger: Principal;
	patron: _Account;
} {
	return {
		ledger: value.ledger,
		patron: to_candid_Account_n10(value.patron)
	};
}
function to_candid_record_n2(value: {
	network: BitcoinNetwork;
	address_type: BitcoinAddressType;
}): {
	network: _BitcoinNetwork;
	address_type: _BitcoinAddressType;
} {
	return {
		network: to_candid_BitcoinNetwork_n3(value.network),
		address_type: to_candid_BitcoinAddressType_n5(value.address_type)
	};
}
function to_candid_record_n31(value: {
	network: BitcoinNetwork;
	address_type: BitcoinAddressType;
	min_confirmations?: number;
}): {
	network: _BitcoinNetwork;
	address_type: _BitcoinAddressType;
	min_confirmations: [] | [number];
} {
	return {
		network: to_candid_BitcoinNetwork_n3(value.network),
		address_type: to_candid_BitcoinAddressType_n5(value.address_type),
		min_confirmations: value.min_confirmations
			? candid_some(value.min_confirmations)
			: candid_none()
	};
}
function to_candid_record_n35(value: {
	fee_satoshis?: bigint;
	network: BitcoinNetwork;
	utxos_to_spend: Array<Utxo>;
	address_type: BitcoinAddressType;
	outputs: Array<BtcTxOutput>;
}): {
	fee_satoshis: [] | [bigint];
	network: _BitcoinNetwork;
	utxos_to_spend: Array<_Utxo>;
	address_type: _BitcoinAddressType;
	outputs: Array<_BtcTxOutput>;
} {
	return {
		fee_satoshis: value.fee_satoshis ? candid_some(value.fee_satoshis) : candid_none(),
		network: to_candid_BitcoinNetwork_n3(value.network),
		utxos_to_spend: value.utxos_to_spend,
		address_type: to_candid_BitcoinAddressType_n5(value.address_type),
		outputs: value.outputs
	};
}
function to_candid_record_n46(value: { principal?: Principal }): {
	principal: [] | [Principal];
} {
	return {
		principal: value.principal ? candid_some(value.principal) : candid_none()
	};
}
function to_candid_record_n57(value: {
	to: string;
	gas: bigint;
	value: bigint;
	max_priority_fee_per_gas: bigint;
	data?: string;
	max_fee_per_gas: bigint;
	chain_id: bigint;
	nonce: bigint;
}): {
	to: string;
	gas: bigint;
	value: bigint;
	max_priority_fee_per_gas: bigint;
	data: [] | [string];
	max_fee_per_gas: bigint;
	chain_id: bigint;
	nonce: bigint;
} {
	return {
		to: value.to,
		gas: value.gas,
		value: value.value,
		max_priority_fee_per_gas: value.max_priority_fee_per_gas,
		data: value.data ? candid_some(value.data) : candid_none(),
		max_fee_per_gas: value.max_fee_per_gas,
		chain_id: value.chain_id,
		nonce: value.nonce
	};
}
function to_candid_record_n59(value: {
	key_id: EcdsaKeyId;
	canister_id?: Principal;
	derivation_path: Array<Uint8Array>;
}): {
	key_id: _EcdsaKeyId;
	canister_id: [] | [Principal];
	derivation_path: Array<Uint8Array>;
} {
	return {
		key_id: to_candid_EcdsaKeyId_n60(value.key_id),
		canister_id: value.canister_id ? candid_some(value.canister_id) : candid_none(),
		derivation_path: value.derivation_path
	};
}
function to_candid_record_n61(value: { name: string; curve: EcdsaCurve }): {
	name: string;
	curve: _EcdsaCurve;
} {
	return {
		name: value.name,
		curve: to_candid_EcdsaCurve_n62(value.curve)
	};
}
function to_candid_record_n67(value: {
	key_id: EcdsaKeyId;
	derivation_path: Array<Uint8Array>;
	message_hash: Uint8Array;
}): {
	key_id: _EcdsaKeyId;
	derivation_path: Array<Uint8Array>;
	message_hash: Uint8Array;
} {
	return {
		key_id: to_candid_EcdsaKeyId_n60(value.key_id),
		derivation_path: value.derivation_path,
		message_hash: value.message_hash
	};
}
function to_candid_record_n75(value: {
	key_id: SchnorrKeyId;
	canister_id?: Principal;
	derivation_path: Array<Uint8Array>;
}): {
	key_id: _SchnorrKeyId;
	canister_id: [] | [Principal];
	derivation_path: Array<Uint8Array>;
} {
	return {
		key_id: to_candid_SchnorrKeyId_n76(value.key_id),
		canister_id: value.canister_id ? candid_some(value.canister_id) : candid_none(),
		derivation_path: value.derivation_path
	};
}
function to_candid_record_n77(value: { algorithm: SchnorrAlgorithm; name: string }): {
	algorithm: _SchnorrAlgorithm;
	name: string;
} {
	return {
		algorithm: to_candid_SchnorrAlgorithm_n78(value.algorithm),
		name: value.name
	};
}
function to_candid_record_n82(value: {
	key_id: SchnorrKeyId;
	derivation_path: Array<Uint8Array>;
	message: Uint8Array;
}): {
	key_id: _SchnorrKeyId;
	derivation_path: Array<Uint8Array>;
	message: Uint8Array;
} {
	return {
		key_id: to_candid_SchnorrKeyId_n76(value.key_id),
		derivation_path: value.derivation_path,
		message: value.message
	};
}
function to_candid_variant_n4(value: BitcoinNetwork):
	| {
			mainnet: null;
	  }
	| {
			regtest: null;
	  }
	| {
			testnet: null;
	  } {
	return value == BitcoinNetwork.mainnet
		? {
				mainnet: null
			}
		: value == BitcoinNetwork.regtest
			? {
					regtest: null
				}
			: value == BitcoinNetwork.testnet
				? {
						testnet: null
					}
				: value;
}
function to_candid_variant_n6(value: BitcoinAddressType): {
	P2WPKH: null;
} {
	return value == BitcoinAddressType.P2WPKH
		? {
				P2WPKH: null
			}
		: value;
}
function to_candid_variant_n63(value: EcdsaCurve): {
	secp256k1: null;
} {
	return value == EcdsaCurve.secp256k1
		? {
				secp256k1: null
			}
		: value;
}
function to_candid_variant_n79(value: SchnorrAlgorithm):
	| {
			ed25519: null;
	  }
	| {
			bip340secp256k1: null;
	  } {
	return value == SchnorrAlgorithm.ed25519
		? {
				ed25519: null
			}
		: value == SchnorrAlgorithm.bip340secp256k1
			? {
					bip340secp256k1: null
				}
			: value;
}
function to_candid_variant_n9(
	value:
		| {
				__kind__: 'PatronPaysIcrc2Tokens';
				PatronPaysIcrc2Tokens: PatronPaysIcrc2Tokens;
		  }
		| {
				__kind__: 'AttachedCycles';
				AttachedCycles: null;
		  }
		| {
				__kind__: 'CallerPaysIcrc2Cycles';
				CallerPaysIcrc2Cycles: null;
		  }
		| {
				__kind__: 'CallerPaysIcrc2Tokens';
				CallerPaysIcrc2Tokens: CallerPaysIcrc2Tokens;
		  }
		| {
				__kind__: 'PatronPaysIcrc2Cycles';
				PatronPaysIcrc2Cycles: Account;
		  }
):
	| {
			PatronPaysIcrc2Tokens: _PatronPaysIcrc2Tokens;
	  }
	| {
			AttachedCycles: null;
	  }
	| {
			CallerPaysIcrc2Cycles: null;
	  }
	| {
			CallerPaysIcrc2Tokens: _CallerPaysIcrc2Tokens;
	  }
	| {
			PatronPaysIcrc2Cycles: _Account;
	  } {
	return value.__kind__ === 'PatronPaysIcrc2Tokens'
		? {
				PatronPaysIcrc2Tokens: to_candid_PatronPaysIcrc2Tokens_n12(value.PatronPaysIcrc2Tokens)
			}
		: value.__kind__ === 'AttachedCycles'
			? {
					AttachedCycles: value.AttachedCycles
				}
			: value.__kind__ === 'CallerPaysIcrc2Cycles'
				? {
						CallerPaysIcrc2Cycles: value.CallerPaysIcrc2Cycles
					}
				: value.__kind__ === 'CallerPaysIcrc2Tokens'
					? {
							CallerPaysIcrc2Tokens: value.CallerPaysIcrc2Tokens
						}
					: value.__kind__ === 'PatronPaysIcrc2Cycles'
						? {
								PatronPaysIcrc2Cycles: to_candid_Account_n10(value.PatronPaysIcrc2Cycles)
							}
						: value;
}
export interface CreateActorOptions {
	agent?: Agent;
	agentOptions?: HttpAgentOptions;
	actorOptions?: ActorConfig;
}
export function createActor(canisterId: string, options: CreateActorOptions = {}): Signer {
	const agent =
		options.agent ||
		HttpAgent.createSync({
			...options.agentOptions
		});
	if (options.agent && options.agentOptions) {
		console.warn(
			'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.'
		);
	}
	const actor = Actor.createActor<_SERVICE>(idlFactory, {
		agent,
		canisterId: canisterId,
		...options.actorOptions
	});
	return new Signer(actor);
}
