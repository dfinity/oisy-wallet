import type { UserProfile } from '$declarations/backend/backend.did';
import { nowInBigIntNanoSeconds } from '$icp/utils/date.utils';
import * as api from '$lib/api/backend.api';
import { POUH_ISSUER_CANISTER_ID } from '$lib/constants/app.constants';
import { POUH_CREDENTIAL_TYPE } from '$lib/constants/credentials.constants';
import { requestPouhCredential } from '$lib/services/request-pouh-credential.services';
import { i18n } from '$lib/stores/i18n.store';
import { userProfileStore } from '$lib/stores/user-profile.store';
import { mockUserProfile } from '$tests/mocks/user-profile.mock';
import { toastsStore } from '@dfinity/gix-components';
import { Ed25519KeyIdentity } from '@dfinity/identity';
import { Principal } from '@dfinity/principal';
import { get } from 'svelte/store';
import type { MockInstance } from 'vitest';

const successfulCredentialJWT =
	'eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0..';

vi.mock('@dfinity/verifiable-credentials/request-verifiable-presentation', () => ({
	requestVerifiablePresentation: ({
		onSuccess
	}: {
		onSuccess: (params: { Ok: string }) => void;
	}) => {
		// Mocks can't use outside variables, so we have to repeate the JWT here
		const successfulCredentialJWT =
			'eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0..';
		onSuccess({ Ok: successfulCredentialJWT });
	}
}));

describe('request-pouh-credential.services', () => {
	describe('requestPouhCredential', () => {
		let addUserCredentialMock: MockInstance;
		let getUserProfileMock: MockInstance;

		const identity = Ed25519KeyIdentity.generate();

		const initialUserProfile: UserProfile = { ...mockUserProfile };

		beforeEach(() => {
			vi.clearAllMocks();
			vi.resetAllMocks();
			toastsStore.reset();
			userProfileStore.reset();
			userProfileStore.set({ certified: true, profile: initialUserProfile });
			addUserCredentialMock = vi.spyOn(api, 'addUserCredential');
			getUserProfileMock = vi.spyOn(api, 'getUserProfile');
		});

		it('should request credential validate it and store it', async () => {
			addUserCredentialMock.mockResolvedValueOnce({ Ok: null });
			const userProfileWithCredential: UserProfile = {
				...mockUserProfile,
				credentials: [
					{
						issuer: 'pouh',
						verified_date_timestamp: [nowInBigIntNanoSeconds()],
						credential_type: { ProofOfUniqueness: null }
					}
				]
			};
			getUserProfileMock.mockResolvedValueOnce({ Ok: userProfileWithCredential });

			const result = await requestPouhCredential({ identity });

			expect(result.success).toBe(true);
			expect(addUserCredentialMock).toBeCalledTimes(1);
			expect(addUserCredentialMock).toBeCalledWith({
				identity,
				credentialJwt: successfulCredentialJWT,
				credentialSpec: {
					credential_type: POUH_CREDENTIAL_TYPE,
					arguments: []
				},
				issuerCanisterId: Principal.fromText(POUH_ISSUER_CANISTER_ID),
				currentUserVersion: undefined,
				nullishIdentityErrorMessage: get(i18n).auth.error.no_internet_identity
			});
			expect(getUserProfileMock).toBeCalledTimes(1);
			expect(get(userProfileStore)).toEqual({
				certified: true,
				profile: userProfileWithCredential
			});
		});

		it('should not store the credential if validating credential fails', async () => {
			addUserCredentialMock.mockResolvedValueOnce({ Err: { InvalidCredential: null } });

			const result = await requestPouhCredential({ identity });

			expect(result.success).toBe(true);
			expect(addUserCredentialMock).toBeCalledTimes(1);
			expect(addUserCredentialMock).toBeCalledWith({
				identity,
				credentialJwt: successfulCredentialJWT,
				credentialSpec: {
					credential_type: POUH_CREDENTIAL_TYPE,
					arguments: []
				},
				issuerCanisterId: Principal.fromText(POUH_ISSUER_CANISTER_ID),
				currentUserVersion: undefined,
				nullishIdentityErrorMessage: get(i18n).auth.error.no_internet_identity
			});
			expect(getUserProfileMock).not.toBeCalled();
			expect(get(userProfileStore)).toEqual({
				certified: true,
				profile: initialUserProfile
			});
			expect(get(toastsStore)[0]).toMatchObject({
				text: get(i18n).auth.error.invalid_pouh_credential,
				level: 'error'
			});
		});
	});
});
