type Arg = variant { Upgrade; Init : InitArg };
type CanisterError = variant {
  PrincipalNotParticipatingInAirdrop;
  NoChildrenForCode;
  CannotRegisterMultipleTimes;
  NoTokensLeft;
  CanisterKilled;
  GeneralError : text;
  UnknownOisyWalletAddress;
  NoMoreCodes;
  MaximumDepthReached;
  CodeAlreadyRedeemed;
  TransactionUnkown;
  CodeNotFound;
  DuplicateKey : text;
  NoCodeForII;
  ManagersCannotParticipateInTheAirdrop;
};
type CodeInfo = record {
  codes_generated : nat64;
  code : text;
  codes_redeemed : nat64;
};
type EthereumTransaction = record {
  transferred : bool;
  reward_type : RewardType;
  eth_address : text;
  amount : nat64;
};
type Info = record {
  "principal" : principal;
  code : text;
  ethereum_address : text;
  children : opt vec record { text; bool };
  tokens_transferred : bool;
};
type InitArg = record {
  backend_canister_id : principal;
  token_per_person : nat64;
  maximum_depth : nat64;
  total_tokens : nat64;
  numbers_of_children : nat64;
};
type PrincipalState = record {
  codes_generated : nat64;
  codes_redeemed : nat64;
};
type Result = variant { Ok; Err : CanisterError };
type Result_1 = variant { Ok : CodeInfo; Err : CanisterError };
type Result_2 = variant {
  Ok : vec record { nat64; text; nat };
  Err : CanisterError;
};
type Result_3 = variant { Ok : Info; Err : CanisterError };
type Result_4 = variant {
  Ok : vec record { nat64; text };
  Err : CanisterError;
};
type Result_5 = variant { Ok : vec principal; Err : CanisterError };
type Result_6 = variant {
  Ok : vec record { principal; PrincipalState };
  Err : CanisterError;
};
type Result_7 = variant {
  Ok : record { nat64; nat64; nat64; nat64 };
  Err : CanisterError;
};
type Result_8 = variant { Ok : vec EthereumTransaction; Err : CanisterError };
type Result_9 = variant { Ok : text; Err : CanisterError };
type RewardType = variant { Airdrop; Referral };
service : (Arg) -> {
  add_admin : (principal) -> (Result);
  add_codes : (vec text) -> (Result);
  add_manager : (principal) -> (Result);
  bring_caninster_back_to_life : () -> (Result);
  clean_up : () -> (Result);
  generate_code : () -> (Result_1);
  get_airdrop : (nat64) -> (Result_2);
  get_code : () -> (Result_3) query;
  get_logs : (nat64) -> (Result_4) query;
  get_state_admins : () -> (Result_5) query;
  get_state_managers : () -> (Result_6) query;
  get_state_parameters : () -> (Result_7) query;
  get_state_rewards : () -> (Result_8) query;
  get_stats : () -> (Result_9) query;
  is_manager : () -> (bool) query;
  kill_canister : () -> (Result);
  put_airdrop : (vec nat64) -> (Result);
  redeem_code : (text) -> (Result_3);
  remove_admins : (vec principal) -> (Result);
  remove_managers : (vec principal) -> (Result);
  remove_principal_airdrop : (principal) -> (Result);
  set_total_tokens : (nat64) -> (Result);
}