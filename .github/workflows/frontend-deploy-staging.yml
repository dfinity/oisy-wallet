name: Deploy Frontend / Backend to Environment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      network:
        required: true
        type: choice
        description: "Select the network to deploy to."
        options:
          - staging
          - beta
          - prod
      canister:
        required: true
        type: choice
        description: "Select the canister to deploy."
        options:
          - frontend
          - backend

jobs:
  deployment:
    runs-on: ubuntu-latest

    steps:

      - name: Fail if branch is not main
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          echo "This workflow can only be manually triggered with workflow_dispatch on the main branch"
          exit 1

      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Deployment Network
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "NETWORK=staging" >> $GITHUB_ENV
            echo "CANISTER=frontend" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "NETWORK=${{ github.event.inputs.network }}" >> $GITHUB_ENV
            echo "CANISTER=${{ github.event.inputs.canister }}" >> $GITHUB_ENV
          fi

      - name: Set Environment Variables Based on Network
        run: |
          if [ "$NETWORK" == "staging" ]; then
            echo "VITE_ETHERSCAN_API_KEY=${{ secrets.VITE_ETHERSCAN_API_KEY_STAGING }}" >> $GITHUB_ENV
            echo "VITE_INFURA_API_KEY: ${{ secrets.VITE_INFURA_API_KEY_STAGING }}" >> $GITHUB_ENV
            echo "VITE_ALCHEMY_API_KEY: ${{ secrets.VITE_ALCHEMY_API_KEY_STAGING }}" >> $GITHUB_ENV
            echo "VITE_WALLET_CONNECT_PROJECT_ID: ${{ secrets.VITE_WALLET_CONNECT_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
            echo "VITE_OISY_URL: ${{ secrets.VITE_OISY_URL_STAGING }}" >> $GITHUB_ENV
            echo "VITE_AIRDROP: ${{ secrets.VITE_AIRDROP_STAGING }}" >> $GITHUB_ENV
            echo "VITE_AIRDROP_COMPLETED: ${{ secrets.VITE_AIRDROP_COMPLETED_STAGING }}" >> $GITHUB_ENV
            echo "VITE_COINGECKO_API_URL: ${{ secrets.VITE_COINGECKO_API_URL_STAGING }}" >> $GITHUB_ENV
            echo "VITE_COINGECKO_API_KEY: ${{ secrets.VITE_COINGECKO_API_KEY_STAGING }}" >> $GITHUB_ENV
            echo "VITE_JUNO_SATELLITE_ID: ${{ secrets.VITE_JUNO_SATELLITE_ID_STAGING }}" >> $GITHUB_ENV
            echo "VITE_JUNO_ORBITER_ID: ${{ secrets.VITE_JUNO_ORBITER_ID_STAGING }}" >> $GITHUB_ENV
            echo "VITE_POUH_ENABLED: ${{ secrets.VITE_POUH_ENABLED_STAGING }}" >> $GITHUB_ENV
            echo "VITE_AUTH_ALTERNATIVE_ORIGINS: ${{ secrets.VITE_AUTH_ALTERNATIVE_ORIGINS_STAGING }}" >> $GITHUB_ENV
            echo "VITE_AUTH_DERIVATION_ORIGIN: ${{ secrets.VITE_AUTH_DERIVATION_ORIGIN_STAGING }}" >> $GITHUB_ENV
            echo "VITE_NETWORK_BITCOIN_ENABLED: ${{ secrets.VITE_NETWORK_BITCOIN_ENABLED_STAGING }}" >> $GITHUB_ENV
            echo "VITE_ONRAMPER_API_KEY_DEV: ${{ secrets.VITE_ONRAMPER_API_KEY_DEV_STAGING }}" >> $GITHUB_ENV
            echo "VITE_ONRAMPER_API_KEY_PROD: ${{ secrets.VITE_ONRAMPER_API_KEY_PROD_STAGING }}" >> $GITHUB_ENV
            echo "DFX_DEPLOY_KEY: ${{ secrets.DFX_DEPLOY_KEY_STAGING }}" >> $GITHUB_ENV
          elif [ "$NETWORK" == "beta" ]; then
            export VITE_ETHERSCAN_API_KEY="${{ secrets.VITE_ETHERSCAN_API_KEY_BETA }}"
            export VITE_INFURA_API_KEY="${{ secrets.VITE_INFURA_API_KEY_BETA }}"
            export VITE_ALCHEMY_API_KEY="${{ secrets.VITE_ALCHEMY_API_KEY_BETA }}"
            export VITE_WALLET_CONNECT_PROJECT_ID="${{ secrets.VITE_WALLET_CONNECT_PROJECT_ID_BETA }}"
            export VITE_OISY_URL="${{ secrets.VITE_OISY_URL_BETA }}"
            export VITE_AIRDROP="${{ secrets.VITE_AIRDROP_BETA }}"
            export VITE_AIRDROP_COMPLETED="${{ secrets.VITE_AIRDROP_COMPLETED_BETA }}"
            export VITE_COINGECKO_API_URL="${{ secrets.VITE_COINGECKO_API_URL_BETA }}"
            export VITE_COINGECKO_API_KEY="${{ secrets.VITE_COINGECKO_API_KEY_BETA }}"
            export VITE_JUNO_SATELLITE_ID="${{ secrets.VITE_JUNO_SATELLITE_ID_BETA }}"
            export VITE_JUNO_ORBITER_ID="${{ secrets.VITE_JUNO_ORBITER_ID_BETA }}"
            export VITE_POUH_ENABLED="${{ secrets.VITE_POUH_ENABLED_BETA }}"
            export VITE_AUTH_ALTERNATIVE_ORIGINS="${{ secrets.VITE_AUTH_ALTERNATIVE_ORIGINS_BETA }}"
            export VITE_AUTH_DERIVATION_ORIGIN="${{ secrets.VITE_AUTH_DERIVATION_ORIGIN_BETA }}"
            export VITE_NETWORK_BITCOIN_ENABLED="${{ secrets.VITE_NETWORK_BITCOIN_ENABLED_BETA }}"
            export VITE_ONRAMPER_API_KEY_DEV="${{ secrets.VITE_ONRAMPER_API_KEY_DEV_BETA }}"
            export VITE_ONRAMPER_API_KEY_PROD="${{ secrets.VITE_ONRAMPER_API_KEY_PROD_BETA }}"
            export DFX_DEPLOY_KEY="${{ secrets.DFX_DEPLOY_KEY_BETA }}"
          elif [ "$NETWORK" == "prod" ]; then
            export VITE_ETHERSCAN_API_KEY="${{ secrets.VITE_ETHERSCAN_API_KEY_PROD }}"
            export VITE_INFURA_API_KEY="${{ secrets.VITE_INFURA_API_KEY_PROD }}"
            export VITE_ALCHEMY_API_KEY="${{ secrets.VITE_ALCHEMY_API_KEY_PROD }}"
            export VITE_WALLET_CONNECT_PROJECT_ID="${{ secrets.VITE_WALLET_CONNECT_PROJECT_ID_PROD }}"
            export VITE_OISY_URL="${{ secrets.VITE_OISY_URL_PROD }}"
            export VITE_AIRDROP="${{ secrets.VITE_AIRDROP_PROD }}"
            export VITE_AIRDROP_COMPLETED="${{ secrets.VITE_AIRDROP_COMPLETED_PROD }}"
            export VITE_COINGECKO_API_URL="${{ secrets.VITE_COINGECKO_API_URL_PROD }}"
            export VITE_COINGECKO_API_KEY="${{ secrets.VITE_COINGECKO_API_KEY_PROD }}"
            export VITE_JUNO_SATELLITE_ID="${{ secrets.VITE_JUNO_SATELLITE_ID_PROD }}"
            export VITE_JUNO_ORBITER_ID="${{ secrets.VITE_JUNO_ORBITER_ID_PROD }}"
            export VITE_POUH_ENABLED="${{ secrets.VITE_POUH_ENABLED_PROD }}"
            export VITE_AUTH_ALTERNATIVE_ORIGINS="${{ secrets.VITE_AUTH_ALTERNATIVE_ORIGINS_PROD }}"
            export VITE_AUTH_DERIVATION_ORIGIN="${{ secrets.VITE_AUTH_DERIVATION_ORIGIN_PROD }}"
            export VITE_NETWORK_BITCOIN_ENABLED="${{ secrets.VITE_NETWORK_BITCOIN_ENABLED_PROD }}"
            export VITE_ONRAMPER_API_KEY_DEV="${{ secrets.VITE_ONRAMPER_API_KEY_DEV_PROD }}"
            export VITE_ONRAMPER_API_KEY_PROD="${{ secrets.VITE_ONRAMPER_API_KEY_PROD_PROD }}"
            export DFX_DEPLOY_KEY="${{ secrets.DFX_DEPLOY_KEY_PROD }}"
          fi

      - name: Fail if no Identity is provided
        run: |
          if [ -z "$DFX_DEPLOY_KEY" ]; then
            echo "Error: DFX_DEPLOY_KEY for $NETWORK is not set or is empty. Please provide the deployment identity key."
            exit 1
          fi

      - name: Prepare
        uses: ./.github/actions/prepare

      - name: Set up DFX
        uses: dfinity/setup-dfx@main

      - name: Install key
        run: |
          key_pem=$(mktemp)
          printenv "DFX_DEPLOY_KEY" > "$key_pem"
          dfx identity import --disable-encryption --force default "$key_pem"
          rm "$key_pem"

      - name: Pre-build
        run: npm run build

      - name: Deploy to Environment
        run: dfx deploy $CANISTER --network $NETWORK
