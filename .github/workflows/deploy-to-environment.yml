name: Deploy Frontend / Backend to Environment

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:
    inputs:
      network:
        required: true
        type: choice
        description: 'Select the network to deploy to.'
        options:
          - staging
          - beta
          - test_fe_1
          - test_fe_2
          - test_fe_3
          - test_fe_4
          - test_fe_5
          - test_fe_6
          - test_be_1
          - audit
      canister:
        required: true
        type: choice
        description: 'Select the canister to deploy.'
        options:
          - frontend
          - backend
      force-backend:
        required: false
        type: boolean
        description: 'Force backend deployment even if no changes are detected.'
        default: false
  workflow_call:
    inputs:
      workflow-call:
        description: 'To distinguish workflow_call from regular calls'
        required: false
        type: boolean
        default: true
      network:
        required: true
        type: string
      canister:
        required: false
        type: string
        default: frontend
    secrets:
      VITE_ETHERSCAN_API_KEY_STAGING:
        required: true
      VITE_INFURA_API_KEY_STAGING:
        required: true
      VITE_ALCHEMY_API_KEY_STAGING:
        required: true
      VITE_QUICKNODE_API_KEY_STAGING:
        required: true
      VITE_WALLET_CONNECT_PROJECT_ID_STAGING:
        required: true
      VITE_COINGECKO_API_KEY_STAGING:
        required: true
      VITE_POUH_ENABLED_STAGING:
        required: true
      VITE_SWAP_ACTION_ENABLED_STAGING:
        required: true
      VITE_USER_SNAPSHOT_ENABLED_STAGING:
        required: true
      VITE_AIRDROPS_ENABLED_STAGING:
        required: true
      VITE_PLAUSIBLE_ENABLED_STAGING:
        required: true
      VITE_USER_NETWORKS_FEATURE_ENABLED_STAGING:
        required: true
      VITE_ADDRESS_BOOK_ENABLED_STAGING:
        required: true
      VITE_ONRAMPER_API_KEY_DEV_STAGING:
        required: true
      VITE_ONRAMPER_API_KEY_PROD_STAGING:
        required: true
      VITE_AUTH_ALTERNATIVE_ORIGINS_STAGING:
        required: true
      VITE_EVM_NETWORKS_ENABLED_STAGING:
        required: true
      DFX_DEPLOY_KEY_STAGING:
        required: true
      VITE_ETHERSCAN_API_KEY_BETA:
        required: true
      VITE_INFURA_API_KEY_BETA:
        required: true
      VITE_ALCHEMY_API_KEY_BETA:
        required: true
      VITE_QUICKNODE_API_KEY_BETA:
        required: true
      VITE_WALLET_CONNECT_PROJECT_ID_BETA:
        required: true
      VITE_COINGECKO_API_KEY_BETA:
        required: true
      VITE_POUH_ENABLED_BETA:
        required: true
      VITE_AUTH_ALTERNATIVE_ORIGINS_BETA:
        required: true
      VITE_ONRAMPER_API_KEY_DEV_BETA:
        required: true
      VITE_SWAP_ACTION_ENABLED_BETA:
        required: true
      VITE_USER_SNAPSHOT_ENABLED_BETA:
        required: true
      VITE_AIRDROPS_ENABLED_BETA:
        required: true
      VITE_PLAUSIBLE_ENABLED_BETA:
        required: true
      VITE_USER_NETWORKS_FEATURE_ENABLED_BETA:
        required: true
      VITE_ADDRESS_BOOK_ENABLED_BETA:
        required: true
      VITE_ONRAMPER_API_KEY_PROD_BETA:
        required: true
      VITE_EVM_NETWORKS_ENABLED_BETA:
        required: true
      DFX_DEPLOY_KEY_BETA:
        required: true

run-name: >-
  ${{ 
    github.event_name == 'push' && github.ref_type == 'branch' && 'Deploying Frontend / Backend to Staging'
    || github.event_name == 'push' && github.ref_type == 'tag' && 'Deploying Frontend / Backend to Beta'
    || github.event.inputs.canister == 'backend' && github.event.inputs.force-backend == 'true' && format('Deploying {0} to {1} and force backend = {2}', inputs.canister, inputs.network, inputs.force-backend)
    || format('Deploying {0} to {1}', inputs.canister, inputs.network) }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}-${{ github.event.inputs.network }}-${{ github.event.inputs.canister }}
  cancel-in-progress: false

permissions: {}

jobs:
  deployment:
    runs-on: ubuntu-24.04
    permissions:
      contents: read

    steps:
      - name: Determine Deployment Network
        run: |
          echo "deploy_frontend=false" >> $GITHUB_ENV
          echo "deploy_backend=false" >> $GITHUB_ENV
          if [ "$WORKFLOW_CALL" == "true" ]; then
            echo "NETWORK=$NETWORK_CALL" >> $GITHUB_ENV
            echo "CANISTER=$CANISTER_CALL" >> $GITHUB_ENV
            echo "deploy_frontend=true" >> $GITHUB_ENV
            echo "deploy_backend=true" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "push" ]; then
            if [ "$REF_TYPE" == "branch" ]; then
              echo "NETWORK=staging" >> $GITHUB_ENV
            elif [ "$REF_TYPE" == "tag" ]; then
              echo "NETWORK=beta" >> $GITHUB_ENV
            else
              echo "Error: Unsupported ref type."
              exit 1
            fi
            echo "CANISTER=frontend" >> $GITHUB_ENV
            echo "deploy_frontend=true" >> $GITHUB_ENV
            echo "deploy_backend=true" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "NETWORK=$NETWORK" >> $GITHUB_ENV
            echo "CANISTER=$CANISTER" >> $GITHUB_ENV
            if [ "$CANISTER" = "frontend" ]; then
              echo "deploy_frontend=true" >> $GITHUB_ENV
            fi
            if [ "$CANISTER" = "backend" ]; then
              echo "deploy_backend=true" >> $GITHUB_ENV
            fi
          else
            echo "Error: Unsupported event type."
            exit 1
          fi
        env:
          REF_TYPE: ${{ github.ref_type }}
          NETWORK: ${{ github.event.inputs.network }}
          CANISTER: ${{ github.event.inputs.canister }}
          WORKFLOW_CALL: ${{ inputs.workflow-call }}
          NETWORK_CALL: ${{ inputs.network }}
          CANISTER_CALL: ${{ inputs.canister }}

      - name: Check release policy
        run: |
          if [[ "$NETWORK" ==  "staging" ]] && [[ "$REF" != "refs/heads/main" ]] ; then
            echo "Only the main branch may be deployed to staging."
            exit 1
          fi
          if [[ "$NETWORK" = test_fe_* ]] && [[ "$CANISTER" != "frontend" ]] ; then
            echo "deploy_backend=false" >> $GITHUB_ENV
            echo "Only a frontend may be deployed to test_fe_* networks"
            exit 1
          fi
          if [[ "$NETWORK" = test_be_* ]] && [[ "$CANISTER" != "backend" ]] ; then
            echo "deploy_frontend=false" >> $GITHUB_ENV
            echo "Only a backend may be deployed to test_be_* networks"
            exit 1
          fi
        env:
          REF: ${{ github.ref }}

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 2
          persist-credentials: false

      - name: Fetch base branch
        run: |
          git fetch origin "$BASE_REF:$BASE_REF"
        env:
          BASE_REF: ${{ github.base_ref }}

      - name: Set Output Variables Based on Network
        id: set-outputs
        run: |
          if [[ "$NETWORK" == "staging" ]] || [[ "$NETWORK" = test_* ]] || [[ "$NETWORK" = "audit" ]]; then
            {
              echo "VITE_ETHERSCAN_API_KEY=$VITE_ETHERSCAN_API_KEY_STAGING"
              echo "VITE_INFURA_API_KEY=$VITE_INFURA_API_KEY_STAGING"
              echo "VITE_ALCHEMY_API_KEY=$VITE_ALCHEMY_API_KEY_STAGING"
              echo "VITE_QUICKNODE_API_KEY=$VITE_QUICKNODE_API_KEY_STAGING"
              echo "VITE_WALLET_CONNECT_PROJECT_ID=$VITE_WALLET_CONNECT_PROJECT_ID_STAGING"
              echo "VITE_COINGECKO_API_KEY=$VITE_COINGECKO_API_KEY_STAGING"
              echo "VITE_POUH_ENABLED=$VITE_POUH_ENABLED_STAGING"
              echo "VITE_SWAP_ACTION_ENABLED=$VITE_SWAP_ACTION_ENABLED_STAGING"
              echo "VITE_USER_SNAPSHOT_ENABLED=$VITE_USER_SNAPSHOT_ENABLED_STAGING"
              echo "VITE_AIRDROPS_ENABLED=$VITE_AIRDROPS_ENABLED_STAGING"
              echo "VITE_USER_NETWORKS_FEATURE_ENABLED=$VITE_USER_NETWORKS_FEATURE_ENABLED_STAGING"
              echo "VITE_ONRAMPER_API_KEY_DEV=$VITE_ONRAMPER_API_KEY_DEV_STAGING"
              echo "VITE_ONRAMPER_API_KEY_PROD=$VITE_ONRAMPER_API_KEY_PROD_STAGING"
              echo "VITE_PLAUSIBLE_ENABLED=$VITE_PLAUSIBLE_ENABLED_STAGING"
              echo "VITE_EVM_NETWORKS_ENABLED=$VITE_EVM_NETWORKS_ENABLED_STAGING"
              echo "VITE_ADDRESS_BOOK_ENABLED=$VITE_ADDRESS_BOOK_ENABLED_STAGING"
            } >> $GITHUB_OUTPUT
            if [[ "$NETWORK" == "staging" ]]; then
              echo "VITE_AUTH_ALTERNATIVE_ORIGINS=$VITE_AUTH_ALTERNATIVE_ORIGINS_STAGING" >> $GITHUB_OUTPUT
            else
              SUBDOMAIN="fe${NETWORK#test_fe_}" # E.g. test_fe_1 -> fe1
              echo "VITE_AUTH_ALTERNATIVE_ORIGINS=$(echo "$VITE_AUTH_ALTERNATIVE_ORIGINS_STAGING" | sed "s/staging/$SUBDOMAIN/g")" >> $GITHUB_OUTPUT
            fi
            {
              echo "DFX_DEPLOY_KEY<<EOF"
              echo "$DFX_DEPLOY_KEY_STAGING"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          elif [[ "$NETWORK" == "beta" ]]; then
            {
              echo "VITE_ETHERSCAN_API_KEY=$VITE_ETHERSCAN_API_KEY_BETA"
              echo "VITE_INFURA_API_KEY=$VITE_INFURA_API_KEY_BETA"
              echo "VITE_ALCHEMY_API_KEY=$VITE_ALCHEMY_API_KEY_BETA"
              echo "VITE_QUICKNODE_API_KEY=$VITE_QUICKNODE_API_KEY_BETA"
              echo "VITE_WALLET_CONNECT_PROJECT_ID=$VITE_WALLET_CONNECT_PROJECT_ID_BETA"
              echo "VITE_COINGECKO_API_KEY=$VITE_COINGECKO_API_KEY_BETA"
              echo "VITE_POUH_ENABLED=$VITE_POUH_ENABLED_BETA"
              echo "VITE_AUTH_ALTERNATIVE_ORIGINS=$VITE_AUTH_ALTERNATIVE_ORIGINS_BETA"
              echo "VITE_ONRAMPER_API_KEY_DEV=$VITE_ONRAMPER_API_KEY_DEV_BETA"
              echo "VITE_SWAP_ACTION_ENABLED=$VITE_SWAP_ACTION_ENABLED_BETA"
              echo "VITE_USER_SNAPSHOT_ENABLED=$VITE_USER_SNAPSHOT_ENABLED_BETA"
              echo "VITE_AIRDROPS_ENABLED=$VITE_AIRDROPS_ENABLED_BETA"
              echo "VITE_USER_NETWORKS_FEATURE_ENABLED=$VITE_USER_NETWORKS_FEATURE_ENABLED_BETA"
              echo "VITE_ONRAMPER_API_KEY_PROD=$VITE_ONRAMPER_API_KEY_PROD_BETA"
              echo "VITE_PLAUSIBLE_ENABLED=$VITE_PLAUSIBLE_ENABLED_BETA"
              echo "VITE_EVM_NETWORKS_ENABLED=$VITE_EVM_NETWORKS_ENABLED_BETA"
              echo "VITE_ADDRESS_BOOK_ENABLED=$VITE_ADDRESS_BOOK_ENABLED_BETA"
            } >> $GITHUB_OUTPUT
            {
              echo "DFX_DEPLOY_KEY<<EOF"
              echo "$DFX_DEPLOY_KEY_BETA"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
          fi
        env:
          VITE_ETHERSCAN_API_KEY_STAGING: ${{ secrets.VITE_ETHERSCAN_API_KEY_STAGING }}
          VITE_INFURA_API_KEY_STAGING: ${{ secrets.VITE_INFURA_API_KEY_STAGING }}
          VITE_ALCHEMY_API_KEY_STAGING: ${{ secrets.VITE_ALCHEMY_API_KEY_STAGING }}
          VITE_QUICKNODE_API_KEY_STAGING: ${{ secrets.VITE_QUICKNODE_API_KEY_STAGING }}
          VITE_WALLET_CONNECT_PROJECT_ID_STAGING: ${{ secrets.VITE_WALLET_CONNECT_PROJECT_ID_STAGING }}
          VITE_COINGECKO_API_KEY_STAGING: ${{ secrets.VITE_COINGECKO_API_KEY_STAGING }}
          VITE_POUH_ENABLED_STAGING: ${{ secrets.VITE_POUH_ENABLED_STAGING }}
          VITE_SWAP_ACTION_ENABLED_STAGING: ${{ secrets.VITE_SWAP_ACTION_ENABLED_STAGING }}
          VITE_USER_SNAPSHOT_ENABLED_STAGING: ${{ secrets.VITE_USER_SNAPSHOT_ENABLED_STAGING }}
          VITE_AIRDROPS_ENABLED_STAGING: ${{ secrets.VITE_AIRDROPS_ENABLED_STAGING }}
          VITE_PLAUSIBLE_ENABLED_STAGING: ${{ secrets.VITE_PLAUSIBLE_ENABLED_STAGING }}
          VITE_USER_NETWORKS_FEATURE_ENABLED_STAGING: ${{ secrets.VITE_USER_NETWORKS_FEATURE_ENABLED_STAGING }}
          VITE_ONRAMPER_API_KEY_DEV_STAGING: ${{ secrets.VITE_ONRAMPER_API_KEY_DEV_STAGING }}
          VITE_ONRAMPER_API_KEY_PROD_STAGING: ${{ secrets.VITE_ONRAMPER_API_KEY_PROD_STAGING }}
          VITE_AUTH_ALTERNATIVE_ORIGINS_STAGING: ${{ secrets.VITE_AUTH_ALTERNATIVE_ORIGINS_STAGING }}
          VITE_EVM_NETWORKS_ENABLED_STAGING: ${{ secrets.VITE_EVM_NETWORKS_ENABLED_STAGING }}
          VITE_ADDRESS_BOOK_ENABLED_STAGING: ${{ secrets.VITE_ADDRESS_BOOK_ENABLED_STAGING }}
          DFX_DEPLOY_KEY_STAGING: ${{ secrets.DFX_DEPLOY_KEY_STAGING }}

          VITE_ETHERSCAN_API_KEY_BETA: ${{ secrets.VITE_ETHERSCAN_API_KEY_BETA }}
          VITE_INFURA_API_KEY_BETA: ${{ secrets.VITE_INFURA_API_KEY_BETA }}
          VITE_ALCHEMY_API_KEY_BETA: ${{ secrets.VITE_ALCHEMY_API_KEY_BETA }}
          VITE_QUICKNODE_API_KEY_BETA: ${{ secrets.VITE_QUICKNODE_API_KEY_BETA }}
          VITE_WALLET_CONNECT_PROJECT_ID_BETA: ${{ secrets.VITE_WALLET_CONNECT_PROJECT_ID_BETA }}
          VITE_COINGECKO_API_KEY_BETA: ${{ secrets.VITE_COINGECKO_API_KEY_BETA }}
          VITE_POUH_ENABLED_BETA: ${{ secrets.VITE_POUH_ENABLED_BETA }}
          VITE_AUTH_ALTERNATIVE_ORIGINS_BETA: ${{ secrets.VITE_AUTH_ALTERNATIVE_ORIGINS_BETA }}
          VITE_ONRAMPER_API_KEY_DEV_BETA: ${{ secrets.VITE_ONRAMPER_API_KEY_DEV_BETA }}
          VITE_SWAP_ACTION_ENABLED_BETA: ${{ secrets.VITE_SWAP_ACTION_ENABLED_BETA }}
          VITE_USER_SNAPSHOT_ENABLED_BETA: ${{ secrets.VITE_USER_SNAPSHOT_ENABLED_BETA }}
          VITE_AIRDROPS_ENABLED_BETA: ${{ secrets.VITE_AIRDROPS_ENABLED_BETA }}
          VITE_PLAUSIBLE_ENABLED_BETA: ${{ secrets.VITE_PLAUSIBLE_ENABLED_BETA }}
          VITE_USER_NETWORKS_FEATURE_ENABLED_BETA: ${{ secrets.VITE_USER_NETWORKS_FEATURE_ENABLED_BETA }}
          VITE_ONRAMPER_API_KEY_PROD_BETA: ${{ secrets.VITE_ONRAMPER_API_KEY_PROD_BETA }}
          VITE_EVM_NETWORKS_ENABLED_BETA: ${{ secrets.VITE_EVM_NETWORKS_ENABLED_BETA }}
          VITE_ADDRESS_BOOK_ENABLED_BETA: ${{ secrets.VITE_ADDRESS_BOOK_ENABLED_BETA }}
          DFX_DEPLOY_KEY_BETA: ${{ secrets.DFX_DEPLOY_KEY_BETA }}

      - name: Fail if no Identity is provided
        run: |
          if [ -z "$DFX_DEPLOY_KEY" ]; then
            echo "Error: DFX_DEPLOY_KEY for $NETWORK is not set or is empty. Please provide the deployment identity key."
            exit 1
          fi
        env:
          DFX_DEPLOY_KEY: ${{ steps.set-outputs.outputs.DFX_DEPLOY_KEY }}

      - name: Restore cargo cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            /home/runner/.cargo/registry
            /home/runner/.cargo/git
            target/
            ~/.cargo/bin/
          key: ${{ runner.os }}-deploy-cargo-${{ hashFiles('Cargo.toml', 'Cargo.lock', 'rust-toolchain.toml', 'src/backend/**/*', 'src/shared/**/*') }}
          restore-keys: |
            ${{ runner.os }}-deploy-cargo-

      - name: Prepare
        uses: ./.github/actions/prepare

      - name: Set up DFX
        uses: dfinity/setup-dfx@e50c04f104ee4285ec010f10609483cf41e4d365 # main
        env:
          DFX_DEPLOY_KEY: ${{ steps.set-outputs.outputs.DFX_DEPLOY_KEY }}

      - name: Install key
        run: |
          key_pem=$(mktemp)
          printenv "DFX_DEPLOY_KEY" > "$key_pem"
          dfx identity import --disable-encryption --force default "$key_pem"
          rm "$key_pem"
          dfx identity use default
          dfx identity get-principal
        env:
          DFX_DEPLOY_KEY: ${{ steps.set-outputs.outputs.DFX_DEPLOY_KEY }}

      - name: Pre-build
        run: npm run build
        env:
          VITE_ETHERSCAN_API_KEY: ${{ steps.set-outputs.outputs.VITE_ETHERSCAN_API_KEY }}
          VITE_INFURA_API_KEY: ${{ steps.set-outputs.outputs.VITE_INFURA_API_KEY }}
          VITE_ALCHEMY_API_KEY: ${{ steps.set-outputs.outputs.VITE_ALCHEMY_API_KEY }}
          VITE_QUICKNODE_API_KEY: ${{ steps.set-outputs.outputs.VITE_QUICKNODE_API_KEY }}
          VITE_WALLET_CONNECT_PROJECT_ID: ${{ steps.set-outputs.outputs.VITE_WALLET_CONNECT_PROJECT_ID }}
          VITE_COINGECKO_API_KEY: ${{ steps.set-outputs.outputs.VITE_COINGECKO_API_KEY }}
          VITE_POUH_ENABLED: ${{ steps.set-outputs.outputs.VITE_POUH_ENABLED }}
          VITE_SWAP_ACTION_ENABLED: ${{ steps.set-outputs.outputs.VITE_SWAP_ACTION_ENABLED }}
          VITE_USER_SNAPSHOT_ENABLED: ${{ steps.set-outputs.outputs.VITE_USER_SNAPSHOT_ENABLED }}
          VITE_AIRDROPS_ENABLED: ${{ steps.set-outputs.outputs.VITE_AIRDROPS_ENABLED }}
          VITE_PLAUSIBLE_ENABLED: ${{ steps.set-outputs.outputs.VITE_PLAUSIBLE_ENABLED }}
          VITE_USER_NETWORKS_FEATURE_ENABLED: ${{ steps.set-outputs.outputs.VITE_USER_NETWORKS_FEATURE_ENABLED }}
          VITE_ONRAMPER_API_KEY_DEV: ${{ steps.set-outputs.outputs.VITE_ONRAMPER_API_KEY_DEV }}
          VITE_ONRAMPER_API_KEY_PROD: ${{ steps.set-outputs.outputs.VITE_ONRAMPER_API_KEY_PROD }}
          VITE_AUTH_ALTERNATIVE_ORIGINS: ${{ steps.set-outputs.outputs.VITE_AUTH_ALTERNATIVE_ORIGINS }}
          VITE_EVM_NETWORKS_ENABLED: ${{ steps.set-outputs.outputs.VITE_EVM_NETWORKS_ENABLED }}
          VITE_ADDRESS_BOOK_ENABLED: ${{ steps.set-outputs.outputs.VITE_ADDRESS_BOOK_ENABLED }}

      - name: Deploy Frontend to Environment
        run: |
          if [ "$deploy_frontend" == "true" ] ; then
            dfx deploy frontend --network $NETWORK
          fi
        env:
          VITE_ETHERSCAN_API_KEY: ${{ steps.set-outputs.outputs.VITE_ETHERSCAN_API_KEY }}
          VITE_INFURA_API_KEY: ${{ steps.set-outputs.outputs.VITE_INFURA_API_KEY }}
          VITE_ALCHEMY_API_KEY: ${{ steps.set-outputs.outputs.VITE_ALCHEMY_API_KEY }}
          VITE_QUICKNODE_API_KEY: ${{ steps.set-outputs.outputs.VITE_QUICKNODE_API_KEY }}
          VITE_WALLET_CONNECT_PROJECT_ID: ${{ steps.set-outputs.outputs.VITE_WALLET_CONNECT_PROJECT_ID }}
          VITE_COINGECKO_API_KEY: ${{ steps.set-outputs.outputs.VITE_COINGECKO_API_KEY }}
          VITE_POUH_ENABLED: ${{ steps.set-outputs.outputs.VITE_POUH_ENABLED }}
          VITE_SWAP_ACTION_ENABLED: ${{ steps.set-outputs.outputs.VITE_SWAP_ACTION_ENABLED }}
          VITE_USER_SNAPSHOT_ENABLED: ${{ steps.set-outputs.outputs.VITE_USER_SNAPSHOT_ENABLED }}
          VITE_AIRDROPS_ENABLED: ${{ steps.set-outputs.outputs.VITE_AIRDROPS_ENABLED }}
          VITE_PLAUSIBLE_ENABLED: ${{ steps.set-outputs.outputs.VITE_PLAUSIBLE_ENABLED }}
          VITE_USER_NETWORKS_FEATURE_ENABLED: ${{ steps.set-outputs.outputs.VITE_USER_NETWORKS_FEATURE_ENABLED }}
          VITE_ONRAMPER_API_KEY_DEV: ${{ steps.set-outputs.outputs.VITE_ONRAMPER_API_KEY_DEV }}
          VITE_ONRAMPER_API_KEY_PROD: ${{ steps.set-outputs.outputs.VITE_ONRAMPER_API_KEY_PROD }}
          VITE_AUTH_ALTERNATIVE_ORIGINS: ${{ steps.set-outputs.outputs.VITE_AUTH_ALTERNATIVE_ORIGINS }}
          VITE_EVM_NETWORKS_ENABLED: ${{ steps.set-outputs.outputs.VITE_EVM_NETWORKS_ENABLED }}
          VITE_ADDRESS_BOOK_ENABLED: ${{ steps.set-outputs.outputs.VITE_ADDRESS_BOOK_ENABLED }}
          DFX_DEPLOY_KEY: ${{ steps.set-outputs.outputs.DFX_DEPLOY_KEY }}

      - name: Deploy Backend to Environment
        run: |
          DFX_DEPLOY_FLAGS=() # Arguments to be added to the dfx deploy command.
          [[ "$FORCE_BACKEND" != "true" ]] || DFX_DEPLOY_FLAGS+=('--yes' '--upgrade-unchanged') # Corresponds to: dfx deploy --yes --upgrade-unchanged

          if [ "$deploy_backend" == "true" ] ; then
            if git diff --quiet "origin/$BASE_REF" HEAD -- Cargo.toml Cargo.lock rust-toolchain.toml src/backend/**/* src/shared/**/*; then
              if [ "$FORCE_BACKEND" != "true" ]; then
                echo "No changes in specified files/folders detected, skipping backend deployment."
              else
                ./scripts/setup cargo-binstall candid-extractor ic-wasm didc yq
                dfx deploy backend --network "$NETWORK" "${DFX_DEPLOY_FLAGS[@]}"
              fi
            else
              ./scripts/setup cargo-binstall candid-extractor ic-wasm didc yq
              dfx deploy backend --network "$NETWORK" "${DFX_DEPLOY_FLAGS[@]}"
            fi
          fi
        env:
          FORCE_BACKEND: ${{ github.event.inputs.force-backend }}
          DFX_DEPLOY_KEY: ${{ steps.set-outputs.outputs.DFX_DEPLOY_KEY }}
          BASE_REF: ${{ github.base_ref }}
